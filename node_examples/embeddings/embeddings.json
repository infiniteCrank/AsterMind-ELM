[
  {
    "embedding": [
      0.052445030639162546,
      0,
      0,
      0.0725519631800291,
      0,
      0.07906816166103676,
      0.2847390131157845,
      0.018492191284189097,
      0.24843362621251397,
      0,
      0.004854875531541043,
      0,
      0,
      0,
      0,
      0,
      0,
      0.11045406160226025,
      0.004081753530911735,
      0.08703514009605333,
      0.047126843112031476,
      0.057421520645386304,
      0.12231081144464462,
      0,
      0.009795607283743856,
      0.17457733943842094,
      0,
      0.22650039905672767,
      0,
      0,
      0,
      0.08085339763542682,
      0.2449331452165021,
      0.10686844422700793,
      0.03611917795988025,
      0.08540172108787615,
      0.07419586394416339,
      0,
      0,
      0,
      0,
      0,
      0.1413377111649513,
      0.07652170895180091,
      0.007917482267826102,
      0,
      0.057025711679314,
      0,
      0,
      0.04162819074186124,
      0,
      0,
      0.035483352607061876,
      0,
      0,
      0.10242799935058036,
      0,
      0.029990513472395654,
      0,
      0.16745681175099977,
      0,
      0.11684007741469495,
      0,
      0.14633526952174625,
      0.09684732805262913,
      0,
      0,
      0,
      0,
      0.07911610285779898,
      0.03427784745377788,
      0,
      0.17931634484434086,
      0.17494455096786937,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01470874047472995,
      0.0702357069437103,
      0.15217915262843823,
      0,
      0,
      0.10606930330594011,
      0,
      0.18150335587983582,
      0,
      0.0641381817045667,
      0,
      0.0018890153753798769,
      0,
      0.25861756056639346,
      0.06470210893113934,
      0.12273710943230064,
      0,
      0,
      0.18299283885900613,
      0.19178161461621648,
      0,
      0,
      0.15483605746260237,
      0,
      0,
      0,
      0,
      0,
      0.05897766570201422,
      0.21046561451703222,
      0,
      0.02018768410555182,
      0.10844537022704108,
      0,
      0.1922560008286907,
      0.0750518228230079,
      0.11956186982827696,
      0,
      0.07899221297380625,
      0,
      0,
      0,
      0.0483915654140072,
      0.16300831653420586,
      0.13767132816642444,
      0.04447203896358917,
      0.11053486734167592,
      0.005894729342808037
    ],
    "metadata": {
      "heading": "Learn Go in 16 Weeks: From No Programming Experience to Junior Go Developer",
      "text": "Welcome to *Learn Go in 16 Weeks*! This textbook is designed to take students with no prior programming experience through fundamental programming concepts and then guide them in learning Go—from writing their very first program to building full-scale projects as a junior developer. The first 4 weeks cover general programming basics, and the following 12 weeks dive deep into Go programming. ---"
    }
  },
  {
    "embedding": [
      0.05144182038733229,
      0,
      0,
      0.07256132523363716,
      0,
      0.11089786514001652,
      0.31072084582461795,
      0.034584695073967824,
      0.25828774232409774,
      0,
      0,
      0.027231843746611528,
      0.02080601424554329,
      0.027722656925889308,
      0.030047754363078057,
      0,
      0,
      0.056590408081639614,
      0,
      0.029408905463745243,
      0.05692192352120777,
      0,
      0.1283322149041283,
      0.007022264475321726,
      0,
      0.10145728426630798,
      0,
      0.18651937315301234,
      0,
      0,
      0,
      0.03336418178682643,
      0.27234172499510806,
      0.14389533638235982,
      0.04644010259528089,
      0.052732278653305736,
      0.19708243810227868,
      0.004331602878396994,
      0,
      0,
      0,
      0,
      0.121987677676182,
      0.01773705924315376,
      0.10314372753067665,
      0,
      0.02093612465802761,
      0,
      0.00013575540575645184,
      0.09966791923717733,
      0,
      0,
      0.04969198595661034,
      0,
      0,
      0.13610823566958807,
      0,
      0.12522190652998702,
      0,
      0.1862578336558784,
      0,
      0.045207502188124506,
      0,
      0.17567998705404972,
      0.12232800813700885,
      0.009315052438698502,
      0,
      0,
      0.0697578413645707,
      0.1100059907953058,
      0,
      0,
      0.1718962305564676,
      0.06763304526340523,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005668609416043703,
      0.03371134217384281,
      0.14098280867117685,
      0,
      0,
      0.19640160283196548,
      0,
      0.18053113536276294,
      0,
      0.06981194211568004,
      0,
      0,
      0,
      0.18463014061380775,
      0.06521986059466552,
      0.05681444640421177,
      0,
      0,
      0.17312152458096494,
      0.18877469276542358,
      0.041956689961314096,
      0,
      0.12035625187790065,
      0,
      0.02732873882018552,
      0,
      0,
      0.045114247949365784,
      0.02738714536385869,
      0.2168579769941622,
      0,
      0,
      0.18305296335456211,
      0.027666978525207855,
      0.11317116885267481,
      0.03205531503816659,
      0.15232210108378338,
      0,
      0.08779184670439016,
      0,
      0,
      0,
      0.04609989671207686,
      0.12069488554198617,
      0.14078092451902924,
      0.08493796037085805,
      0.05228472122911522,
      0.025034430386887515
    ],
    "metadata": {
      "heading": "||| Table of Contents",
      "text": "- [Week 1: Introduction to Computers and Programming Concepts](#week-1-introduction-to-computers-and-programming-concepts)   - [Day 1: What is a Computer Program?](#day-1-what-is-a-computer-program)   - [Day 2: Overview of Programming Languages and Tools](#day-2-overview-of-programming-languages-and-tools)   - [Day 3: The Development Process & Pseudocode](#day-3-the-development-process--pseudocode)   - [Day 4: Introduction to Variables and Data Types](#day-4-introduction-to-variables-and-data-types)   - [Day 5: Review and Exercises](#day-5-review-and-exercises) - [Week 2: Basic Programming Constructs](#week-2-basic-programming-constructs)   - [Day 1: Understanding Variables and Operators](#day-1-understanding-variables-and-operators)   - [Day 2: Control Flow with Conditionals](#day-2-control-flow-with-conditionals)   - [Day 3: Loops and Iteration Concepts](#day-3-loops-and-iteration-concepts)   - [Day 4: Basic Input/Output Concepts](#day-4-basic-inputoutput-concepts)   - [Day 5: Mini Project & Review](#day-5-mini-project--review) - [Week 3: Functions and Modularity](#week-3-functions-and-modularity)   - [Day 1: What Are Functions and Why Use Them?](#day-1-what-are-functions-and-why-use-them)   - [Day 2: Defining and Calling Functions](#day-2-defining-and-calling-functions)   - [Day 3: Function Parameters and Return Values](#day-3-function-parameters-and-return-values)   - [Day 4: Introduction to Debugging and Error Checking](#day-4-introduction-to-debugging-and-error-checking)   - [Day 5: Review and a Simple Functions Project](#day-5-review-and-a-simple-functions-project) - [Week 4: Data Structures and Problem Solving](#week-4-data-structures-and-problem-solving)   - [Day 1: Arrays and Lists – Concepts and Uses](#day-1-arrays-and-lists--concepts-and-uses)   - [Day 2: Working with Strings](#day-2-working-with-strings)   - [Day 3: Introduction to Key-Value Stores (Maps/Dictionaries)](#day-3-introduction-to-key-value-stores-mapsdictionaries)   - [Day 4: Basic Algorithms – Searching and Sorting](#day-4-basic-algorithms--searching-and-sorting)   - [Day 5: Mini Project and Review](#day-5-mini-project-and-review) - [Week 5: Introduction to Go and Setup](#week-5-introduction-to-go-and-setup)   - [Day 1: Introduction to Go](#day-1-introduction-to-go)   - [Day 2: Installation and Setup](#day-2-installation-and-setup)   - [Day 3: Your First Go Program](#day-3-your-first-go-program)   - [Day 4: Basic Syntax and Code Structure](#day-4-basic-syntax-and-code-structure)   - [Day 5: Exercises and Review](#day-5-exercises-and-review) - [Week 6: Go Basics and Syntax](#week-6-go-basics-and-syntax)   - [Day 1: Variables and Constants](#day-1-variables-and-constants)   - [Day 2: Data Types](#day-2-data-types)   - [Day 3: Basic Operators](#day-3-basic-operators)   - [Day 4: Basic Input/Output](#day-4-basic-inputoutput)   - [Day 5: Mini Project & Review](#day-5-mini-project--review) - [Week 7: Control Structures and Basic Data Types](#week-7-control-structures-and-basic-data-types)   - [Day 1: If-Else Statements](#day-1-if-else-statements)   - [Day 2: Switch Statements](#day-2-switch-statements)   - [Day 3: For Loops (Part 1)](#day-3-for-loops-part-1)   - [Day 4: For Loops (Part 2) and Ranges](#day-4-for-loops-part-2-and-ranges)   - [Day 5: Arrays and Strings](#day-5-arrays-and-strings) - [Week 8: Functions, Error Handling, and Packages](#week-8-functions-error-handling-and-packages)   - [Day 1: Functions Basics](#day-1-functions-basics)   - [Day 2: Advanced Functions](#day-2-advanced-functions)   - [Day 3: Error Handling](#day-3-error-handling)   - [Day 4: Using Standard Library Packages](#day-4-using-standard-library-packages)   - [Day 5: Building and Organizing Code](#day-5-building-and-organizing-code) - [Week 9: Arrays, Slices, and Maps](#week-9-arrays-slices-and-maps)   - [Day 1: Arrays](#day-1-arrays)   - [Day 2: Slices](#day-2-slices)   - [Day 3: Slice Operations](#day-3-slice-operations)   - [Day 4: Maps](#day-4-maps)   - [Day 5: Review and Mini Project](#day-5-review-and-mini-project) - [Week 10: Pointers, Memory, and Interfaces](#week-10-pointers-memory-and-interfaces)   - [Day 1: Pointers Basics](#day-1-pointers-basics)   - [Day 2: Pointers in Functions](#day-2-pointers-in-functions)   - [Day 3: Introduction to Memory Management](#day-3-introduction-to-memory-management)   - [Day 4: Interfaces Basics](#day-4-interfaces-basics)   - [Day 5: Interfaces in Depth](#day-5-interfaces-in-depth) - [Week 11: Structs and Methods](#week-11-structs-and-methods)   - [Day 1: Introduction to Structs](#day-1-introduction-to-structs)   - [Day 2: Methods on Structs](#day-2-methods-on-structs)   - [Day 3: Struct Composition](#day-3-struct-composition)   - [Day 4: Constructors and Initialization](#day-4-constructors-and-initialization)   - [Day 5: Review and Mini Project](#day-5-review-and-mini-project) - [Week 12: Concurrency in Go](#week-12-concurrency-in-go)   - [Day 1: Introduction to Concurrency](#day-1-introduction-to-concurrency)   - [Day 2: Goroutines in Depth](#day-2-goroutines-in-depth)   - [Day 3: Channels Basics](#day-3-channels-basics)   - [Day 4: Select Statement](#day-4-select-statement)   - [Day 5: Concurrency Patterns and Review](#day-5-concurrency-patterns-and-review) - [Week 13: Working with Files, Networking, and the Web](#week-13-working-with-files-networking-and-the-web)   - [Day 1: File I/O Basics](#day-1-file-io-basics)   - [Day 2: More on File I/O](#day-2-more-on-file-io)   - [Day 3: Introduction to HTTP Servers](#day-3-introduction-to-http-servers)   - [Day 4: HTTP Clients](#day-4-http-clients)   - [Day 5: JSON Handling](#day-5-json-handling) - [Week 14: Testing, Debugging, and Best Practices](#week-14-testing-debugging-and-best-practices)   - [Day 1: Introduction to Testing](#day-1-introduction-to-testing)   - [Day 2: Writing More Tests](#day-2-writing-more-tests)   - [Day 3: Benchmarking](#day-3-benchmarking)   - [Day 4: Debugging Techniques](#day-4-debugging-techniques)   - [Day 5: Best Practices and Code Reviews](#day-5-best-practices-and-code-reviews) - [Week 15: Building CLI and Web Applications](#week-15-building-cli-and-web-applications)   - [Day 1: Introduction to CLI Applications](#day-1-introduction-to-cli-applications)   - [Day 2: Advanced CLI Applications](#day-2-advanced-cli-applications)   - [Day 3: Introduction to Web Applications](#day-3-introduction-to-web-applications)   - [Day 4: Web Frameworks Overview](#day-4-web-frameworks-overview)   - [Day 5: Deployment and Project Structure](#day-5-deployment-and-project-structure) - [Week 16: Final Project and Career Development](#week-16-final-project-and-career-development)   - [Day 1: Final Project Kick-off](#day-1-final-project-kick-off)   - [Day 2: Building the Core Functionality](#day-2-building-the-core-functionality)   - [Day 3: Expanding the Project](#day-3-expanding-the-project)   - [Day 4: Testing and Debugging the Final Project](#day-4-testing-and-debugging-the-final-project)   - [Day 5: Final Review, Code Cleanup, and Career Prep](#day-5-final-review-code-cleanup-and-career-prep) ---"
    }
  },
  {
    "embedding": [
      0.12863452027976296,
      0,
      0,
      0,
      0,
      0.14765313037377048,
      0.28950925119499143,
      0,
      0.23864942903794584,
      0,
      0.11894669322665445,
      0.019680886541564486,
      0.03725868902611462,
      0,
      0.027916857528409108,
      0,
      0,
      0.05969870003238855,
      0.06285787472085047,
      0.08785025136779302,
      0.04782401196311929,
      0.02210183731328685,
      0.14256813798696685,
      0,
      0.09515260753514085,
      0.1408668622799483,
      0,
      0.15868830956224608,
      0.026277755604380525,
      0,
      0,
      0.0142917086519194,
      0.22985114727360176,
      0.0962608272956519,
      0,
      0.09780902339684704,
      0.09914997476126385,
      0,
      0,
      0,
      0,
      0,
      0.08060464846441025,
      0.030383693030663104,
      0.0010848789422095674,
      0,
      0,
      0,
      0.012452425066946583,
      0.07410009363573948,
      0.024664224525979897,
      0,
      0.1050380097548708,
      0,
      0,
      0.11333077255614729,
      0,
      0.06913992721247159,
      0,
      0.128469449648929,
      0,
      0.0669755064611165,
      0,
      0.15090876949183088,
      0.10441981166282106,
      0.029292812695013583,
      0,
      0,
      0,
      0.03385404328304674,
      0,
      0,
      0.17991699261769667,
      0.18921984178843526,
      0,
      0,
      0,
      0,
      0,
      0.006742286937750874,
      0.03898960885736825,
      0.02586059870788089,
      0.25320526199812904,
      0,
      0,
      0.20070602783755104,
      0,
      0.06909406836146205,
      0,
      0.11336023968247654,
      0,
      0,
      0,
      0.1141053297511847,
      0.07538277810691876,
      0.10632456461549278,
      0,
      0,
      0.13284755516080538,
      0.20472097075683998,
      0,
      0,
      0.13442673213449569,
      0,
      0.02338423366198471,
      0,
      0,
      0.055204938027014136,
      0.06159231134393257,
      0.25281645784212675,
      0,
      0,
      0.1250076290059026,
      0,
      0.19571570286154924,
      0,
      0.16204640292403033,
      0,
      0.06130156273346841,
      0,
      0,
      0,
      0.008337585588587585,
      0.1382871651188921,
      0.1320762535072691,
      0.1582740324313689,
      0.04917345514965634,
      0.10462988393500046
    ],
    "metadata": {
      "heading": "Day 1: What is a Computer Program?",
      "text": "**Objectives:** - Define what a computer program is. - Understand the evolution of programming. **Topics:** - History of computing. - Basic concepts behind instructions and algorithms. **Exercises:** - Write a short paragraph on what you think a computer program does. ---"
    }
  },
  {
    "embedding": [
      0.07348462602878948,
      0,
      0,
      0,
      0.10523523958197195,
      0.0467947450357645,
      0.266213348313711,
      0.011403265438044471,
      0.22123326903198404,
      0,
      0.059994043314841185,
      0.017660754071671243,
      0.018724630415120624,
      0,
      0,
      0,
      0,
      0.12339831281564911,
      0,
      0.04015047614960201,
      0.14866124390111052,
      0.03526424176310548,
      0.11884848849624473,
      0,
      0.06585748282832936,
      0.054807823730772476,
      0,
      0.20635583647564865,
      0.056318308590471156,
      0,
      0,
      0.03858648865789716,
      0.2719104331732985,
      0.05708696900269394,
      0,
      0.10137819236242608,
      0.07019259015734489,
      0,
      0,
      0,
      0,
      0,
      0.0582630568464412,
      0.07587148365210321,
      0.05634932294988816,
      0,
      0.003640857353810207,
      0,
      0,
      0.024042924169477422,
      0.010019360816081518,
      0,
      0.03293557235544565,
      0,
      0,
      0.04947444530525436,
      0,
      0.11523070636401095,
      0,
      0.046587080422927994,
      0,
      0.09055629091730176,
      0,
      0.09407104851277781,
      0.12081308349082719,
      0,
      0,
      0,
      0,
      0.11562791015594391,
      0,
      0,
      0.17058717466990628,
      0.08665411888030945,
      0,
      0,
      0,
      0,
      0,
      0.04931463332979241,
      0.07881172024167382,
      0.08135597438226842,
      0.25907918948973463,
      0,
      0,
      0.07503309836609438,
      0,
      0.11285123267807096,
      0,
      0.06455039396611247,
      0,
      0,
      0,
      0.23029339545243716,
      0.006317241146805045,
      0.11663077874565222,
      0,
      0,
      0.18788215994321408,
      0.271950226262706,
      0.058825237346618715,
      0,
      0.13269079922701787,
      0.025880812019510136,
      0,
      0.02508035698686275,
      0,
      0.03995723389680483,
      0.013315969997740575,
      0.24771843932641488,
      0,
      0,
      0.21563005525348325,
      0,
      0.1653395518321894,
      0,
      0.21847824267810728,
      0,
      0.04570490251187748,
      0,
      0,
      0,
      0,
      0.183895387676001,
      0.09006346176738884,
      0.08670023627244143,
      0.05253446725001373,
      0
    ],
    "metadata": {
      "heading": "Day 2: Overview of Programming Languages and Tools",
      "text": "**Objectives:** - Learn the difference between programming languages. - Understand the roles of compilers and interpreters. **Topics:** - Examples of popular programming languages. - Introduction to development tools and environments. **Exercises:** - Research one programming language other than Go and list its strengths. ---"
    }
  },
  {
    "embedding": [
      0.12240897255088506,
      0,
      0,
      0,
      0.06476370060937807,
      0.05113840774246186,
      0.30065325334859055,
      0.02076594495759063,
      0.2471694791137871,
      0,
      0.07722351412584132,
      0.013079178691061672,
      0.04439818490661188,
      0.008862641895359763,
      0,
      0,
      0,
      0.16141043009154918,
      0.06430476280194451,
      0.058641848043130336,
      0.10649680042516238,
      0,
      0.11908830815807572,
      0,
      0.013953676603781844,
      0.16834869973341088,
      0,
      0.14917756833927018,
      0,
      0,
      0,
      0.06110032164288567,
      0.24715755943563772,
      0.14342309571056802,
      0,
      0.14646531016780537,
      0.17500748856053622,
      0.001592208520932044,
      0,
      0,
      0,
      0,
      0.03704702258807462,
      0.04055039271198549,
      0.04822665033948355,
      0.016210963042793118,
      0.010660249605665646,
      0,
      0,
      0.03360299112865866,
      0,
      0,
      0.013077626652887529,
      0,
      0,
      0.09830626068220341,
      0,
      0.07264393134940297,
      0,
      0.11928537194182966,
      0,
      0.054324530735912896,
      0,
      0.14799163410496172,
      0.07786026872984836,
      0.050158788597369774,
      0,
      0,
      0,
      0.12869835354066206,
      0,
      0,
      0.18019581928522774,
      0.07912977780434205,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06536039354444473,
      0.10052400076186273,
      0.20644339145748283,
      0,
      0,
      0.13959796956737808,
      0,
      0.18457479808929247,
      0,
      0.02921984359353915,
      0,
      0,
      0,
      0.16388459253784554,
      0.012873939192708057,
      0.1093905660392537,
      0,
      0,
      0.16078933227536113,
      0.17802244521739646,
      0,
      0,
      0.19453619183957757,
      0,
      0.008255368446579424,
      0,
      0,
      0.13182539134136853,
      0.07515766848288573,
      0.1893684222909404,
      0,
      0,
      0.1719829554292608,
      0,
      0.15788855383489056,
      0,
      0.17819831330390523,
      0,
      0.011939576781267336,
      0,
      0,
      0,
      0.029362416556800504,
      0.15256845960638496,
      0.13588733939960498,
      0.08196366890213126,
      0.07287010583860258,
      0
    ],
    "metadata": {
      "heading": "Day 3: The Development Process & Pseudocode",
      "text": "**Objectives:** - Understand the stages of software development. - Learn to write pseudocode to plan algorithms. **Topics:** - Requirements, design, coding, testing, and maintenance. - Practice writing pseudocode for simple tasks. **Exercises:** - Write pseudocode for a program that calculates the sum of two numbers. ---"
    }
  },
  {
    "embedding": [
      0.07078024095153518,
      0,
      0,
      0.04651163446747653,
      0,
      0.04770276349085725,
      0.39747130694308985,
      0.027903348005666778,
      0.2586430632738764,
      0,
      0.003699071873028971,
      0.03526377362134891,
      0.04853049014289633,
      0,
      0.019416030588167234,
      0,
      0,
      0.1105356615146314,
      0.033669866702979834,
      0.06041159889747226,
      0,
      0,
      0.16422770022224678,
      0,
      0.0651987647433469,
      0.15930277573724502,
      0,
      0.14573922817922808,
      0.003108626116742193,
      0,
      0,
      0.029821167201785934,
      0.2534045096731666,
      0.09705810470805984,
      0,
      0.11422355442550386,
      0.1109641639348735,
      0,
      0,
      0,
      0,
      0,
      0.08411247731609384,
      0.04157134337176972,
      0.060780787299320495,
      0,
      0.025259630322162222,
      0,
      0.002054503545932353,
      0.07461317628786028,
      0.019922140820398705,
      0,
      0.022948427440192876,
      0,
      0,
      0.1052251957805314,
      0,
      0.021544669427252503,
      0,
      0.09762687789592576,
      0,
      0.05716234469461552,
      0,
      0.1717752702201023,
      0.0365786708877352,
      0,
      0,
      0,
      0,
      0.06977925897533997,
      0,
      0,
      0.17902482347016885,
      0.18159216342573348,
      0,
      0,
      0,
      0,
      0,
      0,
      0.027416699167945164,
      0.1101568315579278,
      0.19911321963106332,
      0,
      0,
      0.13896592057108303,
      0,
      0.15539291693654633,
      0.009498943672677703,
      0.00699502028039726,
      0,
      0,
      0,
      0.15064317081152967,
      0.03478048727939533,
      0.10521559689228864,
      0,
      0,
      0.15253541827475403,
      0.1803400774616998,
      0,
      0,
      0.24589674885794546,
      0.003770332167858782,
      0,
      0.0033056396991024066,
      0,
      0.07175094970847268,
      0.10326365464972195,
      0.22361790751710503,
      0,
      0,
      0.08216616631736869,
      0,
      0.17091738925352637,
      0.009751095806401815,
      0.1624241138899056,
      0,
      0.06623532649129459,
      0,
      0,
      0,
      0.017626811501439157,
      0.09930573143655953,
      0.14573107846037667,
      0.07708549792174987,
      0.02802577740685124,
      0.05744738678796112
    ],
    "metadata": {
      "heading": "Day 4: Introduction to Variables and Data Types",
      "text": "**Objectives:** - Learn what variables and data types are. - Understand how data is stored and manipulated. **Code Example (in Go for consistency):** ```go package main import \"fmt\" func main() {     var number int = 10     var message string = \"Hello, World!\"     fmt.Println(number, message) } ``` **Exercises:** - List three different data types and give an example of each. ---"
    }
  },
  {
    "embedding": [
      0.11896882304646769,
      0,
      0,
      0,
      0.023061166213920115,
      0.07950377227305597,
      0.35380974808877175,
      0.0745087660267255,
      0.2815838883574039,
      0,
      0.02681398906853154,
      0.03590796441817242,
      0.05682655536778779,
      0.023666781750782833,
      0,
      0,
      0,
      0.10208123364938988,
      0,
      0.03766737530475436,
      0.04471395547761555,
      0.0429085181088809,
      0.12431074039687764,
      0.010594340233796046,
      0.06318796577167456,
      0.1746301753869823,
      0,
      0.1320694578473737,
      0.011887442279145254,
      0,
      0,
      0.03994637446637702,
      0.22456353105708637,
      0.07796187653253157,
      0,
      0.13480976390942043,
      0.1547007235837526,
      0.04593133529530789,
      0,
      0,
      0,
      0,
      0.0798990535655492,
      0.07624511208229577,
      0.08061946342200631,
      0,
      0.050391405999867744,
      0,
      0.031363365796504936,
      0.025864527590147523,
      0,
      0,
      0.020099073595558983,
      0,
      0,
      0.12828003548745162,
      0,
      0.038934594120612245,
      0,
      0.05632381495796497,
      0,
      0.01266066645992316,
      0,
      0.12920624041319204,
      0.06215443184035646,
      0.06455677024965342,
      0,
      0,
      0,
      0.1279864320362812,
      0,
      0,
      0.19904889297601275,
      0.13680429920131223,
      0,
      0,
      0,
      0,
      0,
      0,
      0.058541010947820916,
      0.10840080690264843,
      0.1704561443462032,
      0,
      0,
      0.15184353546385143,
      0,
      0.16854146536818082,
      0,
      0.04331098397273286,
      0,
      0,
      0,
      0.15154943304436924,
      0.07587860632997244,
      0.13488238222583016,
      0,
      0,
      0.13134427161162185,
      0.1279899897147419,
      0,
      0,
      0.18290247906572324,
      0,
      0.06511029425445572,
      0.03854827006823718,
      0,
      0.0902392514698973,
      0.020951436366326456,
      0.21608094286529952,
      0,
      0,
      0.18021463390146966,
      0.03202983029866639,
      0.18856669486663682,
      0,
      0.20000381020791932,
      0,
      0.029918095253001726,
      0,
      0,
      0,
      0.019817687272270887,
      0.0970723604786211,
      0.15328053768530686,
      0.08766701349719559,
      0.09986074776674812,
      0
    ],
    "metadata": {
      "heading": "Day 5: Review and Exercises",
      "text": "**Objectives:** - Reinforce the concepts learned during the week. **Exercises:** - Create a simple pseudocode plan for a calculator. - Write a few lines of Go code to declare variables of different types. ---"
    }
  },
  {
    "embedding": [
      0.1487530050007604,
      0,
      0,
      0,
      0.03076910052755402,
      0.11433129423484877,
      0.28221910985907916,
      0,
      0.24437530383231298,
      0,
      0.10857652795784506,
      0.07269444447915924,
      0,
      0,
      0.03431726792961618,
      0,
      0,
      0.08635026687652021,
      0.09269630389572689,
      0.1235842056856723,
      0.028896312872047775,
      0.027457998551153343,
      0.12098833270454892,
      0,
      0.02521597306727326,
      0.14339069190164394,
      0,
      0.19217370042895793,
      0,
      0,
      0,
      0.069569838713756,
      0.2846133063787506,
      0.10171668216585258,
      0,
      0.10367296478387394,
      0.11663049968476688,
      0.031188952021916155,
      0,
      0,
      0,
      0,
      0.08425349287614851,
      0.03075146638064012,
      0.05927059276751605,
      0,
      0,
      0,
      0,
      0.05115667516896123,
      0.009170888542610056,
      0,
      0.06354890706528885,
      0,
      0,
      0.09959197897435249,
      0,
      0.07912926233753217,
      0,
      0.1415897391794822,
      0,
      0.06957883747450044,
      0,
      0.166368378645307,
      0.09410493915664238,
      0.06616190184590656,
      0,
      0,
      0,
      0.04799724585569709,
      0,
      0,
      0.16906348117058548,
      0.17011935219368804,
      0,
      0,
      0,
      0,
      0,
      0.0013867583372529906,
      0.053183569005413975,
      0.025928584047693465,
      0.21081395186716026,
      0,
      0,
      0.14217140078612264,
      0,
      0.15230044989755315,
      0,
      0.07947071118447369,
      0,
      0,
      0,
      0.14373843659679764,
      0.0586529154305838,
      0.09326790383811032,
      0,
      0,
      0.11464947189778874,
      0.17560484568191775,
      0,
      0,
      0.14416249901292974,
      0.008906701425019323,
      0,
      0,
      0,
      0.07489161330287689,
      0.10263255697535427,
      0.22372162570786694,
      0,
      0,
      0.1685473233210703,
      0,
      0.17128763355140816,
      0,
      0.22109686972165962,
      0,
      0.05846323569114239,
      0,
      0,
      0,
      0.04859890915607732,
      0.13936192218486945,
      0.07107612431406142,
      0.13997999384602255,
      0.025983520260569937,
      0.016750598490402877
    ],
    "metadata": {
      "heading": "Day 1: Understanding Variables and Operators",
      "text": "**Objectives:** - Learn how variables store data. - Understand arithmetic and assignment operators. **Code Example:** ```go package main import \"fmt\" func main() {     x := 5     y := 3     sum := x + y     fmt.Println(\"Sum:\", sum) } ``` **Exercises:** - Write a program that subtracts two numbers and prints the result. ---"
    }
  },
  {
    "embedding": [
      0.09701421633913321,
      0,
      0,
      0.03615821147651392,
      0,
      0.09730649161528884,
      0.33518557621809913,
      0.020001360341111652,
      0.25139185693004873,
      0,
      0.039312798451773705,
      0,
      0.0043148878914818865,
      0.011494737662211173,
      0.01794448494235546,
      0,
      0,
      0.1287263036204016,
      0.026516632568232418,
      0.0359333189354674,
      0.10007629272579575,
      0,
      0.11606895130388081,
      0.0009994121054030273,
      0.08357622388256047,
      0.1392482016232422,
      0,
      0.18346235081524156,
      0.007624790017547928,
      0,
      0,
      0.045183335294273604,
      0.2642755272000989,
      0.1634024349210496,
      0,
      0.14160652041383534,
      0.17530792648684712,
      0.012324390375185474,
      0,
      0,
      0,
      0,
      0.09860939336857168,
      0.024970419447428758,
      0.07657206282737913,
      0,
      0.03395974953425971,
      0,
      0,
      0.08283783329493014,
      0,
      0,
      0,
      0,
      0,
      0.11541782959913743,
      0,
      0.09234724101280761,
      0,
      0.09886060416831671,
      0,
      0.07566287602557308,
      0,
      0.12847279552954888,
      0.048504477035106706,
      0.06901083666106556,
      0,
      0,
      0.029390685417986454,
      0.12715605246819434,
      0,
      0,
      0.16633503499109917,
      0.2238932931765643,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03248898503631384,
      0.05464285368744196,
      0.21085727580409225,
      0,
      0,
      0.12388521684940407,
      0,
      0.20966351312964526,
      0.009660510988329556,
      0.033373967185868124,
      0,
      0,
      0,
      0.19943566699954804,
      0.04941774149297748,
      0.1104640914706183,
      0,
      0,
      0.12313185527457986,
      0.1459064786283412,
      0,
      0,
      0.18432267306212738,
      0,
      0,
      0.04041359831610719,
      0,
      0.0821208085998903,
      0.01975807882992593,
      0.19901201033444305,
      0,
      0,
      0.09709705605012987,
      0,
      0.14612247019495206,
      0,
      0.11333208851977492,
      0,
      0.056998982860841096,
      0,
      0,
      0,
      0.05925869218707354,
      0.11063836044497206,
      0.10500929159268083,
      0.09733958280359616,
      0.03933592026191012,
      0.05702755320976644
    ],
    "metadata": {
      "heading": "Day 2: Control Flow with Conditionals",
      "text": "**Objectives:** - Understand if-else constructs. - Learn to make decisions based on conditions. **Code Example (pseudocode/Go blend):** ```go package main import \"fmt\" func main() {     score := 85     if score >= 60 {         fmt.Println(\"Pass\")     } else {         fmt.Println(\"Fail\")     } } ``` **Exercises:** - Write pseudocode for a program that outputs \"Good\" if a number is positive, \"Bad\" if negative, and \"Zero\" if zero. ---"
    }
  },
  {
    "embedding": [
      0.09768951251106488,
      0,
      0,
      0,
      0,
      0.14394329479273174,
      0.3299450493374086,
      0.01737623851401521,
      0.2417130026002086,
      0,
      0.0032218521869969274,
      0,
      0.004514571195649009,
      0,
      0.057411054138636924,
      0,
      0,
      0.14948362827100087,
      0.1060542960075488,
      0.09439077953558264,
      0.09197064173829901,
      0,
      0.11583706472289752,
      0.007909596826472624,
      0.013964497646945432,
      0.10754315913388811,
      0,
      0.21518391823242156,
      0,
      0,
      0,
      0.05122601227303676,
      0.2641540147169763,
      0.031223491671959647,
      0,
      0.07150322189501336,
      0.10599030185045585,
      0,
      0,
      0,
      0,
      0,
      0.04727625720452985,
      0.039910335057065184,
      0.025653555315936525,
      0.047441684125186394,
      0.07184625455930332,
      0,
      0.005026670399035155,
      0.11292254200621264,
      0.01559120735886316,
      0,
      0.023890838656341604,
      0,
      0,
      0.189844006704315,
      0,
      0.062497417904554486,
      0,
      0.07025862026038558,
      0,
      0.1549599872911138,
      0,
      0.09784964820551426,
      0.0915741948975292,
      0.020116953837676053,
      0,
      0,
      0.030652460875331602,
      0.03885141812490857,
      0.012872151231678043,
      0,
      0.22198531234957014,
      0.1570990978879794,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0677618934454677,
      0.11834306429340428,
      0.18716758338465198,
      0,
      0,
      0.18191008472051323,
      0,
      0.14972530320880115,
      0,
      0.03432394787071345,
      0,
      0,
      0,
      0.15906619963459,
      0.06494628274521652,
      0.08189407200731974,
      0,
      0,
      0.17100723722767783,
      0.16685612300111388,
      0,
      0,
      0.10621583948234298,
      0.015751957360233267,
      0,
      0,
      0,
      0.060436281364729165,
      0.01223010676004631,
      0.20155739672556142,
      0,
      0,
      0.11039884943151869,
      0,
      0.13409048151412004,
      0.0407575262921772,
      0.15001965922291396,
      0,
      0.06577098922806701,
      0,
      0,
      0,
      0.07385480224964026,
      0.19435690800009045,
      0.1462356159940457,
      0.10674265613968041,
      0.05176120545705171,
      0.01831330041342859
    ],
    "metadata": {
      "heading": "Day 3: Loops and Iteration Concepts",
      "text": "**Objectives:** - Understand why loops are used. - Learn the concept of iterating over a set of values. **Code Example:** ```go package main import \"fmt\" func main() {     for i := 1; i <= 5; i++ {         fmt.Println(\"Iteration\", i)     } } ``` **Exercises:** - Write a loop that prints the numbers 1 to 10. ---"
    }
  },
  {
    "embedding": [
      0.16510955148696027,
      0,
      0,
      0,
      0,
      0.1232354913947365,
      0.3183461113423587,
      0.07320761384547007,
      0.20550641731367672,
      0,
      0.053865977493015166,
      0,
      0,
      0.017743093797457837,
      0,
      0,
      0,
      0.11346370344912078,
      0.08827782599826917,
      0.11577497473204593,
      0.13551793885004534,
      0.06658621124652415,
      0.14493495172561624,
      0.022956613174049838,
      0.036213300020467,
      0.05764062771253777,
      0,
      0.18088300146387679,
      0.046937434110452356,
      0,
      0,
      0.022546985763773838,
      0.2791748372273699,
      0.07908601784679309,
      0.0006529674551052891,
      0.09135544379632679,
      0.15199172924068202,
      0,
      0,
      0,
      0,
      0,
      0.10040189021302472,
      0,
      0.04844912111301686,
      0,
      0.03577648722869357,
      0,
      0,
      0.021038425009061883,
      0,
      0,
      0.00016900517112410053,
      0,
      0,
      0.17848015286727614,
      0,
      0.1049073113339791,
      0,
      0.062468387978347084,
      0,
      0.12033145114751795,
      0,
      0.08897856704049506,
      0.1155042479574933,
      0.07136886973954944,
      0,
      0,
      0.015083081503150794,
      0.034837383308762966,
      0,
      0,
      0.19053788236807928,
      0.13986543915917551,
      0,
      0,
      0,
      0,
      0,
      0,
      0.035504152182439325,
      0.05332004363144928,
      0.19901953596999902,
      0,
      0,
      0.13192813937978654,
      0,
      0.15206447288284478,
      0,
      0.06228112065729541,
      0,
      0,
      0,
      0.17991197549882695,
      0.1049332145594309,
      0.1468058079135446,
      0,
      0.02201041187460594,
      0.1291860580856662,
      0.18874875539163155,
      0.002065931515314678,
      0,
      0.19663248720013451,
      0,
      0,
      0,
      0,
      0.020010784836085517,
      0,
      0.1912484888262475,
      0,
      0,
      0.08878668460030878,
      0,
      0.1937631389997422,
      0,
      0.16807778236816656,
      0,
      0.04182354084506243,
      0,
      0,
      0,
      0.08607300579248263,
      0.15096836936717503,
      0.11357418614806969,
      0.10862578434716275,
      0.02042128689078161,
      0
    ],
    "metadata": {
      "heading": "Day 4: Basic Input/Output Concepts",
      "text": "**Objectives:** - Learn the idea of getting input from users and displaying output. **Code Example:** ```go package main import \"fmt\" func main() {     var name string     fmt.Print(\"Enter your name: \")     fmt.Scan(&name)     fmt.Println(\"Hello,\", name) } ``` **Exercises:** - Modify the example to also ask for the user’s age and print both values. ---"
    }
  },
  {
    "embedding": [
      0.13638326261737332,
      0,
      0,
      0,
      0,
      0.10259968064091325,
      0.37275126847083445,
      0,
      0.23870872377342475,
      0,
      0,
      0,
      0.05675981226446793,
      0,
      0.03916889729694825,
      0,
      0,
      0.07296952509130342,
      0.047879758830462554,
      0.07218087085024087,
      0.023680068429918294,
      0.010901242254814179,
      0.11028740505921995,
      0,
      0.05553028564903786,
      0.22522615074578795,
      0,
      0.1202997202149269,
      0,
      0,
      0,
      0.09664536277597814,
      0.23256203118321125,
      0.11135133470096482,
      0,
      0.12710442957505583,
      0.08821577697399212,
      0.03751251560411172,
      0,
      0,
      0,
      0,
      0.07570055544987625,
      0.03935686874215608,
      0.0449381432331222,
      0,
      0.002469153966449371,
      0,
      0,
      0.047627426106049205,
      0,
      0,
      0.01728492140425819,
      0,
      0,
      0.1011077300382572,
      0,
      0.02708723729277762,
      0,
      0.11270767983179487,
      0,
      0,
      0,
      0.13415241132381656,
      0.10472553093993724,
      0.014057595642718884,
      0,
      0,
      0,
      0.0902321123583927,
      0,
      0,
      0.170395075629027,
      0.16038606077622353,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.10926481769305729,
      0.1749287028479423,
      0,
      0,
      0.12295161700501957,
      0,
      0.15026279977578927,
      0,
      0.00915577299839463,
      0,
      0,
      0,
      0.2296470101145502,
      0.019887635755600715,
      0.08193444943082895,
      0,
      0,
      0.17007309078406507,
      0.1065733577638175,
      0,
      0,
      0.13406531037815156,
      0,
      0,
      0.10130786825460329,
      0,
      0.09782980384731739,
      0.01984847485030471,
      0.1774587248647662,
      0,
      0,
      0.1922724359696477,
      0.012878304548754884,
      0.21286862277323726,
      0,
      0.18514498211506383,
      0,
      0.056786502141504755,
      0,
      0,
      0,
      0.06708504122599016,
      0.13099998836677718,
      0.1631007745092404,
      0.1494257688283265,
      0.06175925979527263,
      0.054578531672634684
    ],
    "metadata": {
      "heading": "Day 5: Mini Project & Review",
      "text": "**Objectives:** - Combine concepts from the week in a small project. **Project Example:** - Create a simple calculator that adds two numbers entered by the user. **Exercises:** - Write the complete program and test it. ---"
    }
  },
  {
    "embedding": [
      0.06842521704501467,
      0,
      0,
      0.01480024589946773,
      0,
      0.0645872771885737,
      0.32402400023007283,
      0,
      0.1818477558093114,
      0,
      0.05443152381380444,
      0.029914006629295505,
      0.005754417515583398,
      0,
      0.0024991586440601863,
      0,
      0,
      0.15056602761872204,
      0.07270550674002117,
      0.03236606063515573,
      0.03250677867310367,
      0.006703480152292683,
      0.09701268957114319,
      0.0351122300875825,
      0.004192052746850257,
      0.15276031239125776,
      0,
      0.16158997344161008,
      0.03456388519736484,
      0,
      0,
      0.06810402665494585,
      0.26606383555666946,
      0.21867522283206312,
      0,
      0.1180750797188846,
      0.13791085482429366,
      0.0347226148869782,
      0,
      0,
      0,
      0,
      0.0785898655924985,
      0.004369162410016379,
      0.06165122501249312,
      0,
      0.02729335608211431,
      0,
      0.007295845610016042,
      0.11922430892923422,
      0,
      0,
      0.023417534903255377,
      0,
      0,
      0.061308883124669096,
      0,
      0.11259587369638312,
      0,
      0.04844991301169154,
      0,
      0.04799337557129817,
      0,
      0.17941304325662658,
      0.07124801325419775,
      0.10207054500260042,
      0,
      0,
      0.06293716760741169,
      0.1429433425020035,
      0,
      0,
      0.100049032593325,
      0.16087639288767638,
      0,
      0,
      0,
      0,
      0,
      0.007420129174466942,
      0.1339527535392375,
      0.1003263788534069,
      0.12170650331421864,
      0,
      0,
      0.1512475946915669,
      0,
      0.19964899659827312,
      0,
      0.018958081856015555,
      0,
      0,
      0,
      0.20484891974945935,
      0,
      0.14830355385165553,
      0,
      0,
      0.07610539537509824,
      0.22202852445265805,
      0.031069161957834667,
      0,
      0.17534539312552855,
      0.04752714599558971,
      0,
      0.056612056897706424,
      0,
      0.07676796833792746,
      0.13309494514715836,
      0.21931749456073832,
      0,
      0,
      0.10151969074204638,
      0,
      0.13722559229285375,
      0,
      0.1567739954744836,
      0,
      0.09604738845260555,
      0,
      0,
      0,
      0.05494596258123001,
      0.14797654737522883,
      0.10962207374688655,
      0.06286900232103497,
      0.08600012542059918,
      0.020310375626096028
    ],
    "metadata": {
      "heading": "Day 1: What Are Functions and Why Use Them?",
      "text": "**Objectives:** - Understand the purpose of functions. - Learn about code reusability. **Topics:** - Definition and benefits of functions. - Real-world examples. **Exercises:** - Write down a scenario where breaking code into functions is helpful. ---"
    }
  },
  {
    "embedding": [
      0.12887921376424363,
      0,
      0,
      0,
      0,
      0.12911690568130682,
      0.2987684804177885,
      0,
      0.25288374832553107,
      0.008875076243259476,
      0.012917893038378385,
      0,
      0.03770758905687171,
      0,
      0,
      0,
      0,
      0.09983957262390976,
      0.133213214787435,
      0.0686174093841626,
      0.07963788437915306,
      0.05503276907528914,
      0.12054774181373398,
      0.03302449764932786,
      0.03395613462340861,
      0.13150878580256004,
      0,
      0.18435363362214544,
      0.02835875668420927,
      0,
      0,
      0.01884172027854118,
      0.29011492747544093,
      0.07901993890933434,
      0,
      0.036959008042197636,
      0.12545658520711697,
      0,
      0,
      0.010762940343443776,
      0,
      0,
      0.04435450370362037,
      0.02010497349083247,
      0.05602716148103519,
      0,
      0,
      0,
      0,
      0.09412328899453479,
      0,
      0,
      0.012821549659581384,
      0,
      0,
      0.09543641695601977,
      0,
      0.06871012753299909,
      0,
      0.18219918850398853,
      0,
      0.0110648675052394,
      0,
      0.17595134805001247,
      0.09361566788886341,
      0.011932015249768627,
      0,
      0,
      0.035928862549044045,
      0.0869523012256867,
      0,
      0,
      0.15475706040452844,
      0.11334338451143544,
      0,
      0,
      0,
      0,
      0,
      0.007461609369577314,
      0.04449091995143804,
      0.07749472872527303,
      0.25382030277227013,
      0,
      0,
      0.1615571094390977,
      0,
      0.09856372699056767,
      0,
      0.07952831836507707,
      0,
      0,
      0,
      0.1386588198739595,
      0,
      0.07881558912110895,
      0,
      0,
      0.14254196435977431,
      0.21516782608133267,
      0.011932138692964882,
      0,
      0.20823332374658216,
      0.001449205040998192,
      0,
      0.029215057377109083,
      0,
      0.04130174746990945,
      0.07175978854603884,
      0.21813590727063384,
      0,
      0,
      0.16411105409618643,
      0,
      0.11656158846468101,
      0,
      0.22885606744138937,
      0,
      0.054152282190241555,
      0,
      0,
      0,
      0.0651367025112008,
      0.12549887673650667,
      0.10466545559080649,
      0.10101962961766756,
      0.001473600594436088,
      0.05970500852704078
    ],
    "metadata": {
      "heading": "Day 2: Defining and Calling Functions",
      "text": "**Objectives:** - Learn the syntax for defining functions in Go. - Understand how to call a function. **Code Example:** ```go package main import \"fmt\" func greet() {     fmt.Println(\"Hello!\") } func main() {     greet() } ``` **Exercises:** - Define a function that prints \"Welcome to programming!\" and call it from `main`. ---"
    }
  },
  {
    "embedding": [
      0.08702204069433934,
      0,
      0,
      0.03541533817783833,
      0,
      0.0743328886030571,
      0.3828612147724732,
      0.027599877713931582,
      0.18941213698926698,
      0,
      0,
      0,
      0.06893028527461598,
      0,
      0,
      0,
      0,
      0.1304430794166578,
      0.016637663345483795,
      0.0754685323294382,
      0.058129501374547435,
      0,
      0.2173652021306478,
      0.06868028393003733,
      0.0004739289996791112,
      0.07858569436944089,
      0,
      0.17002515783370672,
      0.008074765150400455,
      0,
      0,
      0.04961487023305191,
      0.23002286585238402,
      0.20080373950485625,
      0,
      0.06115815896669421,
      0.1200272477021629,
      0,
      0,
      0,
      0,
      0,
      0.06265802138515238,
      0.020108181475800343,
      0.10471502858926178,
      0,
      0.010076008899546917,
      0,
      0,
      0.09796375958451291,
      0,
      0,
      0.025923856814779427,
      0,
      0,
      0.11553457520942026,
      0,
      0.1287318231358013,
      0,
      0.09649202869617698,
      0,
      0.09654258699391806,
      0,
      0.06968198434837077,
      0.08109713317161091,
      0.01543870804415615,
      0,
      0,
      0.010693687885817827,
      0.13805619000816094,
      0,
      0,
      0.12131795523650839,
      0.1038162298060682,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01157348089811632,
      0.04480866208182781,
      0.2318676937021516,
      0,
      0,
      0.13756850169316373,
      0,
      0.13834613703572593,
      0,
      0.015715339243416813,
      0,
      0,
      0,
      0.1704218710926005,
      0.014932543513079705,
      0.0804063157122412,
      0,
      0,
      0.21372687507476912,
      0.17234868034588996,
      0.048028693369606176,
      0,
      0.18782924170733037,
      0.004732236526200421,
      0,
      0.026820689134577858,
      0,
      0.09275274011357923,
      0.04881822757325238,
      0.20278950900149761,
      0,
      0,
      0.09789713726097932,
      0.039538841716595136,
      0.17440497722867834,
      0.024407356696170817,
      0.09104813082168273,
      0,
      0.11171235843795566,
      0,
      0,
      0,
      0.018793880313531842,
      0.1929225154875693,
      0.19375655510418485,
      0.062324496018996735,
      0.04580151359449658,
      0
    ],
    "metadata": {
      "heading": "Day 3: Function Parameters and Return Values",
      "text": "**Objectives:** - Understand how to pass values to functions and return results. **Code Example:** ```go package main import \"fmt\" func add(a int, b int) int {     return a + b } func main() {     result := add(3, 4)     fmt.Println(\"Result:\", result) } ``` **Exercises:** - Write a function that multiplies two numbers and returns the product. ---"
    }
  },
  {
    "embedding": [
      0.1829185718889978,
      0,
      0,
      0,
      0,
      0.06099972184357097,
      0.31221012662416203,
      0.01863025897180108,
      0.22014520109380892,
      0,
      0.07140585565707722,
      0,
      0.04055387950510127,
      0,
      0,
      0,
      0,
      0.032296499797025646,
      0.08185120313089979,
      0.17186738365691856,
      0.040989748552127885,
      0.06441239711504174,
      0.15090932323469633,
      0.057453979282109345,
      0.0763779810051434,
      0.1246604145154241,
      0,
      0.21364008509656768,
      0.023845709349683854,
      0,
      0,
      0.002943453930543465,
      0.20786474473370153,
      0.06411897496622904,
      0,
      0.12337699239456859,
      0.09204559642078629,
      0.018990201563111746,
      0,
      0,
      0,
      0,
      0.07018214553768216,
      0.08825477161485919,
      0.006493598697100082,
      0,
      0,
      0,
      0,
      0.03966254262957074,
      0,
      0,
      0.05137917913953431,
      0,
      0,
      0.1325963597379258,
      0,
      0.03938123242741618,
      0,
      0.06776017727860056,
      0,
      0.038005619497765986,
      0,
      0.16707390494399482,
      0.05917362264537207,
      0,
      0,
      0,
      0,
      0.06755327633383683,
      0.002964966098867056,
      0,
      0.1512584401153158,
      0.234066903787292,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01436645184439242,
      0.09496516772210789,
      0.24469010202448685,
      0,
      0,
      0.18159011863439956,
      0,
      0.07558242502046164,
      0.018730102940319217,
      0.06840211082136494,
      0,
      0,
      0,
      0.16873182776712775,
      0.0675566243981265,
      0.0842902898920223,
      0,
      0,
      0.13391867244800354,
      0.17876180703383518,
      0,
      0,
      0.22679899931686323,
      0.03626238407378117,
      0,
      0.00786674477729617,
      0,
      0.07054048293921644,
      0.011151808282915092,
      0.2234239641185756,
      0,
      0,
      0.054559978484768,
      0,
      0.16000978544985614,
      0,
      0.16955608224968377,
      0,
      0,
      0,
      0,
      0,
      0.0281765336580249,
      0.17673987182287518,
      0.1975410780351473,
      0.040574298281313974,
      0.04738303275393653,
      0.05380226783100495
    ],
    "metadata": {
      "heading": "Day 4: Introduction to Debugging and Error Checking",
      "text": "**Objectives:** - Learn simple debugging techniques. - Understand the importance of error checking. **Code Example:** ```go package main import (     \"fmt\"     \"log\" ) func safeDivide(a, b float64) float64 {     if b == 0 {         log.Println(\"Division by zero!\")         return 0     }     return a / b } func main() {     fmt.Println(\"Division result:\", safeDivide(10, 0)) } ``` **Exercises:** - Add error checking to one of your previous functions. ---"
    }
  },
  {
    "embedding": [
      0.1686954266636604,
      0,
      0,
      0,
      0,
      0.08828108071910977,
      0.2772464877913555,
      0.01716471592311222,
      0.28975210087425274,
      0.0014855969603839961,
      0,
      0.016219312904713463,
      0.0671205042222198,
      0,
      0.047409227809205874,
      0,
      0,
      0.12427838005025274,
      0.0342064632261183,
      0.11072850450928963,
      0.09217604478313222,
      0.08698725361110939,
      0.10887607488316313,
      0.010127589141659286,
      0.010182851921039217,
      0.206882004161987,
      0,
      0.13799483434039447,
      0,
      0,
      0,
      0.014813473400389599,
      0.2245721590807339,
      0.09974180526118248,
      0,
      0.06468860985162478,
      0.1887703995011681,
      0,
      0,
      0,
      0,
      0,
      0.1228240314799047,
      0.06709719723071225,
      0.04446335563320056,
      0,
      0,
      0,
      0,
      0.03533506175930563,
      0,
      0,
      0.04390807335788813,
      0,
      0,
      0.1038484574231862,
      0,
      0.11816387393966475,
      0,
      0.11217396728587775,
      0,
      0,
      0.003930680377622186,
      0.1303543568051592,
      0.06076372729420361,
      0.062005361812109326,
      0,
      0,
      0.016184772216245192,
      0.0377193559973115,
      0,
      0,
      0.20927585949632488,
      0.1557281789991171,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.13084504771672004,
      0.18922520206631996,
      0,
      0,
      0.1691492163986419,
      0,
      0.1509760652843743,
      0,
      0.052820850227205604,
      0,
      0.016339476519037215,
      0,
      0.1227983472678688,
      0.08836123470527518,
      0.08616665969441986,
      0,
      0,
      0.09269689116687882,
      0.12427757392893889,
      0,
      0,
      0.17928902278929565,
      0.05178534566476457,
      0.011694327831869555,
      0,
      0,
      0.05827576722239597,
      0.08359440567734977,
      0.23058043664393654,
      0,
      0,
      0.23549386012243692,
      0.039619865184182104,
      0.14356700860117058,
      0,
      0.16492675546975874,
      0,
      0.03029758866789129,
      0,
      0,
      0,
      0.054699157934592846,
      0.09209359052746087,
      0.1798368192640021,
      0.10058373255409792,
      0.007872200075931712,
      0
    ],
    "metadata": {
      "heading": "Day 5: Review and a Simple Functions Project",
      "text": "**Objectives:** - Reinforce function concepts by building a small project. **Project Example:** - Create a program that calculates the area and perimeter of a rectangle using functions. **Exercises:** - Write and test the program. ---"
    }
  },
  {
    "embedding": [
      0.1295117125884156,
      0,
      0,
      0.020740491987253126,
      0,
      0.12480676707881978,
      0.3429265982703866,
      0,
      0.23642617048537135,
      0,
      0.005404954505668238,
      0.012673902013263762,
      0,
      0.011872715761933083,
      0.002318662273006475,
      0,
      0,
      0.08675996677000364,
      0.018443914773515598,
      0.05543234681785307,
      0.11878797924665453,
      0.04697282452874455,
      0.17534840852098188,
      0.04282734503459457,
      0.06791503923250568,
      0.10598428318431982,
      0,
      0.18827539235003568,
      0,
      0,
      0,
      0.017190162622143786,
      0.23176385468611674,
      0.1163328051500132,
      0,
      0.10385870492104664,
      0.14161055731979208,
      0,
      0,
      0,
      0,
      0,
      0.09267927388361927,
      0.011622047146867437,
      0.03861528820272793,
      0,
      0,
      0,
      0,
      0.07075664200735181,
      0,
      0,
      0.04542347912809204,
      0,
      0,
      0.08878178482544309,
      0,
      0.0956667643137035,
      0,
      0.07459369196393206,
      0,
      0.06189080525584888,
      0,
      0.11935261244610965,
      0.07232801310854946,
      0.05433661747410162,
      0,
      0,
      0,
      0.03413793649652261,
      0,
      0,
      0.13992072484386175,
      0.2089282569682104,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.019534918176528474,
      0.1783790278108504,
      0,
      0,
      0.1304559363539744,
      0,
      0.19917219164307728,
      0.001846969542838938,
      0.07297280449706958,
      0,
      0,
      0,
      0.1944144010225786,
      0.09071105228475719,
      0.09342753662050043,
      0,
      0,
      0.11263859502106781,
      0.17489173794173676,
      0,
      0,
      0.1898135204891683,
      0.07857461683902627,
      0.01716657853232281,
      0.05918151124074094,
      0,
      0.06304068217479497,
      0.03059699404941117,
      0.23470134321812303,
      0,
      0,
      0.17013303207117061,
      0.019554141624950228,
      0.19459913517739497,
      0,
      0.1390882378169202,
      0,
      0.15379991746088004,
      0,
      0,
      0,
      0.07658946429131476,
      0.11754813309346199,
      0.11988952960758165,
      0.10189887369969478,
      0.016550239317585865,
      0.013534921965094123
    ],
    "metadata": {
      "heading": "Day 1: Arrays and Lists – Concepts and Uses",
      "text": "**Objectives:** - Learn what arrays (and lists) are. - Understand how data can be stored in sequences. **Code Example:** ```go package main import \"fmt\" func main() {     numbers := [5]int{1, 2, 3, 4, 5}     fmt.Println(\"Array:\", numbers) } ``` **Exercises:** - Declare an array of 5 integers and print each element. ---"
    }
  },
  {
    "embedding": [
      0.11408825575141336,
      0,
      0,
      0.0044576064427506255,
      0,
      0.10409338140589873,
      0.3588731425959459,
      0.02435241376150469,
      0.20192781404916296,
      0,
      0.03149267040458211,
      0,
      0,
      0.03976076873645576,
      0,
      0,
      0,
      0.08384568557333413,
      0.034164543994970036,
      0.15160435082864354,
      0.09119056936496395,
      0.024144883274041882,
      0.12251916731693996,
      0.0046030836249825865,
      0.0465970387120484,
      0.16728499071270736,
      0,
      0.22089881195879318,
      0,
      0,
      0,
      0.041019719811762105,
      0.22039258384642113,
      0.09275700441142372,
      0,
      0.11006942035311032,
      0.10473512918866025,
      0.0094229329185271,
      0,
      0,
      0,
      0.01509061306542687,
      0.027404255323391517,
      0.0360801558110822,
      0,
      0,
      0.04472464958032151,
      0,
      0,
      0,
      0,
      0,
      0.005974705204378073,
      0,
      0,
      0.11334022794731813,
      0,
      0.03958789181845272,
      0,
      0.09048411743463146,
      0,
      0.019045015088251342,
      0,
      0.14307032885677812,
      0.15129856754916296,
      0.0031932897263906215,
      0,
      0,
      0,
      0.1080189368069922,
      0,
      0,
      0.12437444580042434,
      0.1738196588742327,
      0,
      0,
      0,
      0,
      0,
      0,
      0.009081507095084864,
      0.09677733984279463,
      0.17496109794711595,
      0,
      0,
      0.15806249630980526,
      0,
      0.15076366656571208,
      0.0169669063022575,
      0.056655765654643774,
      0,
      0,
      0,
      0.18395041832952788,
      0.06959348779477612,
      0.11242538259826756,
      0,
      0,
      0.16952099224888112,
      0.21656558207472948,
      0,
      0,
      0.21745932025074208,
      0.04708072484137427,
      0.0023141407511209923,
      0.008352974279356934,
      0,
      0.027177074682776237,
      0,
      0.23419732350966374,
      0,
      0,
      0.04443127220019464,
      0.017133266865623924,
      0.1712463294040583,
      0.0367530622887613,
      0.12274331768196427,
      0,
      0,
      0,
      0,
      0,
      0.08359957248619128,
      0.13109520479134856,
      0.22872459468401088,
      0.051180040517745794,
      0.09372854202040186,
      0
    ],
    "metadata": {
      "heading": "Day 2: Working with Strings",
      "text": "**Objectives:** - Understand string manipulation. - Learn basic operations on strings. **Code Example:** ```go package main import \"fmt\" func main() {     text := \"Programming is fun!\"     fmt.Println(\"Text length:\", len(text)) } ``` **Exercises:** - Write a program to iterate over each character in a string and print it. ---"
    }
  },
  {
    "embedding": [
      0.08271933947063181,
      0,
      0,
      0.021402558160816397,
      0.0008321637331822256,
      0.09193742970710976,
      0.32757511116986593,
      0,
      0.23710462919939973,
      0,
      0,
      0.01416740595300485,
      0.008691210756380952,
      0,
      0.04310700182768105,
      0,
      0,
      0.11200291494356958,
      0.04313735899917767,
      0.05818460775848101,
      0.07449997967864527,
      0,
      0.21574732190280435,
      0.026097220546727203,
      0.0743789222061898,
      0.15621172471738462,
      0,
      0.19935075265239713,
      0.004137947135080993,
      0,
      0,
      0.050296352378716096,
      0.24362505771639434,
      0.1536716107240145,
      0,
      0.0721157672710467,
      0.1213020135378806,
      0,
      0,
      0,
      0,
      0,
      0.04827880970523364,
      0.04444163806831213,
      0.028558873545142638,
      0,
      0.0581516953209648,
      0,
      0,
      0.06766159145802902,
      0.03842820353127074,
      0,
      0.03938294890591481,
      0,
      0,
      0.10173697092221104,
      0,
      0.045896116281689985,
      0,
      0.055712040439160136,
      0,
      0.08695594547671241,
      0,
      0.1259710512495501,
      0.05530640243390582,
      0.049960795315770766,
      0,
      0,
      0,
      0.07181661158822365,
      0,
      0,
      0.15709460192075556,
      0.1760515746252853,
      0,
      0,
      0,
      0,
      0,
      0.005287502286061783,
      0.011140581216802064,
      0.03489912540430016,
      0.16738545541541017,
      0,
      0,
      0.115498387577329,
      0,
      0.17836221336724403,
      0.003508932346395113,
      0.08674140860481226,
      0,
      0,
      0,
      0.18452161693888464,
      0.07003844303793064,
      0.13110942305988055,
      0,
      0,
      0.08324338724196156,
      0.21429986156246106,
      0,
      0,
      0.19115811178595,
      0.017135919447129812,
      0,
      0.048137767797527785,
      0,
      0.09855682528641793,
      0.09793903842314998,
      0.2188221821914255,
      0,
      0,
      0.11141647120403916,
      0,
      0.18426490405383159,
      0.02318679486815207,
      0.12476158464614431,
      0,
      0.14764607893638432,
      0,
      0,
      0,
      0.1314361464266918,
      0.10243164475042504,
      0.1582380142579853,
      0.036623285936297253,
      0.10911660145737476,
      0.060736461345698094
    ],
    "metadata": {
      "heading": "Day 3: Introduction to Key-Value Stores (Maps/Dictionaries)",
      "text": "**Objectives:** - Learn the concept of maps/dictionaries. - Understand how data is stored using key-value pairs. **Code Example:** ```go package main import \"fmt\" func main() {     ages := map[string]int{         \"Alice\": 30,         \"Bob\":   25,     }     fmt.Println(\"Ages:\", ages) } ``` **Exercises:** - Create a map of three items and print the keys and values. ---"
    }
  },
  {
    "embedding": [
      0.07251992790596017,
      0,
      0,
      0.07838467706161312,
      0,
      0.07784519443978499,
      0.34691836735122406,
      0.03256201328484973,
      0.25533484965957765,
      0,
      0.0024584891620482944,
      0.024545783232084672,
      0.0073954603992546246,
      0,
      0.02229150582400284,
      0,
      0,
      0.12309794466757393,
      0.02395526930213096,
      0.04613534655225208,
      0.05502124255790714,
      0,
      0.06913702563994152,
      0.03920785643430008,
      0.05941491297477488,
      0.15107021107699448,
      0,
      0.1331541952122704,
      0,
      0,
      0,
      0.02805561530441835,
      0.2748890525912318,
      0.17685670275676701,
      0,
      0.14668095424412658,
      0.10366309062919517,
      0,
      0,
      0,
      0,
      0,
      0.14729329847085137,
      0.01985228019677354,
      0.07066515601917915,
      0,
      0.02916756414849047,
      0,
      0,
      0.07220373618028643,
      0,
      0,
      0.013812929344410104,
      0,
      0,
      0.13757381440487956,
      0,
      0.07466757394977681,
      0,
      0.0506836913383514,
      0,
      0.0977969288694003,
      0.042911854667991106,
      0.15629622027153367,
      0.042728806356588274,
      0.02814372482248247,
      0,
      0,
      0,
      0.028271229597263303,
      0,
      0,
      0.20163879782406893,
      0.17002709705537125,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03625311900697971,
      0.09470861739965931,
      0.15870389449207617,
      0,
      0,
      0.11679945685791503,
      0,
      0.19536968128591176,
      0.004486924543785947,
      0,
      0,
      0,
      0,
      0.1562818724302142,
      0.056832559249793774,
      0.05103380657375364,
      0,
      0,
      0.19139701640512372,
      0.1521222847439474,
      0,
      0,
      0.20015223740431948,
      0.0023217192097778573,
      0,
      0,
      0,
      0.03884660667857775,
      0.0550862914607357,
      0.26029589625049904,
      0,
      0,
      0.1183605164250502,
      0,
      0.22035395704095279,
      0.04468679124968956,
      0.15731910839803,
      0,
      0.0321453535139227,
      0,
      0,
      0,
      0.035527618401359845,
      0.10321607835896719,
      0.10385656758754831,
      0.08703419733499443,
      0.02570368948811823,
      0.05819726633956206
    ],
    "metadata": {
      "heading": "Day 4: Basic Algorithms – Searching and Sorting",
      "text": "**Objectives:** - Understand the concepts behind basic algorithms. - Learn how to search for an element in an array. **Topics:** - Linear search and simple sorting ideas (conceptual). **Exercises:** - Write pseudocode for a linear search algorithm. ---"
    }
  },
  {
    "embedding": [
      0.12111357535124777,
      0,
      0,
      0.047563918374374056,
      0,
      0.06348022366470908,
      0.3357838103352658,
      0.06139238452821739,
      0.20850694514910662,
      0,
      0.04276838439018024,
      0,
      0.010653926028653681,
      0.01195429771465316,
      0,
      0,
      0,
      0.09548003599359076,
      0.005656331592086756,
      0.07534640948180928,
      0.12064257376461907,
      0.03332725039540603,
      0.11343224004547377,
      0,
      0.006302309731775638,
      0.13036761831012528,
      0,
      0.16648672175888043,
      0.03748588845139568,
      0,
      0,
      0.08181690614880918,
      0.31049449638521837,
      0.11764574692462708,
      0,
      0.1149215323832129,
      0.12530262129565906,
      0,
      0,
      0,
      0,
      0,
      0.11432628262475444,
      0,
      0.10094428781988014,
      0,
      0.02700163486845183,
      0,
      0.0004961118391976486,
      0.0706072403824032,
      0,
      0,
      0.016340963562495373,
      0,
      0,
      0.16433515116425743,
      0,
      0.08159314725928189,
      0,
      0.13935939943239395,
      0,
      0.10547138251866454,
      0,
      0.13553231423415185,
      0.09314819290180029,
      0.02904995759609145,
      0,
      0,
      0.04173879456322702,
      0.09331766027822169,
      0,
      0,
      0.14154365584555031,
      0.12268431179841666,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004984213563340398,
      0.07921324778702837,
      0.2106063193436776,
      0,
      0,
      0.1072585370972437,
      0,
      0.19161588507353725,
      0,
      0.05002791033738464,
      0,
      0,
      0.0684091564939763,
      0.19788814309718614,
      0.07348346477327018,
      0.10184392477061699,
      0,
      0,
      0.20449640974473698,
      0.12033008550826278,
      0,
      0,
      0.18022364694089454,
      0,
      0.0017285854254542844,
      0.02384658100221875,
      0,
      0.04487360628079523,
      0.026258774843516613,
      0.1685137568225732,
      0,
      0,
      0.07806340698588443,
      0,
      0.21094629481689706,
      0.02515340860629387,
      0.0932917597787062,
      0,
      0.037422337919754245,
      0,
      0,
      0,
      0.05586303062865896,
      0.15085252167402052,
      0.1734202789183398,
      0.07684984466940023,
      0.04639726807221726,
      0.08909383331623201
    ],
    "metadata": {
      "heading": "Day 5: Mini Project and Review",
      "text": "**Objectives:** - Combine data structures and algorithm concepts in a small project. **Project Example:** - Create a program that stores student names and scores in a map and calculates the average score. **Exercises:** - Write the program and test with sample data. ---"
    }
  },
  {
    "embedding": [
      0.1087550616062682,
      0,
      0,
      0.055726731849334986,
      0,
      0.09169418654950545,
      0.3295098230558581,
      0,
      0.30675446305867476,
      0,
      0,
      0.055236330779982024,
      0,
      0,
      0,
      0,
      0,
      0.08964561703835683,
      0.06895119141878746,
      0.049720494485956675,
      0.051895219717587024,
      0.005651052694742741,
      0.16309675015411507,
      0,
      0.0473754620359468,
      0.12442438952392908,
      0,
      0.21729204743085778,
      0,
      0,
      0,
      0.005395382287272886,
      0.22387049102152576,
      0.13986965123690015,
      0,
      0.09247340039112732,
      0.09839604220354224,
      0,
      0,
      0,
      0,
      0,
      0.1369950526306251,
      0.03522759034700332,
      0.0389362753567159,
      0,
      0.030104867874311367,
      0,
      0,
      0.04218956966008959,
      0.01831449596710222,
      0,
      0.02789955224249314,
      0,
      0,
      0.1191663020261677,
      0,
      0.0461631865239487,
      0,
      0.10115452478977911,
      0,
      0.09396191933924573,
      0,
      0.16985891717268523,
      0.06775805458927324,
      0.01638758752681827,
      0,
      0.0012177319525500596,
      0,
      0.047713433385851066,
      0,
      0,
      0.17230045194306776,
      0.21697119730027772,
      0,
      0,
      0,
      0,
      0,
      0,
      0.027196179527027613,
      0.1015949206660247,
      0.18568573620787754,
      0,
      0,
      0.1896850772722329,
      0,
      0.17484749469028601,
      0.03111316697349973,
      0.02019289533531571,
      0,
      0.007271871518636801,
      0,
      0.128996955838683,
      0.010172209634697352,
      0.11846238493513817,
      0,
      0,
      0.09496604860924901,
      0.17731501295955662,
      0,
      0,
      0.2429521606101357,
      0.00993007169192618,
      0,
      0.015960808627694563,
      0,
      0.08435401391729001,
      0.07092119752032765,
      0.22853624081869306,
      0,
      0,
      0.07477823462737498,
      0,
      0.11180318582684814,
      0,
      0.15920947764391652,
      0,
      0.04012354129884425,
      0,
      0,
      0,
      0.043026538913114046,
      0.1388654247979279,
      0.13322021916645418,
      0.03744691006249289,
      0.0781812084323901,
      0.005567001704866169
    ],
    "metadata": {
      "heading": "Day 1: Introduction to Go",
      "text": "**Objectives:** - Understand what Go is, its origins, and why it’s used. - Learn about Go’s design philosophy and core strengths. **Topics:** - History and purpose of Go. - Overview of Go’s simplicity and performance. **Exercises:** - Read an introductory article on Go. - Write down three reasons why Go might be a good language to learn. ---"
    }
  },
  {
    "embedding": [
      0.15153050958456507,
      0,
      0,
      0,
      0,
      0.10823577563211394,
      0.34351163450301375,
      0.023702507026385412,
      0.23403786489100292,
      0,
      0.06619621982755038,
      0,
      0.028855170037295055,
      0,
      0.022152328156603868,
      0,
      0,
      0.11388960234714174,
      0.05550693359308518,
      0.03012352779547108,
      0.06871440955096364,
      0,
      0.12047437115539766,
      0,
      0.06599275294591242,
      0.1840791366363938,
      0,
      0.1803955894236823,
      0,
      0,
      0,
      0.04951191333683269,
      0.19968824568969964,
      0.10709755219102461,
      0,
      0.10090370425357874,
      0.1658687756755518,
      0.017471172903192,
      0,
      0,
      0,
      0,
      0.0839217371055575,
      0.05375985459560509,
      0.05379466176267122,
      0,
      0,
      0,
      0,
      0.07340606972504408,
      0,
      0,
      0.0008561001931909985,
      0,
      0,
      0.041662688607171844,
      0,
      0.05738974704290918,
      0,
      0.10169460842940202,
      0,
      0.08228399380216782,
      0,
      0.2045157367937748,
      0.09260868155924502,
      0.03905909595478491,
      0,
      0,
      0.03332756310916013,
      0.059763843177423136,
      0,
      0,
      0.21804862266317518,
      0.18372935755810033,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05430483485845325,
      0.08931125618437427,
      0.23196369963563093,
      0,
      0,
      0.12950026215273366,
      0,
      0.1745513827610138,
      0,
      0.004537907277991127,
      0,
      0,
      0,
      0.16109091454970184,
      0.05494903570980714,
      0.11756736808547251,
      0,
      0,
      0.1411769781387912,
      0.14750299276867357,
      0,
      0,
      0.16402517787749063,
      0,
      0,
      0.020827614071375202,
      0,
      0.14931712530320002,
      0.11457833258884872,
      0.1893419747609378,
      0,
      0,
      0.12456583512931256,
      0,
      0.16283306879028908,
      0,
      0.11711963559389586,
      0,
      0.05879912671074984,
      0,
      0,
      0,
      0.027236377502829506,
      0.12151581927544677,
      0.12783262744002657,
      0.12934308691897323,
      0.07981183385714485,
      0
    ],
    "metadata": {
      "heading": "Day 2: Installation and Setup",
      "text": "**Objectives:** - Install Go on your computer. - Configure environment variables (e.g., PATH, GOPATH). **Exercises:** - Follow an online guide to install Go. - Verify your installation by running `go version` in your terminal. ---"
    }
  },
  {
    "embedding": [
      0.07158541241622333,
      0,
      0,
      0.0017972757126267578,
      0,
      0.19797588619025885,
      0.3501873370720037,
      0.015715486515562038,
      0.19820643290289677,
      0,
      0.00523970477139037,
      0.00020127459070717364,
      0.018391225419826174,
      0,
      0,
      0,
      0,
      0.11713393482006901,
      0.034429346184142416,
      0.09751747376075709,
      0.043340870326204095,
      0,
      0.12354548952068214,
      0.0632548618751048,
      0.0854630963877138,
      0.20228493249877016,
      0,
      0.16602165447657344,
      0.029314920210438643,
      0,
      0,
      0.029659540290838747,
      0.24677626671181208,
      0.10490767335961064,
      0,
      0.049339055726675664,
      0.1306418452714185,
      0,
      0,
      0,
      0,
      0,
      0.04345960495895599,
      0.01292560011540836,
      0.015442754468820466,
      0.002772232898692245,
      0.039503705795517596,
      0,
      0.01707040663229463,
      0.07117566142408242,
      0,
      0,
      0.01763277728932987,
      0,
      0,
      0.14108755901709172,
      0,
      0.0691127986338156,
      0,
      0.10917082203775041,
      0,
      0.08171179081991051,
      0,
      0.1353260610665204,
      0.10304794141298,
      0,
      0,
      0,
      0,
      0.12927429903579474,
      0,
      0,
      0.18033753210188666,
      0.17125666085048366,
      0,
      0,
      0,
      0,
      0,
      0.02874916410212197,
      0.1081909503391958,
      0.09023846930666835,
      0.16806399975936812,
      0,
      0,
      0.13601387839716284,
      0,
      0.11437526000613461,
      0,
      0,
      0,
      0,
      0,
      0.18241481609684185,
      0.09963288676289263,
      0.05902362002348263,
      0,
      0,
      0.16047824936232377,
      0.18967943145978478,
      0,
      0,
      0.16400270627657207,
      0,
      0.006526722094444183,
      0.04457826841922048,
      0,
      0.06573715445238702,
      0.037275606876533356,
      0.2067038344584234,
      0,
      0,
      0.0876537403435092,
      0,
      0.19077778606214987,
      0,
      0.15901166547873916,
      0,
      0.10777689508480787,
      0,
      0.012703702368673825,
      0,
      0.07732678556368497,
      0.161409798824941,
      0.15603819972098973,
      0.08076003497447837,
      0.01106080779974426,
      0.08891975569253557
    ],
    "metadata": {
      "heading": "Day 3: Your First Go Program",
      "text": "**Objectives:** - Write and run your first Go program. - Understand the basic structure of a Go program. **Code Example:** ```go package main import \"fmt\" func main() {     fmt.Println(\"Hello, World!\") } ``` **Exercises:** - Create a file named `hello.go` with the above code. - Run the program and observe the output. ---"
    }
  },
  {
    "embedding": [
      0.11934871302683062,
      0,
      0,
      0.008301453018046632,
      0,
      0.13295152313674452,
      0.3232928452758386,
      0.024624842397271977,
      0.21914728144208634,
      0,
      0.0663237979772277,
      0,
      0.013451724286623752,
      0,
      0.030683557838181514,
      0,
      0,
      0.08139649777798007,
      0.038665566573256364,
      0.062417875724643315,
      0.09698326420131953,
      0.033474285147529086,
      0.14019368713065516,
      0.017702536840767447,
      0.0177630295747992,
      0.15286073525912236,
      0,
      0.13164267181382916,
      0,
      0,
      0,
      0.07568358197887336,
      0.24732206543549676,
      0.13903536831756882,
      0,
      0.1065474391040719,
      0.1582210731725977,
      0.028813511367407996,
      0,
      0,
      0,
      0.005120899012852824,
      0.08967363751356808,
      0.060803698033300484,
      0.026801005368527992,
      0,
      0,
      0,
      0,
      0.0605710263043253,
      0,
      0,
      0.029090274757816722,
      0,
      0,
      0.08962978076445433,
      0,
      0.07420542828074395,
      0,
      0.1348815435000701,
      0,
      0.03861827923546628,
      0,
      0.12344683192065599,
      0.06228281572505533,
      0.013499562629863007,
      0,
      0,
      0.03875309273079742,
      0.11253759668533024,
      0,
      0,
      0.2056875558299236,
      0.13831386770279197,
      0,
      0,
      0,
      0,
      0,
      0.01806196506323551,
      0.02093079711474587,
      0.04894214551360777,
      0.17389155074086943,
      0,
      0,
      0.14066537305049112,
      0,
      0.16350836231736773,
      0,
      0.022854633641993975,
      0,
      0,
      0,
      0.24806167376566,
      0.04194759731256611,
      0.12148241613413796,
      0,
      0,
      0.11746872935035475,
      0.15782700975285133,
      0,
      0,
      0.1660329076880008,
      0.003362930555670283,
      0.028012872584845926,
      0.012411743555656064,
      0,
      0.124080357415919,
      0.08224103780787143,
      0.20075019508452246,
      0,
      0,
      0.19301390330888432,
      0,
      0.14758656760815872,
      0,
      0.18270202353408987,
      0,
      0.11896795470858545,
      0,
      0,
      0,
      0.06267345843849491,
      0.12977780129145688,
      0.12166271127114812,
      0.0855203718631224,
      0.12066040119605109,
      0.07108020670579719
    ],
    "metadata": {
      "heading": "Day 4: Basic Syntax and Code Structure",
      "text": "**Objectives:** - Learn about comments, formatting, and file structure in Go. - Use the built-in formatter (`gofmt`). **Code Example:** ```go package main import \"fmt\" // This function prints a welcome message. func main() {     // Print a message using fmt.Println     fmt.Println(\"Welcome to Go programming!\") } ``` **Exercises:** - Add comments to your `hello.go` file. - Run `gofmt -w hello.go` and compare before/after formatting. ---"
    }
  },
  {
    "embedding": [
      0.050697825343464654,
      0,
      0,
      0,
      0,
      0.16702840418659,
      0.35735002108083974,
      0.03645463181106574,
      0.258879173697366,
      0,
      0,
      0.020286415434797676,
      0.0759978193488915,
      0,
      0,
      0,
      0,
      0.08316041369588711,
      0.025421821838514602,
      0.077067317237551,
      0.10472314436997318,
      0.003464666903567417,
      0.14325064135964535,
      0.01311279921841647,
      0.04759384195540413,
      0.17093896142133994,
      0,
      0.16062956559229793,
      0.002671700719019902,
      0,
      0,
      0.057992305348454905,
      0.23927153784089228,
      0.1259798212531567,
      0,
      0.10964019170722797,
      0.13487281879145102,
      0,
      0,
      0,
      0,
      0,
      0.12170588698618638,
      0,
      0.02511012495903379,
      0,
      0.007043230261562609,
      0,
      0.004992620351561523,
      0.06743163322767977,
      0,
      0,
      0.07780799450142419,
      0,
      0,
      0.09323726023069302,
      0,
      0.07590682726822734,
      0,
      0.09848080387242346,
      0,
      0.026290131912532023,
      0,
      0.14255826283940531,
      0.0693668951559624,
      0.01462192205279817,
      0,
      0,
      0.026843408156221354,
      0.13270892459850048,
      0,
      0,
      0.14851153012628418,
      0.13959682597001888,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02042838775065656,
      0.06942809200018005,
      0.20800587052582592,
      0,
      0,
      0.11595829177867505,
      0,
      0.1602770919048524,
      0.009163182018158767,
      0.022802069382014654,
      0,
      0,
      0,
      0.17719294414048387,
      0.022143704565898523,
      0.08171842160194898,
      0,
      0,
      0.16335189038238868,
      0.15238715008239173,
      0,
      0,
      0.1827805490657166,
      0,
      0.054177618640714416,
      0.094685690711138,
      0,
      0.060135627347379844,
      0.050016598580514014,
      0.2226103884294648,
      0,
      0,
      0.15915668237523561,
      0,
      0.14476285261464367,
      0,
      0.18934417630645323,
      0,
      0.07554465844248065,
      0,
      0,
      0,
      0.05685601431416484,
      0.10896428475527148,
      0.1478536209869176,
      0.08481675613135234,
      0.07589322487790608,
      0.08052740760289893
    ],
    "metadata": {
      "heading": "Day 5: Exercises and Review",
      "text": "**Objectives:** - Review all topics covered in Week 5. - Complete hands-on exercises to solidify your understanding. **Exercises:** - Modify the \"Hello, World!\" program to also print your name. - Write a short summary of what you learned this week. ---"
    }
  },
  {
    "embedding": [
      0.09249031961303791,
      0,
      0,
      0.008006887264635353,
      0,
      0.12574165680724145,
      0.3043986866129199,
      0,
      0.27306437747974954,
      0,
      0.011074564712359188,
      0.028402142310161603,
      0.025531668898331226,
      0,
      0,
      0,
      0,
      0.08247187661250348,
      0.0602641222456153,
      0.06761795446737602,
      0.10267800729937536,
      0,
      0.15729869262889382,
      0.039775615461524784,
      0.06232025676612753,
      0.11702651366309384,
      0,
      0.24357308512937142,
      0,
      0,
      0,
      0.02132171325130666,
      0.230610935315508,
      0.076736659849262,
      0,
      0.07369572015946121,
      0.1655067400049747,
      0,
      0,
      0,
      0,
      0,
      0.08342519229861828,
      0.040538743496658355,
      0.09423077544474498,
      0,
      0,
      0,
      0,
      0.09755025981338081,
      0,
      0,
      0.05982850945891383,
      0,
      0,
      0.10528118614045409,
      0,
      0.13257545245142974,
      0,
      0.12729345700679975,
      0,
      0.08989818844726663,
      0,
      0.121096809606586,
      0.07948971133285936,
      0.0631667988575377,
      0,
      0,
      0.010389560515346005,
      0.06179024955197836,
      0,
      0,
      0.18362738317002783,
      0.15122830958207506,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0013879044876101202,
      0.043051484845851834,
      0.23099459012364548,
      0,
      0,
      0.13249653006404088,
      0,
      0.15722302512753605,
      0,
      0.0842455907372396,
      0,
      0,
      0,
      0.10137264521882844,
      0.06543503053296644,
      0.056846275974980535,
      0,
      0,
      0.17993109732091137,
      0.20999947835139302,
      0,
      0,
      0.20441836117832604,
      0.03669845626916999,
      0.022741958720730527,
      0,
      0,
      0.07690973393276634,
      0.021418678085015738,
      0.22989938966544934,
      0,
      0,
      0.1700121452502449,
      0,
      0.10817588234627878,
      0,
      0.16533924887759582,
      0,
      0.08787099230481807,
      0,
      0,
      0,
      0.025583151629024355,
      0.1265003723378169,
      0.11478966330475941,
      0.0881567903518692,
      0.0019142299815937535,
      0.040304433345399446
    ],
    "metadata": {
      "heading": "Day 1: Variables and Constants",
      "text": "**Objectives:** - Learn how to declare variables and constants. - Understand type inference with the `:=` operator. **Code Example:** ```go package main import \"fmt\" func main() {     var age int = 25     name := \"Alice\"     fmt.Printf(\"%s is %d years old.\\n\", name, age) } ``` **Exercises:** - Declare a constant for your favorite number. - Print out a sentence that includes a variable and a constant. ---"
    }
  },
  {
    "embedding": [
      0.15951411634566764,
      0,
      0,
      0,
      0,
      0.20644028094947953,
      0.3004820747650223,
      0.02535147278503172,
      0.22113393572781553,
      0,
      0.03987507704151602,
      0,
      0,
      0,
      0.036967255464757647,
      0,
      0,
      0.14217084501036995,
      0.06943094496260387,
      0.06255035297738615,
      0.09401368341252357,
      0.01539468268834539,
      0.11202092491353384,
      0.034355870203121634,
      0.08642093703430496,
      0.18638359688936174,
      0,
      0.1824382456122651,
      0.024474248055618125,
      0,
      0,
      0.031536898468060584,
      0.23442569517663744,
      0.0712489442464317,
      0,
      0.10062696257596503,
      0.1563049041052245,
      0.014910295245400154,
      0,
      0,
      0,
      0,
      0.05203264151552716,
      0,
      0.03962118507790346,
      0,
      0.0018073387912791088,
      0,
      0,
      0.06985169422265256,
      0,
      0,
      0.035846710277267296,
      0,
      0,
      0.14355132169541243,
      0,
      0.05578168287450358,
      0,
      0.05374652795419808,
      0,
      0.06604867368602667,
      0,
      0.11638853810338855,
      0.10448254586559248,
      0.04901380175269017,
      0,
      0,
      0,
      0.04301808250919891,
      0,
      0,
      0.16405447230238696,
      0.16229471993165712,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05804422286761805,
      0.065201558171443,
      0.175801879362041,
      0,
      0,
      0.15081622534070305,
      0,
      0.17823460993809487,
      0,
      0.012169857992282327,
      0,
      0,
      0,
      0.14804480455398594,
      0.17142362501113662,
      0.08800351016615006,
      0,
      0,
      0.12711390467788172,
      0.1726573709339216,
      0,
      0,
      0.15708246354645325,
      0.03723732495673667,
      0.05472805837881608,
      0,
      0,
      0.08951505004970155,
      0,
      0.21884403948224643,
      0,
      0,
      0.13022891983485332,
      0.03586415088362141,
      0.21013157105445632,
      0.00043868783419537114,
      0.13702894360046503,
      0,
      0.07387854663001998,
      0,
      0.011111915919718891,
      0,
      0.08533244827972407,
      0.14711338871044746,
      0.15312688803371774,
      0.13229021619468523,
      0,
      0.04816501518001638
    ],
    "metadata": {
      "heading": "Day 2: Data Types",
      "text": "**Objectives:** - Get acquainted with basic data types: integers, floats, booleans, and strings. - Learn how type inference works in Go. **Code Example:** ```go package main import \"fmt\" func main() {     var integer int = 10     floatNum := 3.14     isTrue := true     text := \"Go is fun!\"     fmt.Println(integer, floatNum, isTrue, text) } ``` **Exercises:** - Create variables of each data type and print their values. ---"
    }
  },
  {
    "embedding": [
      0.10194177464978342,
      0,
      0,
      0.041068247675756606,
      0,
      0.0848838819108886,
      0.33475590496151647,
      0.061147460605489624,
      0.23572012331113915,
      0,
      0.019669900836171667,
      0,
      0.031100145367610604,
      0,
      0,
      0,
      0,
      0.10531761383468582,
      0.018387546447273556,
      0.0184525188386307,
      0.07680233749763665,
      0.009885962857996597,
      0.17981468577169207,
      0,
      0.06672802356603273,
      0.1165021660752214,
      0,
      0.1828830472368507,
      0,
      0,
      0,
      0.019816806343665748,
      0.21747906486105079,
      0.16083388282486857,
      0.0005224738004818763,
      0.15123098683948863,
      0.17707098933182638,
      0.011566147665187815,
      0,
      0,
      0,
      0,
      0.11058817022152369,
      0.022313899347748273,
      0.05428860932832241,
      0,
      0.029153108412266492,
      0,
      0.0111802471875165,
      0.07326476320551686,
      0,
      0,
      0.03826972072477437,
      0,
      0,
      0.1344720158894288,
      0,
      0.047237536402360045,
      0,
      0.051973950234614825,
      0,
      0.011099962464491598,
      0,
      0.111256831429843,
      0.0441322464989684,
      0.06687545019831916,
      0,
      0,
      0.03900609557242667,
      0.11477954404186651,
      0,
      0,
      0.20141683430955593,
      0.1814819075715537,
      0,
      0,
      0,
      0,
      0,
      0,
      0.066048184366319,
      0.07262730630570971,
      0.21495499589872916,
      0,
      0,
      0.15929897788517489,
      0,
      0.2102281216357127,
      0,
      0,
      0,
      0.0011461866029687216,
      0,
      0.17326584328167188,
      0.042838634262412474,
      0.08052158706198775,
      0,
      0,
      0.13176626927003468,
      0.17254338543055103,
      0,
      0,
      0.2200383610897588,
      0,
      0,
      0.0233609567684441,
      0,
      0.050233307718384364,
      0.03333288315602699,
      0.23302740665332944,
      0,
      0,
      0.13706847141385037,
      0,
      0.16408995981256447,
      0,
      0.14207603095356303,
      0,
      0.012233792447239199,
      0,
      0,
      0,
      0.0642403926710044,
      0.08643119670380535,
      0.1363283281610583,
      0.06689077837886648,
      0.07903253547513552,
      0.012257271613198036
    ],
    "metadata": {
      "heading": "Day 3: Basic Operators",
      "text": "**Objectives:** - Understand arithmetic, relational, and logical operators. - Use operators in simple expressions. **Code Example:** ```go package main import \"fmt\" func main() {     a, b := 10, 5     sum := a + b     isEqual := (a == b)     fmt.Println(\"Sum:\", sum, \"Are they equal?\", isEqual) } ``` **Exercises:** - Write a program that uses different operators to compare two numbers. ---"
    }
  },
  {
    "embedding": [
      0.1507859906609645,
      0,
      0,
      0,
      0,
      0.15270736505279403,
      0.29973723381398215,
      0.007682160647730823,
      0.26695873297697637,
      0,
      0.039631814095671986,
      0,
      0,
      0,
      0,
      0,
      0,
      0.12922325559229225,
      0.08342269697655728,
      0.12076077933987531,
      0.072883943663418,
      0.062039349793631876,
      0.1517119778217971,
      0.05562243452257658,
      0.04894445556681873,
      0.15021418537264564,
      0,
      0.13784348972881283,
      0.019620534603404214,
      0,
      0,
      0.011113018134636382,
      0.24760142716418654,
      0.1246049279855491,
      0,
      0.08780544109211544,
      0.15777142467807337,
      0.011421311361274715,
      0,
      0,
      0,
      0,
      0.07930938516916607,
      0,
      0.03779217335375558,
      0,
      0,
      0,
      0,
      0.07399281924256355,
      0.032617886289224615,
      0,
      0.039328594964642055,
      0,
      0,
      0.14145308364906167,
      0,
      0.09182956194987416,
      0,
      0.06308617153003375,
      0,
      0.07972474492002929,
      0,
      0.12799877799139447,
      0.04063738159580757,
      0.09908506146428286,
      0,
      0,
      0,
      0.06170429500053941,
      0,
      0,
      0.15935050416124377,
      0.1993796241121258,
      0,
      0,
      0,
      0,
      0,
      0.03480217012946317,
      0.022371690127077445,
      0.025789729769363754,
      0.2140180250665185,
      0,
      0,
      0.12432466877748535,
      0,
      0.16513346671253457,
      0,
      0.05834624595577481,
      0,
      0,
      0,
      0.12570141835629287,
      0.14740535561632817,
      0.08985996536421124,
      0,
      0,
      0.09716865415030537,
      0.13490337341080738,
      0,
      0,
      0.2441942536509958,
      0.010007337707057416,
      0.05525108118243354,
      0,
      0,
      0.06795849442107241,
      0.04130303340571307,
      0.2444329354494676,
      0,
      0,
      0.0618672476684213,
      0,
      0.20091534905105699,
      0,
      0.11977816127987531,
      0,
      0.07797730536343014,
      0,
      0,
      0,
      0.05012837097734648,
      0.13491671021972043,
      0.1402424805532466,
      0.09031547490728038,
      0.03527711249889154,
      0.03814204723557934
    ],
    "metadata": {
      "heading": "Day 4: Basic Input/Output",
      "text": "**Objectives:** - Learn how to use `fmt.Println`, `fmt.Printf`, and `fmt.Scan` for I/O. - Practice formatting output. **Code Example:** ```go package main import \"fmt\" func main() {     var name string     fmt.Print(\"Enter your name: \")     fmt.Scan(&name)     fmt.Printf(\"Hello, %s!\\n\", name) } ``` **Exercises:** - Create a program that prompts the user for two numbers, adds them, and prints the result. ---"
    }
  },
  {
    "embedding": [
      0.12498254597588393,
      0,
      0,
      0.07056626022303637,
      0,
      0.0881514552299049,
      0.412032252830949,
      0.004341483606956502,
      0.22640410188774268,
      0,
      0.011527956165583766,
      0.02291610271079232,
      0.06632182884442905,
      0,
      0.008731319252396706,
      0,
      0,
      0.10497643623444888,
      0.03040403823739652,
      0.048514681896602824,
      0.05771472354299157,
      0,
      0.1752189856235519,
      0.03333405655856667,
      0.04517445993453765,
      0.15229206786558672,
      0,
      0.1353365793250697,
      0,
      0,
      0,
      0.0464757834393715,
      0.2304790226400483,
      0.15228452451569274,
      0,
      0.13606315439778446,
      0.10911151595138566,
      0.011341475449572076,
      0,
      0,
      0,
      0,
      0.08936893996432847,
      0.07130844293318306,
      0.06353761533408239,
      0,
      0,
      0,
      0,
      0.07814361728697182,
      0,
      0,
      0.019442808728248023,
      0,
      0,
      0.12613813784337924,
      0,
      0.043378980658922754,
      0,
      0.07253771170239738,
      0,
      0.02520861117514169,
      0.045531506206486064,
      0.11173926034670519,
      0.06010981159317887,
      0.043787732963850946,
      0,
      0,
      0,
      0.10130506499552801,
      0,
      0,
      0.1833301465114742,
      0.14771052901769524,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.1102413704755036,
      0.17162917788762527,
      0,
      0,
      0.15465327792890976,
      0,
      0.1366260765331551,
      0.018658440337129767,
      0.004494409723371262,
      0,
      0,
      0,
      0.20114889086475862,
      0.03912968629543395,
      0.06645037258377869,
      0,
      0,
      0.13980652968087823,
      0.1523220663272153,
      0,
      0,
      0.20420785161682214,
      0.009417396351531233,
      0,
      0.037318336391300166,
      0,
      0.08260853744443782,
      0.001293634847657945,
      0.18974377381036323,
      0,
      0,
      0.15845492661235835,
      0,
      0.1492261119254945,
      0.0024679525372516887,
      0.2077658012335565,
      0,
      0.016482041217845113,
      0,
      0,
      0,
      0.06791696172514866,
      0.13983139909989586,
      0.16616633356576954,
      0.06920991248569491,
      0.057083760650201515,
      0
    ],
    "metadata": {
      "heading": "Day 5: Mini Project & Review",
      "text": "**Objectives:** - Reinforce the week’s lessons with a small project. - Review variables, types, operators, and I/O. **Project Example:** - Write a program that calculates the area of a rectangle. **Code Example:** ```go package main import \"fmt\" func main() {     var width, height float64     fmt.Print(\"Enter width: \")     fmt.Scan(&width)     fmt.Print(\"Enter height: \")     fmt.Scan(&height)     area := width * height     fmt.Printf(\"The area is: %.2f\\n\", area) } ``` **Exercises:** - Modify the project to also calculate and print the perimeter. ---"
    }
  },
  {
    "embedding": [
      0.15588742816194812,
      0,
      0,
      0.03444794685015918,
      0,
      0.06860447097936703,
      0.32104716752578305,
      0.011954501380258773,
      0.23524319069759783,
      0,
      0.05668549479318545,
      0.006159585661033791,
      0.010501709978398483,
      0,
      0.06338659100297563,
      0,
      0,
      0.12206049044918467,
      0.05881967772096791,
      0.07135168411859226,
      0.07158172254386777,
      0.07181862532852686,
      0.12468962623456746,
      0.05639478383260228,
      0.08957095200632535,
      0.062469905982048254,
      0,
      0.22015619237419948,
      0.022125441263393816,
      0,
      0,
      0.0483322996294827,
      0.21359969800340523,
      0.16082054545133181,
      0,
      0.12157137671022332,
      0.12846782208285346,
      0.030664528565923967,
      0,
      0,
      0,
      0,
      0.12075560242239364,
      0.07580440926039363,
      0.04036106656676476,
      0,
      0,
      0,
      0,
      0.04892240677740149,
      0,
      0,
      0.07846850400806157,
      0,
      0,
      0.12706012944618064,
      0,
      0.0718192135158383,
      0,
      0.01455222421337041,
      0,
      0.03123205944793324,
      0,
      0.18388807794609185,
      0.045060441129441846,
      0.07241948715252788,
      0,
      0,
      0,
      0.07588523511013148,
      0,
      0,
      0.1713863637307325,
      0.2438623882545812,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03429632984567739,
      0.0835056020768558,
      0.19555521022676708,
      0,
      0,
      0.12912868438718034,
      0,
      0.18326789617744138,
      0,
      0.0932556275949538,
      0,
      0,
      0,
      0.18045067280986737,
      0.05353321917396099,
      0.09081488874171388,
      0,
      0,
      0.09094082144745776,
      0.18566781940239588,
      0,
      0,
      0.21597548027544503,
      0.030382856345568084,
      0.026141679814510602,
      0,
      0,
      0.07625952162721171,
      0.055850386734146204,
      0.2165213579584632,
      0,
      0,
      0.0918303411905648,
      0,
      0.16193095773525681,
      0,
      0.11724454135497268,
      0,
      0.018550188362148973,
      0,
      0,
      0,
      0.015515754965553887,
      0.1274713321854594,
      0.146861423138843,
      0.08902196134833822,
      0.058140974075301985,
      0.043012911143133846
    ],
    "metadata": {
      "heading": "Day 1: If-Else Statements",
      "text": "**Objectives:** - Learn how to use if-else statements for decision making. **Code Example:** ```go package main import \"fmt\" func main() {     age := 20     if age >= 18 {         fmt.Println(\"You are an adult.\")     } else {         fmt.Println(\"You are a minor.\")     } } ``` **Exercises:** - Write a program that prints a message based on a numerical condition. ---"
    }
  },
  {
    "embedding": [
      0.17364773877820566,
      0,
      0,
      0,
      0,
      0.08900730817888027,
      0.2944768216567819,
      0.054781922493532954,
      0.24893577196256325,
      0,
      0.036074498373470196,
      0.06881398295243064,
      0.06512493293399384,
      0,
      0,
      0,
      0,
      0.10830011098342902,
      0.03160611275435039,
      0.11625684995078842,
      0.050632229428216324,
      0.04044147984177167,
      0.16392021727016556,
      0.019351615059594214,
      0.08131653526521025,
      0.1667444928792839,
      0,
      0.11042322113370164,
      0,
      0,
      0,
      0.03510722639848994,
      0.22578706971682516,
      0.18271329304865103,
      0,
      0.10712928223921173,
      0.1287578253303694,
      0.061899215902798954,
      0,
      0,
      0,
      0,
      0.06457407450057454,
      0.028373927051683612,
      0.003891630397205914,
      0.027186100934830513,
      0,
      0,
      0,
      0.07047014602775271,
      0,
      0,
      0.02997638075692119,
      0,
      0,
      0.1241486760555486,
      0,
      0.06831617482701206,
      0,
      0.1134044831184716,
      0,
      0.05096483545701607,
      0,
      0.17069973201912117,
      0.09093770356618212,
      0.07541600177204374,
      0,
      0,
      0.038140585289288605,
      0.048064704442144356,
      0,
      0,
      0.17040438747703265,
      0.15302652076286433,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08700303520492025,
      0.07183913381994157,
      0.2006979166706799,
      0,
      0,
      0.19814259599953016,
      0,
      0.14148351382867416,
      0.03334006066719426,
      0,
      0,
      0.005849311120357221,
      0,
      0.14644184194471302,
      0.05022432942356035,
      0.14704358751414182,
      0,
      0,
      0.13359014818313433,
      0.16022723348128767,
      0,
      0,
      0.1221806024615571,
      0.00043867441084567005,
      0.05708158702958597,
      0.005924417277087197,
      0,
      0.13327597566059587,
      0.08490587549507723,
      0.22268280807888144,
      0,
      0,
      0.08862192610351793,
      0,
      0.20503741064033582,
      0,
      0.10355587625537639,
      0,
      0.0778445866330351,
      0,
      0,
      0,
      0.0713502255004596,
      0.07018905197354448,
      0.15949569806529487,
      0.1617634717009208,
      0.06624330857498369,
      0.06099091739404241
    ],
    "metadata": {
      "heading": "Day 2: Switch Statements",
      "text": "**Objectives:** - Use switch statements for cleaner multiple conditional checks. **Code Example:** ```go package main import \"fmt\" func main() {     day := 3     switch day {     case 1:         fmt.Println(\"Monday\")     case 2:         fmt.Println(\"Tuesday\")     case 3:         fmt.Println(\"Wednesday\")     default:         fmt.Println(\"Another day\")     } } ``` **Exercises:** - Create a switch statement that prints the name of a day based on a number input (1-7). ---"
    }
  },
  {
    "embedding": [
      0.13071368147550694,
      0,
      0,
      0.04603848662225627,
      0,
      0.08937314584310084,
      0.36160676290480565,
      0.021643212158922672,
      0.27503685328624394,
      0,
      0.07009728503934336,
      0.028286288258189945,
      0.04484453837556675,
      0.008871841682356234,
      0,
      0,
      0,
      0.15836051431919468,
      0.02944758679204907,
      0.05998177522367221,
      0.06289573280707784,
      0.004117716709336616,
      0.16221240039798468,
      0.00960060210971954,
      0.06769553796972519,
      0.14277563903843202,
      0,
      0.18474873114572768,
      0.026417537074709334,
      0,
      0,
      0.011535863070060041,
      0.19402226001371156,
      0.13639842547915182,
      0,
      0.17806274195871807,
      0.10299946666550398,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08635933724398553,
      0.0008285444097265774,
      0.01701798783095401,
      0.022024551143816216,
      0,
      0,
      0.03335248302309483,
      0,
      0,
      0.0888466831666901,
      0,
      0,
      0.04528043268084571,
      0,
      0.03671549283999788,
      0,
      0.11669905040392638,
      0,
      0.01970439903151251,
      0,
      0.14470833393123378,
      0.04182037515859333,
      0.06723689573845434,
      0,
      0,
      0,
      0.08597653733335006,
      0,
      0,
      0.18292496136859335,
      0.19541500220106875,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07048235905765993,
      0.10850255763358771,
      0.12597180239459185,
      0,
      0,
      0.13303501813397958,
      0,
      0.17039795330627225,
      0.0015644534208871476,
      0.06714818571852205,
      0,
      0,
      0,
      0.14943842010675198,
      0.06596718836081834,
      0.1121732657995201,
      0,
      0,
      0.1630305942809595,
      0.2161677280399615,
      0,
      0,
      0.17906559091077834,
      0,
      0,
      0,
      0,
      0.0558740541315614,
      0.06581052639806706,
      0.20439142834860846,
      0,
      0,
      0.0643525003145799,
      0,
      0.17608580367095747,
      0,
      0.16491109687145358,
      0,
      0.016471830223810713,
      0,
      0,
      0,
      0.0033370666060833732,
      0.13085733066075192,
      0.17672276370348852,
      0.06752109266004008,
      0.0744034837981807,
      0.00469067966325446
    ],
    "metadata": {
      "heading": "Day 3: For Loops (Part 1)",
      "text": "**Objectives:** - Learn the basic structure of Go’s `for` loop. **Code Example:** ```go package main import \"fmt\" func main() {     for i := 0; i < 5; i++ {         fmt.Println(\"Iteration:\", i)     } } ``` **Exercises:** - Write a loop that prints numbers from 1 to 10. ---"
    }
  },
  {
    "embedding": [
      0.10972140646788717,
      0,
      0,
      0.022510168606496538,
      0,
      0.07751001225797775,
      0.24793908741254436,
      0,
      0.22983415165553064,
      0,
      0.06984208158956896,
      0.041119132229266366,
      0,
      0,
      0.04883156799982736,
      0,
      0,
      0.08641436954084217,
      0,
      0.09055897284053024,
      0.034518434092969515,
      0.025091353519945424,
      0.08509543748946193,
      0,
      0.006580344732420293,
      0.17767300667502156,
      0,
      0.18282050744128847,
      0,
      0,
      0,
      0.08513742851989202,
      0.23487420368674278,
      0.10198342532813767,
      0,
      0.08923566479477843,
      0.17983052591211993,
      0.037394266608430274,
      0,
      0,
      0,
      0,
      0.08018153987677158,
      0.0530784193180069,
      0.027954772984379574,
      0,
      0,
      0,
      0.002809400193233322,
      0.06996411019920466,
      0,
      0,
      0.08731537297227702,
      0,
      0,
      0.06324287670689116,
      0,
      0.0761962718984782,
      0,
      0.12535442532168595,
      0,
      0.06867602010356938,
      0,
      0.2203702926285611,
      0.09980348758889357,
      0.02985304913112521,
      0,
      0,
      0.027266114298976414,
      0.07652795867001577,
      0.008002338399176252,
      0,
      0.2229660056596829,
      0.16972666605551026,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05748614760931062,
      0.11070568525810955,
      0.14902109533032826,
      0,
      0,
      0.15393718135764461,
      0,
      0.16652969947952329,
      0,
      0.08049151829444792,
      0,
      0.0012400800686702307,
      0,
      0.16328897781038065,
      0,
      0.12825070941184966,
      0,
      0,
      0.10984222538660353,
      0.1950380834116364,
      0,
      0,
      0.14162157568317915,
      0,
      0,
      0,
      0,
      0.10831496408525293,
      0.1256163765068727,
      0.22864377679994474,
      0,
      0,
      0.18623201275013052,
      0,
      0.18895173869362403,
      0.02587119596809084,
      0.12296116558726823,
      0,
      0.03750530083962238,
      0,
      0,
      0,
      0.05011138313622208,
      0.15084133415328063,
      0.15943595561920473,
      0.1392282620303061,
      0.0990712330029806,
      0.017921984900139565
    ],
    "metadata": {
      "heading": "Day 4: For Loops (Part 2) and Ranges",
      "text": "**Objectives:** - Use the `range` keyword with slices and arrays. **Code Example:** ```go package main import \"fmt\" func main() {     numbers := []int{10, 20, 30, 40, 50}     for index, value := range numbers {         fmt.Printf(\"Index: %d, Value: %d\\n\", index, value)     } } ``` **Exercises:** - Create a slice of strings and print each element using a range-based loop. ---"
    }
  },
  {
    "embedding": [
      0.14486690170697517,
      0,
      0,
      0.0283131018651696,
      0,
      0.1662931402402292,
      0.3025246026565493,
      0.018506368533549263,
      0.26097439983725834,
      0,
      0.052786110586181496,
      0.02552583601015785,
      0,
      0,
      0.017988365068328984,
      0,
      0,
      0.1207173388814267,
      0.09181330145154253,
      0.056554504404870067,
      0.06660849384119968,
      0,
      0.11108202364588092,
      0,
      0.025498996813649425,
      0.17042824702091297,
      0,
      0.1528149723849498,
      0,
      0,
      0,
      0.07594209113294878,
      0.2575086117899519,
      0.11352544485051039,
      0,
      0.1200301680388253,
      0.12214495188103264,
      0,
      0,
      0,
      0,
      0,
      0.10636140628251993,
      0.01649860583454761,
      0.04382074600028517,
      0.001700346838817727,
      0,
      0,
      0.006518859689107543,
      0.07564831446457301,
      0.004316396156014407,
      0,
      0.0343774873869505,
      0,
      0,
      0.1453756252745664,
      0,
      0.04823163845655323,
      0,
      0.12513481096954907,
      0,
      0.11751880657886228,
      0,
      0.14030886995382955,
      0.08345385177090069,
      0.06325794173046954,
      0,
      0,
      0.04062897241599358,
      0.039299929700477576,
      0,
      0,
      0.16384258761194412,
      0.1654134694111342,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06592508131216801,
      0.08929553445226367,
      0.2150114677758501,
      0,
      0,
      0.16335093350828045,
      0,
      0.1211592350323304,
      0,
      0.056069893003879906,
      0,
      0,
      0,
      0.1685261118000829,
      0.03940490035873308,
      0.10431148651166229,
      0,
      0,
      0.15250914679514102,
      0.15799639440181037,
      0,
      0,
      0.1951051806332176,
      0,
      0,
      0,
      0,
      0.07174964478268145,
      0.008897837164558274,
      0.16556337357928516,
      0,
      0,
      0.05889027843238532,
      0,
      0.21291509015130813,
      0,
      0.12153901532270947,
      0,
      0.057528997263469606,
      0,
      0.017807731071979603,
      0,
      0.06166249942785165,
      0.12298616971727941,
      0.19304673149499352,
      0.1272808831185679,
      0.044215111612738646,
      0.10336078147220708
    ],
    "metadata": {
      "heading": "Day 5: Arrays and Strings",
      "text": "**Objectives:** - Understand how to declare and use arrays. - Learn basic string manipulation. **Code Example:** ```go package main import \"fmt\" func main() {     // Array example     var numbers [5]int = [5]int{1, 2, 3, 4, 5}     fmt.Println(\"Array:\", numbers)     // String iteration example     str := \"GoLang\"     for i, c := range str {         fmt.Printf(\"Character %d: %c\\n\", i, c)     } } ``` **Exercises:** - Write a program that prints each character of a user-input string. ---"
    }
  },
  {
    "embedding": [
      0.1002620290899057,
      0,
      0,
      0.046687800250428235,
      0,
      0.13920166157632977,
      0.29048394376580644,
      0.0020764573362481416,
      0.23941938792834933,
      0,
      0.026761590144494307,
      0.04323670943546228,
      0.052618266838058855,
      0,
      0,
      0,
      0,
      0.11695245294938263,
      0.014629751561829094,
      0.10497687580121566,
      0.033707423576803015,
      0.011809899666199178,
      0.1428643080055023,
      0.015012589013607707,
      0.06218275783669751,
      0.11612675269171287,
      0,
      0.13439210877079652,
      0.02033542727158393,
      0,
      0,
      0.042053017806021525,
      0.21951169121859884,
      0.14998561597887602,
      0,
      0.08154464986645804,
      0.1063378287952318,
      0.038099351246476704,
      0,
      0,
      0,
      0,
      0.1345849231935893,
      0.04721333810633142,
      0.029555375120048147,
      0,
      0,
      0,
      0.0004929282599452013,
      0.04241155901373671,
      0,
      0,
      0.04658778549562325,
      0,
      0,
      0.08481311278300017,
      0,
      0.04912788631866941,
      0,
      0.11328580822375536,
      0,
      0.0981114250552931,
      0,
      0.161774317870595,
      0.06811188476605243,
      0,
      0,
      0,
      0,
      0.12215089438125003,
      0,
      0,
      0.19208288249802827,
      0.1886958793948215,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07362770977213608,
      0.09043195557709126,
      0.2530269708009634,
      0,
      0,
      0.14462078668589987,
      0,
      0.10937238017301924,
      0,
      0,
      0,
      0,
      0,
      0.19529479723974486,
      0.012088890262091213,
      0.0865519133533547,
      0,
      0,
      0.19570522837964222,
      0.23494237098738802,
      0,
      0,
      0.1555933437557915,
      0,
      0,
      0,
      0,
      0.08307455325593938,
      0.0695780912636163,
      0.19545929029018763,
      0,
      0,
      0.14937288983506444,
      0,
      0.19515957791595245,
      0,
      0.14782429435655323,
      0,
      0.04586454473619736,
      0,
      0,
      0,
      0.014236820709123531,
      0.1531077565077009,
      0.14375334273328064,
      0.10228409091311409,
      0.09098680329910086,
      0
    ],
    "metadata": {
      "heading": "Day 1: Functions Basics",
      "text": "**Objectives:** - Define and call functions. - Understand parameters and return values. **Code Example:** ```go package main import \"fmt\" func add(a int, b int) int {     return a + b } func main() {     sum := add(3, 4)     fmt.Println(\"Sum:\", sum) } ``` **Exercises:** - Write a function that multiplies two numbers and returns the result. ---"
    }
  },
  {
    "embedding": [
      0.1519320781041265,
      0,
      0,
      0,
      0,
      0.08524766808439542,
      0.29135790144483076,
      0,
      0.2694855071052593,
      0,
      0.03748629153900838,
      0,
      0,
      0,
      0.0015751975263259307,
      0,
      0,
      0.11377604121765769,
      0.051185379544694265,
      0.06859186990962557,
      0.04171014797433944,
      0.07923642777247336,
      0.1157791452328223,
      0.05263808752341906,
      0.047356075987191076,
      0.11380060822329727,
      0,
      0.23785925537287705,
      0.0514819866769786,
      0,
      0,
      0.045491286391496716,
      0.2284619836993199,
      0.0816853307443133,
      0,
      0.08971807894611508,
      0.16537591552551428,
      0.004861998102942476,
      0,
      0,
      0,
      0,
      0.1078403000693604,
      0,
      0.09210391586652879,
      0,
      0.0015011845948410259,
      0,
      0.012744494557479573,
      0.023597241480188928,
      0,
      0,
      0.08771941536132088,
      0,
      0,
      0.09845492810025909,
      0,
      0.0713965675190755,
      0,
      0.05330344553539164,
      0,
      0.026806708764764958,
      0,
      0.16620327319078823,
      0.08663635282086575,
      0.07787683610040154,
      0,
      0,
      0,
      0.1117978553837048,
      0.027927153504967647,
      0,
      0.18984655070122855,
      0.20406836626631478,
      0,
      0,
      0,
      0,
      0,
      0,
      0.029198445937407693,
      0.06786632111089931,
      0.13410088574199694,
      0,
      0,
      0.13847280574436166,
      0,
      0.14778805359340322,
      0,
      0.1158829474231519,
      0,
      0.01445858043347853,
      0,
      0.15637690993254474,
      0.07853959044930786,
      0.1655792633723881,
      0,
      0,
      0.06522744556769458,
      0.16967519073807025,
      0,
      0,
      0.17783396238340785,
      0.007245506371093064,
      0,
      0,
      0,
      0.10868540733976641,
      0.056565238951851615,
      0.20653088586293467,
      0,
      0,
      0.13313606089021277,
      0.008309181796974964,
      0.17816019980318046,
      0,
      0.1536562343798411,
      0,
      0.05741872730284623,
      0,
      0,
      0,
      0.12279866467954045,
      0.12641405052844454,
      0.18944525590902872,
      0.09837207475758586,
      0.06969070054223578,
      0
    ],
    "metadata": {
      "heading": "Day 2: Advanced Functions",
      "text": "**Objectives:** - Explore variadic functions and named return values. **Code Example:** ```go package main import \"fmt\" // Variadic function to sum numbers. func sumAll(numbers ...int) (total int) {     for _, n := range numbers {         total += n     }     return } func main() {     fmt.Println(\"Total:\", sumAll(1, 2, 3, 4)) } ``` **Exercises:** - Write a variadic function that concatenates multiple strings. ---"
    }
  },
  {
    "embedding": [
      0.19104783690810562,
      0,
      0,
      0,
      0,
      0.1324471578950779,
      0.2803408815473195,
      0.013390438194470234,
      0.27580858623098514,
      0,
      0.026953577407489895,
      0.02410601966216323,
      0.02080610638903955,
      0,
      0,
      0,
      0,
      0.11129729274329268,
      0.04315882797597777,
      0.13126090221351697,
      0.07965994898687215,
      0.041741940557437,
      0.11543370193896631,
      0.015797387260592533,
      0.07093728303775951,
      0.15509335258799617,
      0,
      0.1393471917875392,
      0.009135548906648605,
      0,
      0,
      0.04089901146847894,
      0.24970699935830698,
      0.09873186615450227,
      0,
      0.0864096100460649,
      0.11977489170524472,
      0,
      0,
      0,
      0,
      0,
      0.04101425509682088,
      0.038756438168298796,
      0,
      0,
      0,
      0,
      0.0035600029484611877,
      0.07007349594236255,
      0,
      0,
      0.002029061503928569,
      0,
      0,
      0.10816391726402054,
      0,
      0.05114476798128759,
      0,
      0.18091532195773719,
      0,
      0.10685117681946137,
      0,
      0.16493796207999012,
      0.06202028383910108,
      0.008246262820626933,
      0,
      0,
      0,
      0.08650316110325443,
      0,
      0,
      0.17654809428998314,
      0.15958549822733725,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05936513205250048,
      0.10086463710429719,
      0.2643482139397497,
      0,
      0,
      0.1533768190296222,
      0,
      0.13698429396895326,
      0,
      0,
      0,
      0.012910490951569849,
      0,
      0.11829662850916753,
      0.04341649591131194,
      0.1007557079798598,
      0,
      0,
      0.1495100901311008,
      0.15944879083800503,
      0,
      0,
      0.18335995782398995,
      0,
      0,
      0.005699956624748809,
      0,
      0.1145576335756838,
      0.05037946662383709,
      0.16233313762072782,
      0,
      0,
      0.13030469048272583,
      0,
      0.19384250464858926,
      0,
      0.18848812898635828,
      0,
      0.031907012055409995,
      0,
      0,
      0,
      0.0787726426364483,
      0.14936417356063553,
      0.14050693529026417,
      0.11632201899083137,
      0.0430378761730326,
      0
    ],
    "metadata": {
      "heading": "Day 3: Error Handling",
      "text": "**Objectives:** - Learn Go’s idiomatic error handling with the `error` type. **Code Example:** ```go package main import (     \"errors\"     \"fmt\" ) func divide(a, b float64) (float64, error) {     if b == 0 {         return 0, errors.New(\"cannot divide by zero\")     }     return a / b, nil } func main() {     result, err := divide(10, 0)     if err != nil {         fmt.Println(\"Error:\", err)     } else {         fmt.Println(\"Result:\", result)     } } ``` **Exercises:** - Modify the divide function to handle more edge cases. ---"
    }
  },
  {
    "embedding": [
      0.14025799154271562,
      0,
      0,
      0,
      0,
      0.0774286248384273,
      0.311223757785951,
      0,
      0.2591343588817776,
      0.008484600021990325,
      0.030482397955210638,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0620597247071728,
      0.09688091441315966,
      0.10794615304217753,
      0.05302628410104486,
      0.03785173435097598,
      0.15194464341403097,
      0,
      0.024345360929609126,
      0.14266972784926507,
      0,
      0.1962501804898417,
      0.004770755266822357,
      0,
      0,
      0.03712386076725902,
      0.26710817186320224,
      0.012105077105117077,
      0,
      0.10065345570332697,
      0.0820934085320611,
      0.008025452433636228,
      0,
      0,
      0,
      0,
      0.06982881635504003,
      0.07135962075747979,
      0.001009609096313621,
      0,
      0,
      0,
      0,
      0.06500960061961115,
      0.07768533730836157,
      0,
      0.07134771277956654,
      0,
      0,
      0.09571214488935471,
      0,
      0.02567540855669778,
      0,
      0.14897020178709955,
      0,
      0.055339796688247435,
      0,
      0.11655903692894193,
      0.07384312967757245,
      0,
      0,
      0,
      0,
      0.010015439388641198,
      0,
      0,
      0.2031150066092832,
      0.20571970797239209,
      0,
      0,
      0,
      0,
      0,
      0.0015142846185081816,
      0.013519404584878653,
      0.08541957295865903,
      0.21622082383346142,
      0,
      0,
      0.14228495779692338,
      0,
      0.14443806283483002,
      0,
      0.054368782476113826,
      0,
      0,
      0,
      0.11599665493103724,
      0.05525962672051023,
      0.14781062876539205,
      0,
      0,
      0.1440015277886295,
      0.17103330483329282,
      0,
      0,
      0.14006426669775213,
      0.025803265796587985,
      0,
      0,
      0,
      0.05410373492724026,
      0.054672007825720834,
      0.22111368700738054,
      0,
      0,
      0.12281737011854173,
      0,
      0.17585014154697298,
      0,
      0.23481314339244508,
      0,
      0.03745655762907598,
      0,
      0,
      0,
      0.053560728414437715,
      0.1932843336254539,
      0.16815190352127418,
      0.09048702300851293,
      0.03691492122033995,
      0.04861294427127866
    ],
    "metadata": {
      "heading": "Day 4: Using Standard Library Packages",
      "text": "**Objectives:** - Explore and use Go’s standard libraries. **Code Example:** ```go package main import (     \"fmt\"     \"strings\" ) func main() {     message := \"hello, world\"     upper := strings.ToUpper(message)     fmt.Println(\"Uppercase:\", upper) } ``` **Exercises:** - Use a standard library package (like `math`) in a simple function. ---"
    }
  },
  {
    "embedding": [
      0.11046256132648286,
      0,
      0,
      0.03243388206754686,
      0.01807172286986445,
      0.07233297785737061,
      0.28474563464793184,
      0.02347194353089786,
      0.22791041803290243,
      0,
      0.03133028593270484,
      0,
      0,
      0,
      0,
      0,
      0,
      0.1130124871373992,
      0.057938211913353306,
      0.14309293032077786,
      0.038461396532308484,
      0.07892590897806792,
      0.07323154577964633,
      0.04176936138901532,
      0.08275354017007767,
      0.022119070739428533,
      0,
      0.17409007033362012,
      0.022212673905679055,
      0,
      0,
      0.0016216029351614689,
      0.2984547988226601,
      0.11463340594046546,
      0,
      0.12969485249640822,
      0.16396994306791574,
      0,
      0,
      0,
      0,
      0,
      0.11161223256536312,
      0.007845517729587559,
      0.04725410697006162,
      0,
      0.008751316755302524,
      0,
      0.027475679567799425,
      0.06486091769139171,
      0,
      0,
      0.045189838902523996,
      0,
      0,
      0.18308734756809802,
      0,
      0.04318959389405184,
      0,
      0.041625298972344675,
      0,
      0.06680827810850827,
      0,
      0.14075420620184675,
      0.07869164581047859,
      0,
      0,
      0,
      0,
      0.12691688299029577,
      0.013310409438185893,
      0,
      0.17201625127441714,
      0.17943928410388119,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03613428967008089,
      0.13846346013197075,
      0.19099960021680606,
      0,
      0,
      0.14067815736396613,
      0,
      0.1600720160327267,
      0,
      0.08605237216317492,
      0,
      0.014868181901865762,
      0,
      0.25134416143669047,
      0.03671305012940798,
      0.09252955953027373,
      0,
      0,
      0.1711209391239674,
      0.1919927674163051,
      0,
      0,
      0.1523239418253951,
      0.08544915171648332,
      0,
      0,
      0,
      0.007513567221935615,
      0.040845356376818055,
      0.2047515121501525,
      0,
      0,
      0.1372727294919086,
      0,
      0.15977290017042206,
      0.0014400186570799555,
      0.18672285460312432,
      0,
      0.041815393553363986,
      0,
      0,
      0,
      0.06542344247603024,
      0.1306415587253727,
      0.1079150780377943,
      0.03892727532630684,
      0.06915684552421326,
      0
    ],
    "metadata": {
      "heading": "Day 5: Building and Organizing Code",
      "text": "**Objectives:** - Learn how to structure a Go project using packages and modules. **Exercises:** - Split a simple program into two files (one for functions, one for `main`) and initialize a module with `go mod init`. ---"
    }
  },
  {
    "embedding": [
      0.11846507416568287,
      0,
      0,
      0.0022458130450183126,
      0,
      0.12192704543915492,
      0.3042428399508846,
      0.003404793047010581,
      0.22622690758263095,
      0.0005094637155125289,
      0.05607955894051259,
      0.0009318039789127499,
      0,
      0,
      0.02271259057074936,
      0,
      0,
      0.11627871785288975,
      0.10605018364673502,
      0.09075628931896061,
      0.11261811104859089,
      0.03993964733534756,
      0.07418076111204358,
      0.06288299708353418,
      0.03208920821844646,
      0.1150564821664391,
      0,
      0.13614816835206184,
      0.00792904484836289,
      0,
      0,
      0.0943040317713087,
      0.2627769963890265,
      0.1899997715413943,
      0,
      0.07841988621821208,
      0.1455793764149512,
      0,
      0,
      0,
      0,
      0,
      0.12293621428272393,
      0.019843286310395086,
      0.029620823736530695,
      0,
      0,
      0,
      0.015318850380892084,
      0.0589963611368546,
      0,
      0,
      0.03324199270420466,
      0,
      0,
      0.15556953278990437,
      0,
      0.06556299690944481,
      0,
      0.11465007792557394,
      0,
      0.1419511865679048,
      0,
      0.16331073832072476,
      0.07049422857651262,
      0.009174155321556661,
      0,
      0,
      0.03233065145865547,
      0.05170079577946594,
      0,
      0,
      0.14861097690960598,
      0.14968574155895292,
      0,
      0,
      0,
      0,
      0,
      0.0245500552011674,
      0.04587438645978517,
      0.035833397324136526,
      0.2353233376579758,
      0,
      0,
      0.1487321412896096,
      0,
      0.12252401522528977,
      0,
      0.030385380940195984,
      0,
      0,
      0,
      0.2207321546222584,
      0,
      0.07432479587674647,
      0,
      0,
      0.1422222340812353,
      0.197959509454796,
      0,
      0,
      0.16687565975904659,
      0.028577490614785064,
      0,
      0.012459570735974234,
      0,
      0.06158748317487029,
      0.06595055518297585,
      0.21679549911746346,
      0,
      0,
      0.15572796047572712,
      0,
      0.18767848412905005,
      0,
      0.09567074312765676,
      0,
      0.09833878740480209,
      0,
      0,
      0,
      0.03541314547811663,
      0.118421046888844,
      0.12231721169902249,
      0.11600435979690814,
      0.07185133581810477,
      0.08686823859547345
    ],
    "metadata": {
      "heading": "Day 1: Arrays",
      "text": "**Objectives:** - Understand arrays: declaration, initialization, and iteration. **Code Example:** ```go package main import \"fmt\" func main() {     numbers := [5]int{10, 20, 30, 40, 50}     for i := 0; i < len(numbers); i++ {         fmt.Println(\"Number:\", numbers[i])     } } ``` **Exercises:** - Write a program that finds the maximum number in an array. ---"
    }
  },
  {
    "embedding": [
      0.12252076239064955,
      0,
      0,
      0,
      0,
      0.1267675853339215,
      0.2708427235249397,
      0,
      0.24067463139311288,
      0,
      0.060185440557933595,
      0,
      0.023601095680208347,
      0,
      0.04831244945930102,
      0,
      0,
      0.11553383666236508,
      0.07256113793262639,
      0.09240804909446453,
      0.07974041554959756,
      0.011269063195707635,
      0.070297848507757,
      0.04947251456397354,
      0.02237506644836619,
      0.1606425681364931,
      0,
      0.14332687010938766,
      0.02475476044633354,
      0,
      0,
      0.08331791486541779,
      0.3140947401751422,
      0.0706019326230234,
      0,
      0.09143094531346778,
      0.1589916016379943,
      0,
      0,
      0,
      0,
      0,
      0.07253794757753132,
      0.001386904421779254,
      0.04355907156378812,
      0,
      0,
      0,
      0.02523164885503598,
      0.07143675146429569,
      0,
      0,
      0.013596536468021002,
      0,
      0,
      0.15122514910659246,
      0,
      0.14857809997066151,
      0,
      0.10954048872962856,
      0,
      0.10419671917984914,
      0,
      0.1473899854118294,
      0.08601722875304045,
      0.020760066589493323,
      0,
      0,
      0.018440141265621445,
      0.07548392322211338,
      0.017198083350318173,
      0,
      0.18986537326273115,
      0.09516328114743769,
      0,
      0,
      0,
      0,
      0,
      0.052456121789058945,
      0.049154320265979594,
      0.112266385204521,
      0.22409907605009766,
      0,
      0,
      0.14144365042251378,
      0,
      0.14629921961143666,
      0,
      0.04776883349009613,
      0,
      0,
      0,
      0.11219468443324711,
      0.0784118838755661,
      0.06192194177521741,
      0,
      0,
      0.16194414230683715,
      0.11852660482341994,
      0,
      0,
      0.10402314193105357,
      0.014057968390685193,
      0.024294132391267577,
      0,
      0,
      0.09289832477047028,
      0.07452990024274007,
      0.2341041205627884,
      0,
      0,
      0.18428731875186427,
      0,
      0.19182944538556201,
      0.006792214871735713,
      0.150214294668184,
      0,
      0.053928999540988135,
      0,
      0.019109879201620095,
      0,
      0.06941919105341719,
      0.1466469672177756,
      0.1445702367330172,
      0.17554425587164885,
      0,
      0.08200967373380995
    ],
    "metadata": {
      "heading": "Day 2: Slices",
      "text": "**Objectives:** - Learn about slices as dynamic arrays. **Code Example:** ```go package main import \"fmt\" func main() {     numbers := []int{1, 2, 3}     numbers = append(numbers, 4, 5)     fmt.Println(\"Slice:\", numbers) } ``` **Exercises:** - Create a slice of strings and append new elements to it. ---"
    }
  },
  {
    "embedding": [
      0.12933899474293284,
      0,
      0,
      0.02916887213186875,
      0,
      0.11691528807659879,
      0.29830587066024145,
      0,
      0.21468534257192884,
      0,
      0.10812821462419299,
      0.05051891332767041,
      0.0771958025155349,
      0,
      0,
      0,
      0,
      0.10604561876144365,
      0.09983876494877376,
      0.08804503931747812,
      0.10404352591674104,
      0.010025263463706824,
      0.15307903419905858,
      0.01889911202763445,
      0.064553516900694,
      0.10341154241960936,
      0,
      0.10165186920328703,
      0.04904573028019152,
      0,
      0,
      0.05554573043698076,
      0.2565944603904336,
      0.1460044761305003,
      0,
      0.10296806141661502,
      0.07520535520689281,
      0.020596875000040465,
      0,
      0,
      0,
      0,
      0.09692549793685977,
      0.06985699628718754,
      0,
      0,
      0,
      0,
      0,
      0.09266404819429107,
      0,
      0,
      0.02807766197486177,
      0,
      0,
      0.05111102255053019,
      0,
      0.09723131819410524,
      0,
      0.11253268414022899,
      0,
      0.06956848917953011,
      0,
      0.10498337130272199,
      0.06756199869710394,
      0.008752309256047142,
      0,
      0,
      0.04251310428088499,
      0.1325998574306685,
      0,
      0,
      0.18280116265536997,
      0.10504364570220577,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03825582019388038,
      0.09603098222555688,
      0.252506621784924,
      0,
      0,
      0.13499726211056934,
      0,
      0.14443187430292553,
      0,
      0.02245345107709046,
      0,
      0,
      0,
      0.13031654890503042,
      0,
      0.15075862033557236,
      0,
      0,
      0.13967101336215473,
      0.16245677401353148,
      0.038491123733766126,
      0,
      0.12652319825815048,
      0,
      0.015695959442630702,
      0,
      0,
      0.1387129030661084,
      0.08564234707253011,
      0.20957882603928482,
      0,
      0,
      0.17092709029239386,
      0,
      0.24196136423585415,
      0,
      0.15473105628122827,
      0,
      0,
      0,
      0,
      0,
      0.020322979130886897,
      0.16538469117121837,
      0.13189528936309897,
      0.16155105237666229,
      0.0997337382053477,
      0.04186588048165412
    ],
    "metadata": {
      "heading": "Day 3: Slice Operations",
      "text": "**Objectives:** - Practice slicing, copying, and modifying slices. **Code Example:** ```go package main import \"fmt\" func main() {     numbers := []int{10, 20, 30, 40, 50}     subSlice := numbers[1:4]     fmt.Println(\"Sub-slice:\", subSlice) } ``` **Exercises:** - Write a program that creates a copy of a slice and modifies the copy without affecting the original. ---"
    }
  },
  {
    "embedding": [
      0.14825775126832166,
      0,
      0,
      0.03603430886745692,
      0,
      0.15223783697480184,
      0.34135282099244174,
      0,
      0.27017155965522666,
      0,
      0.00946911282239687,
      0,
      0.07423184084741093,
      0,
      0.06326173049439993,
      0,
      0,
      0.09440142069344759,
      0.09892535048698196,
      0.07164782471836607,
      0.08534418629741189,
      0.035802447302553525,
      0.15039036670827463,
      0.04275604970835855,
      0.0664506364133609,
      0.09857358902904328,
      0,
      0.13095011104482504,
      0,
      0,
      0,
      0.03702399948074955,
      0.2561890204897759,
      0.09408038314947315,
      0,
      0.1064751614080965,
      0.16374699166672607,
      0.0017043774380132853,
      0,
      0,
      0,
      0,
      0.1223851285314952,
      0.0036240735136910383,
      0.047652404970560995,
      0,
      0,
      0,
      0,
      0.10727551883992069,
      0,
      0,
      0.02066682682789411,
      0,
      0,
      0.18462186988727358,
      0,
      0.06596380368633208,
      0,
      0.08267920189613573,
      0,
      0.007241643046780977,
      0.006807284069988637,
      0.06199698281883899,
      0.039665987350498554,
      0.037602450822215354,
      0,
      0,
      0.019698656034714573,
      0.11343290607516464,
      0,
      0,
      0.1602826521805144,
      0.16185793307716845,
      0,
      0,
      0,
      0,
      0,
      0.006433152275963795,
      0,
      0.12182728003513653,
      0.2113555052504589,
      0,
      0,
      0.1639347601527865,
      0,
      0.1727852504150546,
      0,
      0.07290158545131253,
      0,
      0,
      0,
      0.16761163813622687,
      0.03860043204857651,
      0.06945641353344068,
      0,
      0,
      0.18033876943310168,
      0.10867515741627995,
      0,
      0,
      0.10277852191963083,
      0.0018395633183272962,
      0.07974535958273335,
      0.040665026704128686,
      0,
      0.07476083158548197,
      0.049395507821256644,
      0.20652149323625296,
      0,
      0,
      0.1538563939126474,
      0,
      0.13273084042029934,
      0,
      0.2091665782486176,
      0,
      0.07492832812660577,
      0,
      0,
      0,
      0.015503836774127155,
      0.12093148429109302,
      0.12937421586790357,
      0.09704323362732195,
      0.009134708123058095,
      0.06632749240866136
    ],
    "metadata": {
      "heading": "Day 4: Maps",
      "text": "**Objectives:** - Introduce maps for key-value storage. **Code Example:** ```go package main import \"fmt\" func main() {     scores := map[string]int{         \"Alice\": 90,         \"Bob\":   85,     }     scores[\"Charlie\"] = 95     fmt.Println(\"Scores:\", scores) } ``` **Exercises:** - Create a map that stores product names and their prices, then print each entry. ---"
    }
  },
  {
    "embedding": [
      0.14417209058809646,
      0,
      0,
      0.014528954660413988,
      0,
      0.041077733980670286,
      0.31710799379866483,
      0.0007439450592428499,
      0.208752877206646,
      0.00882650875339003,
      0.03346112318009963,
      0,
      0.029753751662069797,
      0,
      0.0006628707201564455,
      0,
      0,
      0.08435849884884287,
      0.03968219832955758,
      0.08299269337929131,
      0.10522345773946448,
      0,
      0.10324035232727737,
      0.02727313542462646,
      0,
      0.1530641386716739,
      0,
      0.19493623923463038,
      0.0001147348217644894,
      0,
      0,
      0.11186267878949854,
      0.26252909555017856,
      0.09541103867829061,
      0,
      0.06947018153049066,
      0.18377673211017997,
      0,
      0,
      0,
      0,
      0,
      0.10833591228579374,
      0.004892335121113787,
      0.0927346355820645,
      0,
      0,
      0,
      0.023328647633354762,
      0.03731028560457309,
      0,
      0,
      0,
      0,
      0,
      0.10629554893777754,
      0,
      0.08451418741366074,
      0,
      0.11664453221797198,
      0,
      0.08726222496058234,
      0,
      0.18501994549185594,
      0.11604857598665261,
      0.07680904402966429,
      0,
      0,
      0.04314981227963024,
      0.0758374308422946,
      0.010740654078784878,
      0,
      0.18079465083171276,
      0.12490080892571272,
      0,
      0,
      0,
      0,
      0,
      0,
      0.027051756713931587,
      0.07555579717313365,
      0.20474736655643191,
      0,
      0,
      0.12296865749026872,
      0,
      0.23129172318893845,
      0,
      0.1038399357049573,
      0,
      0,
      0.007382490297227765,
      0.14616873138514433,
      0.04440308227331021,
      0.13872327465297793,
      0,
      0,
      0.17676707732011368,
      0.14588341773315372,
      0,
      0,
      0.20041678232818358,
      0,
      0,
      0,
      0,
      0.0882330675970316,
      0.03771313499698608,
      0.1724796199943437,
      0,
      0,
      0.16761935649010692,
      0,
      0.19975714699996816,
      0,
      0.07909410839934285,
      0,
      0.08215115198091337,
      0,
      0,
      0,
      0.05891850954774839,
      0.12864638965380867,
      0.11936035629159597,
      0.10461522020182364,
      0.04874532260455924,
      0.01617049162120843
    ],
    "metadata": {
      "heading": "Day 5: Review and Mini Project",
      "text": "**Objectives:** - Combine arrays, slices, and maps into a small project. **Project Example:** - Write a program that stores student names and scores, calculates the average score, and prints the details. **Exercises:** - Enhance the program by adding functions to update and delete student records. ---"
    }
  },
  {
    "embedding": [
      0.16454880569864025,
      0,
      0,
      0.02959985032364074,
      0,
      0.1463578395529084,
      0.2729712447143584,
      0.07104600374250082,
      0.217959510902546,
      0,
      0.05591382996095328,
      0.04174577532636362,
      0.003741616583248853,
      0.06847465539193068,
      0,
      0,
      0,
      0.07801768247816332,
      0,
      0.025458175536111363,
      0.07938030274769876,
      0.022765343433367762,
      0.08293702314873219,
      0,
      0.10263281522210659,
      0.13458790718209074,
      0,
      0.1490883044203065,
      0.05296430595729522,
      0,
      0,
      0,
      0.26663543904112474,
      0.05095970451086234,
      0,
      0.1469864561214599,
      0.16841217563236338,
      0,
      0,
      0,
      0,
      0,
      0.09323364188665895,
      0.008531668683316795,
      0.07156281153610164,
      0,
      0.0024694915339368213,
      0,
      0.00274280119301484,
      0.03796312156752556,
      0,
      0,
      0.04603169605397494,
      0,
      0,
      0.13555604163799764,
      0,
      0.08117621452850791,
      0,
      0.11504152398051272,
      0,
      0.012976014763320953,
      0,
      0.1481570950316569,
      0.05110314248143747,
      0.05463442549091634,
      0,
      0,
      0.017899897494068933,
      0.10435966854322895,
      0,
      0,
      0.20216612865331157,
      0.13877277210419878,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08603000677324016,
      0.06997709361544502,
      0.23242163055167478,
      0,
      0,
      0.1672956192161208,
      0,
      0.1575562868241981,
      0,
      0.01498353183057029,
      0,
      0.007301613299127983,
      0.0013414094315170964,
      0.18125643372739353,
      0.07324335774965407,
      0.10544031984136826,
      0,
      0,
      0.15883877208605446,
      0.19707741977003387,
      0,
      0,
      0.13745423719711833,
      0,
      0,
      0,
      0,
      0.04523257908084229,
      0.0006801347150812611,
      0.20637792057928137,
      0,
      0,
      0.2003730827786325,
      0.07317654849640298,
      0.21337274080792146,
      0,
      0.182901124979353,
      0,
      0.02616688807329954,
      0,
      0,
      0,
      0.07792086891744333,
      0.12148282802038794,
      0.10722983098694,
      0.08378516783745621,
      0.025225027769667157,
      0
    ],
    "metadata": {
      "heading": "Day 1: Pointers Basics",
      "text": "**Objectives:** - Understand pointers, the address-of operator, and dereferencing. **Code Example:** ```go package main import \"fmt\" func main() {     x := 10     p := &x     fmt.Println(\"Value of x:\", x)     fmt.Println(\"Address of x:\", p)     fmt.Println(\"Dereferenced value:\", *p) } ``` **Exercises:** - Write a program that demonstrates pointer usage with basic variables. ---"
    }
  },
  {
    "embedding": [
      0.10265381621963925,
      0,
      0,
      0.007451251887424018,
      0,
      0.08330150267198551,
      0.2750367910841697,
      0.03544311819810017,
      0.2402289007369732,
      0,
      0.048847437047686404,
      0,
      0.04279481257111816,
      0.0008654608852417299,
      0.012219541893877868,
      0,
      0,
      0.09986906270609638,
      0.011325225986778657,
      0.050593592393189814,
      0.11079196089501717,
      0,
      0.13212316756809697,
      0,
      0.046318845238394246,
      0.10967929356089882,
      0,
      0.1763848679160226,
      0.032933822556269185,
      0,
      0,
      0.056861581070539416,
      0.26160986216030413,
      0.07175823573986069,
      0.02262962400221723,
      0.04405650822967453,
      0.13077624296139637,
      0.0023069741004335793,
      0,
      0,
      0,
      0,
      0.0670599956588631,
      0.1194010381148877,
      0.02178754389321253,
      0,
      0.02716575975317684,
      0,
      0,
      0.04557281072974649,
      0.012972463115491087,
      0,
      0.07554776168283445,
      0,
      0,
      0.05496642477619853,
      0,
      0.07323614159035714,
      0,
      0.12293239057646252,
      0,
      0.08145027757089951,
      0,
      0.15131653421577998,
      0.07110054307059885,
      0,
      0,
      0,
      0.06591436166660244,
      0.06897708215689446,
      0,
      0.030465042269112036,
      0.2317355939067389,
      0.08206255120435392,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03743302946013877,
      0.11243842637868492,
      0.2398687598772064,
      0,
      0,
      0.16758204623446793,
      0,
      0.1163953628194105,
      0,
      0.05267347754576391,
      0,
      0,
      0,
      0.21566513572525112,
      0.010522265168519538,
      0.14239595662406476,
      0,
      0,
      0.1686950478393081,
      0.20102747041175842,
      0.002154275582454372,
      0,
      0.12882718599050216,
      0,
      0,
      0,
      0,
      0.07788136991443707,
      0.0562780562186461,
      0.23412795788528248,
      0,
      0,
      0.15732603326295672,
      0,
      0.19641338055183605,
      0.008675954789919163,
      0.14841729461308684,
      0,
      0.04335652074433243,
      0,
      0,
      0,
      0.02265707204917508,
      0.14737237128260877,
      0.2100504995754968,
      0.09707482031274599,
      0.07158066610160287,
      0.03541606790541738
    ],
    "metadata": {
      "heading": "Day 2: Pointers in Functions",
      "text": "**Objectives:** - Pass pointers to functions to modify values. **Code Example:** ```go package main import \"fmt\" func increment(n *int) {     *n++ } func main() {     value := 5     increment(&value)     fmt.Println(\"Incremented value:\", value) } ``` **Exercises:** - Create a function that swaps two integer values using pointers. ---"
    }
  },
  {
    "embedding": [
      0.11305041948680926,
      0,
      0,
      0.03128983003870828,
      0,
      0.14658582543402368,
      0.3533474020731234,
      0,
      0.2408510099583956,
      0,
      0.04376294677276811,
      0.05098014421163029,
      0.038806679559499575,
      0,
      0.006871536205583725,
      0,
      0,
      0.0854329116175732,
      0.03287254125099432,
      0.06080675646859738,
      0.07414957958253209,
      0,
      0.1379153670758631,
      0.016412747268667007,
      0.08034562603027413,
      0.14997358201450775,
      0,
      0.1665812318885992,
      0.014488469021023334,
      0,
      0,
      0.0293811473190057,
      0.24925208276641028,
      0.13415832239100461,
      0,
      0.12638604872084697,
      0.10928868258419976,
      0.011245680627423857,
      0,
      0,
      0,
      0,
      0.06930595521557627,
      0.03668769401475691,
      0.01060920181895899,
      0,
      0.0036629725409753292,
      0,
      0.0022543854990895373,
      0.059542120721538805,
      0,
      0,
      0.021104658638108394,
      0,
      0,
      0.09796721436827864,
      0,
      0.035900985421664845,
      0,
      0.08960346343415962,
      0,
      0.08932719244860841,
      0,
      0.1394164101680516,
      0.07116735464322986,
      0.0276005594262873,
      0,
      0,
      0,
      0.07436786023601467,
      0,
      0,
      0.17656259241516115,
      0.21088981360544642,
      0,
      0,
      0,
      0,
      0,
      0,
      0.047855642519721686,
      0.04854695430810146,
      0.1731059047914712,
      0,
      0,
      0.19213414351746264,
      0,
      0.1906822887747327,
      0.04724441107893967,
      0.06871992121331995,
      0,
      0,
      0,
      0.1359759445785297,
      0.10532233428267289,
      0.12807391281769154,
      0,
      0,
      0.10144418399125919,
      0.19299437055312793,
      0,
      0,
      0.17932339070729494,
      0.01521320898940551,
      0.031981624739552794,
      0,
      0,
      0.07933972292098443,
      0.06819007799453161,
      0.1994987673796808,
      0,
      0,
      0.13668973109826726,
      0,
      0.18707262269570504,
      0.003892951819409791,
      0.16521105617000997,
      0,
      0.09392705848397322,
      0,
      0,
      0,
      0.07124593233750799,
      0.12829734055416545,
      0.11352395968485668,
      0.09861649551075212,
      0.014280905416821685,
      0.052185917107134265
    ],
    "metadata": {
      "heading": "Day 3: Introduction to Memory Management",
      "text": "**Objectives:** - Learn about memory allocation using `new` and `make`. - Understand garbage collection at a high level. **Code Example:** ```go package main import \"fmt\" func main() {     // Using new to allocate a pointer to an int     p := new(int)     *p = 100     fmt.Println(\"Value from new:\", *p)     // Using make to allocate a slice     s := make([]int, 3)     fmt.Println(\"Slice allocated with make:\", s) } ``` **Exercises:** - Write a program that uses both `new` and `make` to allocate different types. ---"
    }
  },
  {
    "embedding": [
      0.15739210197254838,
      0,
      0,
      0.030454906613426796,
      0,
      0.17418278009299207,
      0.34050848485815033,
      0,
      0.24455259316099998,
      0,
      0.04536114058118339,
      0.00005048976543605908,
      0.024545983870914945,
      0.0018058699215934594,
      0.06862985149231678,
      0,
      0,
      0.13048872079294,
      0.07345608921450737,
      0.017365636890524793,
      0.07943463063608068,
      0.014833512315757472,
      0.0884328010916928,
      0,
      0.06178389900265832,
      0.14650622341149078,
      0,
      0.13737608344818875,
      0.03740496598057507,
      0,
      0,
      0.02678543644613128,
      0.2575834287738228,
      0.10215812662862314,
      0,
      0.11811211535189742,
      0.08701388250216925,
      0,
      0,
      0,
      0,
      0,
      0.10385430772931928,
      0.04576747683998296,
      0.022901351929561123,
      0,
      0,
      0,
      0,
      0.04513154816341387,
      0,
      0,
      0.02834650893119584,
      0,
      0,
      0.07180668133059633,
      0,
      0.03101884732525481,
      0,
      0.10604035419856149,
      0,
      0.07500678544263456,
      0.00937473422326129,
      0.14577035593326162,
      0.03407088909655115,
      0.006296848522632234,
      0,
      0,
      0,
      0.023343931189774698,
      0,
      0,
      0.2160796630264697,
      0.199119315947053,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07932859736194944,
      0.09252822481255879,
      0.16351840267791692,
      0,
      0,
      0.19560397288767747,
      0,
      0.15214538580860787,
      0.0002102954902619438,
      0.012189469157155254,
      0,
      0,
      0,
      0.1594252546694935,
      0.09064799657017661,
      0.1037068021068969,
      0,
      0,
      0.10853180872291099,
      0.1567489632744571,
      0,
      0,
      0.15718605591849252,
      0,
      0,
      0.00162056763040258,
      0,
      0.09308281425885581,
      0.0404563363608995,
      0.2236431237366593,
      0,
      0,
      0.14198654397928315,
      0,
      0.1682426472418139,
      0,
      0.1750526287430553,
      0,
      0.07926078969518395,
      0,
      0.021669954467641212,
      0,
      0.0657524805719221,
      0.16838617387896346,
      0.17428427355414405,
      0.10424244247429666,
      0.03471468669144914,
      0.025028420137739836
    ],
    "metadata": {
      "heading": "Day 4: Interfaces Basics",
      "text": "**Objectives:** - Introduce interfaces and how they provide abstraction. **Code Example:** ```go package main import \"fmt\" type Greeter interface {     Greet() string } type Person struct {     Name string } func (p Person) Greet() string {     return \"Hello, \" + p.Name } func main() {     var g Greeter = Person{Name: \"Alice\"}     fmt.Println(g.Greet()) } ``` **Exercises:** - Define an interface for a simple shape (e.g., `Area() float64`) and implement it for a circle. ---"
    }
  },
  {
    "embedding": [
      0.20069808517753573,
      0,
      0,
      0.023232062602202397,
      0,
      0.10742188264789541,
      0.3383359990976568,
      0,
      0.29647878525023197,
      0.006776604741149993,
      0.054826245863881566,
      0,
      0.007740141966656031,
      0,
      0.035802995031563194,
      0,
      0,
      0.10402480908830929,
      0.13696238065858857,
      0.09680760908536869,
      0.048947291504713476,
      0.036014675087106644,
      0.13280030377671362,
      0.02498405752608294,
      0.017346375932456807,
      0.17166975714238716,
      0,
      0.16369464409377793,
      0.03230691111037258,
      0,
      0,
      0.02479831704613398,
      0.21475302380248318,
      0.11082143480955474,
      0,
      0.11302585792033519,
      0.10561167184555129,
      0,
      0,
      0,
      0,
      0,
      0.04305124189715885,
      0.03146914826105872,
      0.0455607622788752,
      0,
      0,
      0,
      0,
      0.04088768114443985,
      0,
      0,
      0.0489550841622792,
      0,
      0,
      0.0866228738366956,
      0,
      0.07465834283781068,
      0,
      0.11139840828118228,
      0,
      0.05256038194914474,
      0,
      0.11685688664715642,
      0.04852426429384931,
      0.06613678348880295,
      0,
      0,
      0,
      0.05277340242400097,
      0,
      0,
      0.1806974607269655,
      0.1942369888200329,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06629929948758222,
      0.16824809841910754,
      0,
      0,
      0.17413814172740447,
      0,
      0.11002466850093073,
      0,
      0.10076768804435467,
      0,
      0,
      0,
      0.14291173395096635,
      0.06229445863661317,
      0.08840323099611654,
      0,
      0,
      0.11507152661804187,
      0.16217945184552496,
      0,
      0,
      0.23161561711667414,
      0.015865041609342715,
      0,
      0.010226232391098253,
      0,
      0.10058545435449846,
      0.053850110207596766,
      0.20264419064688916,
      0,
      0,
      0.13100527366485218,
      0,
      0.18897126788052043,
      0,
      0.15313964513537767,
      0,
      0.06053332865346193,
      0,
      0.011233289434246072,
      0,
      0.061472134329844,
      0.11912668322092972,
      0.18263454267665188,
      0.10795684912305117,
      0.020782452144672343,
      0.008379408694167687
    ],
    "metadata": {
      "heading": "Day 5: Interfaces in Depth",
      "text": "**Objectives:** - Explore type assertions and interface switching. **Code Example:** ```go package main import \"fmt\" type Describer interface {     Describe() string } type Product struct {     Name  string     Price float64 } func (p Product) Describe() string {     return fmt.Sprintf(\"%s costs $%.2f\", p.Name, p.Price) } func printDescription(d Describer) {     switch v := d.(type) {     case Product:         fmt.Println(\"Product:\", v.Describe())     default:         fmt.Println(\"Unknown type\")     } } func main() {     prod := Product{Name: \"Book\", Price: 12.99}     printDescription(prod) } ``` **Exercises:** - Extend the previous interface example by adding another type and handling it with a type switch. ---"
    }
  },
  {
    "embedding": [
      0.1841098855689667,
      0,
      0,
      0.026273170525918165,
      0,
      0.11391525727716263,
      0.2869081360862845,
      0.011882299270083281,
      0.2888280631944551,
      0,
      0.036512827529925795,
      0,
      0,
      0,
      0,
      0,
      0,
      0.1041411524584526,
      0.07271967542975885,
      0.12680985268569372,
      0.11118494231022125,
      0.022337015709063594,
      0.09305428048190696,
      0.013969559140936241,
      0.05347430367635991,
      0.10914296605256935,
      0,
      0.21148438759040156,
      0,
      0,
      0,
      0.05135241945944455,
      0.22873710544577308,
      0.054897058695567436,
      0.028737373941647625,
      0.10365847018210538,
      0.11729038314036663,
      0.013712132364611555,
      0,
      0,
      0,
      0,
      0.09436640271602983,
      0.08899637166190223,
      0.0653904585984591,
      0,
      0.01276987135770577,
      0,
      0.0006675566337206089,
      0.06366068477267792,
      0.010566000788906831,
      0,
      0.06922749220996974,
      0,
      0,
      0.14981795138948212,
      0,
      0.10635622410898068,
      0,
      0.1063689213822906,
      0,
      0.13819928456226432,
      0,
      0.13584568791341273,
      0.049754540273636634,
      0.04653999536733892,
      0,
      0,
      0.00009492276837269049,
      0.0353334716734641,
      0.02833252755320616,
      0,
      0.2078222702240855,
      0.15671795409200948,
      0,
      0,
      0,
      0,
      0,
      0,
      0.016129576363502065,
      0.11158069998164162,
      0.23836544898188866,
      0,
      0,
      0.13186557426435921,
      0,
      0.1601547196074639,
      0,
      0.03886768641325748,
      0,
      0,
      0,
      0.15476974826863016,
      0.05398585619833125,
      0.07603598520874458,
      0,
      0,
      0.17380963342678604,
      0.12830872697997206,
      0,
      0,
      0.17596575087531102,
      0.008770881433142067,
      0.025284112370575207,
      0,
      0,
      0.08465850114743677,
      0.06622996625351124,
      0.18480469061923455,
      0,
      0,
      0.13028388480104675,
      0,
      0.16737064362306014,
      0.0033960427707132334,
      0.12705292428938736,
      0,
      0.021325927708566478,
      0,
      0,
      0,
      0.020402016192908583,
      0.14982793168528866,
      0.16530625819923836,
      0.11784320693082313,
      0.06665011789795224,
      0.010897817817004133
    ],
    "metadata": {
      "heading": "Day 1: Introduction to Structs",
      "text": "**Objectives:** - Learn how to define and instantiate structs. **Code Example:** ```go package main import \"fmt\" type Person struct {     Name string     Age  int } func main() {     p := Person{Name: \"Alice\", Age: 30}     fmt.Println(\"Person:\", p) } ``` **Exercises:** - Create a struct for a `Car` with fields like Model and Year, then instantiate and print it. ---"
    }
  },
  {
    "embedding": [
      0.16301048923380296,
      0,
      0,
      0.020388703907650175,
      0,
      0.09288840698667096,
      0.3286815477745068,
      0.017988372230757235,
      0.25030896425094845,
      0,
      0.050163074952406676,
      0,
      0.021120719384690626,
      0.013992553914408162,
      0.046514660132971654,
      0,
      0,
      0.12974743506709505,
      0.0671908865738147,
      0.07661644508242355,
      0.0610687599419503,
      0.03633940062345701,
      0.16615931881278623,
      0,
      0.07228733488356825,
      0.1544810005935284,
      0,
      0.14062887928681833,
      0.04324977082223583,
      0,
      0,
      0.03553242102087904,
      0.25398155267821704,
      0.08738463929116828,
      0,
      0.1268099710975515,
      0.13334272342758524,
      0.009238834335244554,
      0,
      0,
      0,
      0,
      0.07115962958164392,
      0,
      0.07883858781873858,
      0,
      0,
      0,
      0,
      0.07356630753345557,
      0,
      0,
      0.01276197250033928,
      0,
      0,
      0.13870483785235885,
      0,
      0.07416966327734574,
      0,
      0.08059633367388121,
      0,
      0.023428754587800447,
      0,
      0.11452463103228779,
      0.0798637552437409,
      0.06831342635252405,
      0,
      0,
      0,
      0.09081221711546988,
      0,
      0,
      0.14943981056243497,
      0.15453142848893708,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06608979694426709,
      0.19528097334998057,
      0,
      0,
      0.1591166909248449,
      0,
      0.18881709752724532,
      0,
      0.06446111511328174,
      0,
      0,
      0,
      0.24102756098794792,
      0.06990595891380579,
      0.12162043693571066,
      0,
      0,
      0.09699154484081426,
      0.10696695495501131,
      0,
      0,
      0.16748633048425599,
      0.004051153052828772,
      0,
      0.029340745304360483,
      0,
      0.11234725306878027,
      0.05998869225841084,
      0.19258122533695632,
      0,
      0,
      0.16404524829038356,
      0,
      0.2027483849445804,
      0,
      0.14068538159766872,
      0,
      0.07497202712206,
      0,
      0,
      0,
      0.0597319530464279,
      0.13275436517214736,
      0.179258233713877,
      0.0781938102356798,
      0.0383359837335801,
      0
    ],
    "metadata": {
      "heading": "Day 2: Methods on Structs",
      "text": "**Objectives:** - Associate methods with structs using value and pointer receivers. **Code Example:** ```go package main import \"fmt\" type Rectangle struct {     Width, Height float64 } // Value receiver func (r Rectangle) Area() float64 {     return r.Width * r.Height } // Pointer receiver func (r *Rectangle) Scale(factor float64) {     r.Width *= factor     r.Height *= factor } func main() {     rect := Rectangle{Width: 10, Height: 5}     fmt.Println(\"Area:\", rect.Area())     rect.Scale(2)     fmt.Println(\"Scaled Area:\", rect.Area()) } ``` **Exercises:** - Define a struct and add methods to modify its fields. ---"
    }
  },
  {
    "embedding": [
      0.05310427213433148,
      0,
      0,
      0,
      0,
      0.07140115580890886,
      0.39255262122380374,
      0.03154652966270504,
      0.23786614728687536,
      0,
      0.021054194464783283,
      0.041961552150583364,
      0.03933981932450206,
      0.007851114143478232,
      0.008870206333049944,
      0,
      0,
      0.14312098439390442,
      0,
      0.03620998010640869,
      0.060236277732126545,
      0,
      0.19096846931012113,
      0.038940113503415384,
      0.06536292662290477,
      0.10980919519965751,
      0,
      0.13192064718226892,
      0.04022898721199619,
      0,
      0,
      0,
      0.2634437566978728,
      0.10934824052501982,
      0,
      0.13018950269481627,
      0.11717494063680008,
      0,
      0,
      0,
      0,
      0,
      0.10321044480198716,
      0.0311271063679808,
      0.06858468279812291,
      0,
      0.045342203948285066,
      0,
      0,
      0.06215597971986901,
      0.006055318556016734,
      0,
      0.09661538209197924,
      0,
      0,
      0.09725532784367678,
      0,
      0.07772962793083704,
      0,
      0.05979198395245987,
      0,
      0.07877174093568096,
      0,
      0.1560376499821166,
      0.03860551603677657,
      0.012354063219645009,
      0,
      0,
      0,
      0.06601704324736882,
      0,
      0,
      0.18034507967718136,
      0.18430894964116612,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020580945272151,
      0.0683464474630001,
      0.159685833781906,
      0,
      0,
      0.11835363924619124,
      0,
      0.19543435354961347,
      0.017516696648508263,
      0.023875390533440243,
      0,
      0,
      0,
      0.1883069497874368,
      0.08649305381661138,
      0.10913893903201698,
      0,
      0,
      0.14532695398644593,
      0.17091061814073277,
      0,
      0,
      0.15741999659997197,
      0.000664517409865955,
      0.04475735048857138,
      0,
      0,
      0.059199295174100885,
      0.0573139154391363,
      0.20666440462833505,
      0,
      0,
      0.09968809293557283,
      0.005724567164195128,
      0.20221625399018395,
      0,
      0.17141686623725794,
      0,
      0.12950560663928237,
      0,
      0,
      0,
      0.025762819430593747,
      0.10978144450393558,
      0.14225763453003062,
      0.08791138633703827,
      0.04139598796321466,
      0.08617393172935027
    ],
    "metadata": {
      "heading": "Day 3: Struct Composition",
      "text": "**Objectives:** - Understand how to embed structs to create composite types. **Code Example:** ```go package main import \"fmt\" type Address struct {     City, Country string } type Person struct {     Name    string     Address // Embedded struct } func main() {     p := Person{         Name: \"Alice\",         Address: Address{             City:    \"Paris\",             Country: \"France\",         },     }     fmt.Printf(\"%s lives in %s, %s\\n\", p.Name, p.City, p.Country) } ``` **Exercises:** - Create a composite struct for an `Employee` that embeds a `Person` struct. ---"
    }
  },
  {
    "embedding": [
      0.12627135903033698,
      0,
      0,
      0.03402901033851553,
      0,
      0.12197680876640984,
      0.29890967342897345,
      0.05517315154916942,
      0.25364096153059007,
      0,
      0.0025843060513991082,
      0.08293006655611716,
      0,
      0.00767518545467067,
      0.01323270508075631,
      0,
      0,
      0.12015677361280049,
      0.04813217226087032,
      0.1036190774972728,
      0.025959351459536314,
      0.02611171461453565,
      0.17837098006105542,
      0,
      0.0611898477255624,
      0.15543367714516979,
      0,
      0.1864387654468736,
      0,
      0,
      0,
      0.019998734263764056,
      0.20190085937884267,
      0.11385079281278669,
      0,
      0.12079505979322205,
      0.10948623752416035,
      0.030924515647798752,
      0,
      0,
      0,
      0,
      0.09490306796668098,
      0.036086805926956504,
      0,
      0,
      0,
      0,
      0,
      0.07112346720173462,
      0,
      0,
      0.02643450466077333,
      0,
      0,
      0.15217413637708943,
      0,
      0.08829795978178619,
      0,
      0.11435565551198147,
      0,
      0.023764395218578895,
      0,
      0.17284478659847496,
      0.09183589527633088,
      0.05356409539740972,
      0,
      0,
      0.0005781033273525542,
      0.024889129664426624,
      0,
      0,
      0.20583485228743814,
      0.18537250414045722,
      0,
      0,
      0,
      0,
      0,
      0,
      0.042405790408277744,
      0.06292464763580125,
      0.2040844458744458,
      0,
      0,
      0.15340655469618383,
      0,
      0.1563568866074456,
      0,
      0.06601356185743487,
      0,
      0.0118415436675523,
      0,
      0.19122264982728215,
      0.08267937495891212,
      0.08579588664874936,
      0,
      0,
      0.12916006249207046,
      0.20065179727434837,
      0,
      0,
      0.18591638587484993,
      0,
      0,
      0,
      0,
      0.039974083624084264,
      0.08387845848129713,
      0.24526950150719048,
      0,
      0,
      0.05367252344232006,
      0,
      0.20258462948484032,
      0.006940191615300109,
      0.14984902485729515,
      0,
      0.02712897708107441,
      0,
      0,
      0,
      0.031652325369264545,
      0.09644725323030598,
      0.155376950306073,
      0.08333248229908946,
      0.011801198776782994,
      0.018959310918315944
    ],
    "metadata": {
      "heading": "Day 4: Constructors and Initialization",
      "text": "**Objectives:** - Create constructor functions for initializing structs. **Code Example:** ```go package main import \"fmt\" type Book struct {     Title  string     Author string     Pages  int } func NewBook(title, author string, pages int) *Book {     return &Book{         Title:  title,         Author: author,         Pages:  pages,     } } func main() {     book := NewBook(\"Go Programming\", \"Alice\", 300)     fmt.Println(\"Book:\", book) } ``` **Exercises:** - Write a constructor for a `Student` struct and instantiate a new student. ---"
    }
  },
  {
    "embedding": [
      0.11001360881114353,
      0,
      0,
      0.0214166628478386,
      0,
      0.08333951459004019,
      0.3221846875645249,
      0,
      0.22630659940227482,
      0,
      0.009804330849900999,
      0.0017935791275461403,
      0,
      0.01580610427495386,
      0.047426327449215766,
      0,
      0,
      0.0957709443628395,
      0.007491705089612981,
      0.044310268992519296,
      0.10911208199913204,
      0,
      0.12513400353410578,
      0.0021266766553150645,
      0.02348133727075896,
      0.1439325895349481,
      0,
      0.19997880737341037,
      0.02751038782598152,
      0,
      0,
      0.09449199970591869,
      0.2844899992373674,
      0.07762878971422413,
      0,
      0.0934935150479795,
      0.11358803703026128,
      0,
      0,
      0,
      0,
      0,
      0.15441450940573317,
      0.012564132730932277,
      0.06968526140600645,
      0,
      0.024143484234731012,
      0,
      0.028244643062112853,
      0.04633377843125817,
      0,
      0,
      0.03980191785777734,
      0,
      0,
      0.10668256394356718,
      0,
      0.13515439240222565,
      0,
      0.07468627863531198,
      0,
      0.11144489954563319,
      0,
      0.16422881072389173,
      0.08695262517393924,
      0.07332873363529488,
      0,
      0,
      0,
      0.07863380782491632,
      0,
      0,
      0.21517069532796754,
      0.15341042436881422,
      0,
      0,
      0,
      0,
      0,
      0.002460814150557305,
      0,
      0.041652093588858526,
      0.15176242362035258,
      0,
      0,
      0.08827326632626988,
      0,
      0.2549088782113469,
      0,
      0.08108760712808469,
      0,
      0.009285504082214527,
      0,
      0.17415416739670012,
      0.12551944534208262,
      0.12596839923488384,
      0,
      0,
      0.14717932266579672,
      0.13985042970431658,
      0,
      0,
      0.12616062855381616,
      0,
      0,
      0.015121981076643384,
      0,
      0.03489353274865239,
      0.030291153823990044,
      0.20351106676873262,
      0,
      0,
      0.16105982909861044,
      0.011704374185972748,
      0.23496862532511584,
      0,
      0.08510729663616275,
      0,
      0.09289273619864553,
      0,
      0,
      0,
      0.07003398810190394,
      0.10811466669345711,
      0.11342628317758759,
      0.10115491450340428,
      0.044746440850846794,
      0.03314668140923413
    ],
    "metadata": {
      "heading": "Day 5: Review and Mini Project",
      "text": "**Objectives:** - Apply your knowledge of structs and methods in a small project. **Project Example:** - Build a simple book library system that can add, list, and update books. **Exercises:** - Enhance the project by adding additional struct methods. ---"
    }
  },
  {
    "embedding": [
      0.1055835403739522,
      0,
      0,
      0.09318013416031727,
      0,
      0.08087001765542827,
      0.3407301949262855,
      0,
      0.29054532096499325,
      0,
      0.026864610787991103,
      0.007156261905913477,
      0,
      0.023804072502058057,
      0,
      0,
      0,
      0.11969062500802756,
      0.08070686238110718,
      0.07467612326292405,
      0.06823886527515992,
      0,
      0.09544736734665814,
      0.00007705069944603252,
      0.03312982195913131,
      0.08431720293774098,
      0,
      0.24441662647127518,
      0.0392681851171456,
      0,
      0,
      0.00522123305325568,
      0.27269379409265065,
      0.1289886120873418,
      0,
      0.12154883861475456,
      0.1122460227106062,
      0,
      0,
      0,
      0,
      0,
      0.07041009380151093,
      0.029701720937214345,
      0.003214750350386903,
      0,
      0.010900172589579139,
      0,
      0.012126086257637066,
      0.04709706418495891,
      0.004282801598967871,
      0,
      0.05441312437131614,
      0,
      0,
      0.14538004854420358,
      0,
      0.07067632650558121,
      0,
      0.0853005963171985,
      0,
      0.08356291969339107,
      0,
      0.17662507361350885,
      0.08858328932936693,
      0.04227661843942323,
      0,
      0.0031274977458104333,
      0,
      0.04708070608846612,
      0.04309090833523374,
      0,
      0.17865741834685978,
      0.16195220620472636,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04062755530242521,
      0.10181287299517414,
      0.14480011646265523,
      0,
      0,
      0.13800757384879014,
      0,
      0.21294508221288683,
      0,
      0.04555139977959835,
      0,
      0,
      0,
      0.1586201242937648,
      0.11709221319479456,
      0.09544914733169796,
      0,
      0,
      0.125402382239772,
      0.16450882670296343,
      0,
      0,
      0.19250591563708802,
      0.053410883356936424,
      0,
      0,
      0,
      0.05294754370875879,
      0.06951843693271825,
      0.16629668703320186,
      0,
      0,
      0.0800735461311561,
      0,
      0.11309720776629527,
      0.0620858623478203,
      0.15393772855556104,
      0,
      0.06693306159836114,
      0,
      0.024787701624283662,
      0,
      0.10942140704136091,
      0.21704135257658635,
      0.08509380586887776,
      0.03900288155963883,
      0.061867781499685026,
      0
    ],
    "metadata": {
      "heading": "Day 1: Introduction to Concurrency",
      "text": "**Objectives:** - Understand the concept of concurrency and its importance in Go. **Code Example:** ```go package main import (     \"fmt\"     \"time\" ) func sayHello() {     fmt.Println(\"Hello from a goroutine!\") } func main() {     go sayHello()     time.Sleep(time.Second) // Wait for the goroutine to finish } ``` **Exercises:** - Write a simple program that launches a goroutine to print a message. ---"
    }
  },
  {
    "embedding": [
      0.1264481179494529,
      0,
      0,
      0.07439454744470901,
      0,
      0.14109315439707246,
      0.328985719166145,
      0,
      0.3075387180674255,
      0,
      0.020210385898413234,
      0.11328409898762543,
      0.031131085562028992,
      0.026457482940503214,
      0.008012810208681078,
      0,
      0,
      0.11573319683228332,
      0.03207531699969044,
      0.052429253380231376,
      0.058769442049320685,
      0.08000927154703112,
      0.12408579422099043,
      0.013520503442900683,
      0.13326026874307448,
      0.12089231423121316,
      0,
      0.10665201762616049,
      0.07644578753503861,
      0,
      0,
      0,
      0.24388769342542133,
      0.09539148256161951,
      0,
      0.1270595503287218,
      0.08092174767458601,
      0.007159782943852136,
      0,
      0,
      0,
      0,
      0.06361259394054472,
      0.05701294363531841,
      0,
      0.010979577951995938,
      0.05607207542700169,
      0,
      0.013719618351225116,
      0.02700694577575107,
      0,
      0,
      0.0361746648772083,
      0,
      0,
      0.1151745316792826,
      0,
      0.06230927247943764,
      0,
      0.12211815519107996,
      0,
      0.014633792045829897,
      0,
      0.17572788164994088,
      0,
      0.03493242132693551,
      0,
      0,
      0.009039844676937504,
      0.13051848034447497,
      0,
      0,
      0.1802689016235891,
      0.2094745675191751,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08580196316717069,
      0.10565650523453345,
      0.13655489145394784,
      0,
      0,
      0.14303692410816526,
      0,
      0.16779885257705943,
      0.03791707222836566,
      0.049010518753881356,
      0,
      0.03738010863205295,
      0,
      0.11020413837294998,
      0.05702438259774902,
      0.10165345391009703,
      0,
      0,
      0.12517114250611744,
      0.22504711560351076,
      0,
      0,
      0.19810223250369016,
      0,
      0.017974971509760938,
      0,
      0,
      0.04639052430898542,
      0.038349728889687296,
      0.16855932398661203,
      0,
      0,
      0.14085637871679824,
      0,
      0.20135302656368473,
      0,
      0.11978241451452715,
      0,
      0.03181676102410235,
      0,
      0,
      0,
      0.0691811790246937,
      0.06942863636852852,
      0.18640451563928245,
      0.05318437994214353,
      0.08527808788604486,
      0.04162245880859423
    ],
    "metadata": {
      "heading": "Day 2: Goroutines in Depth",
      "text": "**Objectives:** - Practice launching multiple goroutines concurrently. **Code Example:** ```go package main import (     \"fmt\"     \"time\" ) func worker(id int) {     fmt.Printf(\"Worker %d starting\\n\", id)     time.Sleep(500 * time.Millisecond)     fmt.Printf(\"Worker %d done\\n\", id) } func main() {     for i := 1; i <= 3; i++ {         go worker(i)     }     time.Sleep(2 * time.Second) } ``` **Exercises:** - Launch several goroutines and observe how they run concurrently. ---"
    }
  },
  {
    "embedding": [
      0.1454114980638775,
      0,
      0,
      0.004292389030625406,
      0,
      0.13388912349667426,
      0.26232467618217714,
      0.015633749939713452,
      0.2234255339845581,
      0,
      0.06358333631110226,
      0,
      0.054258228102319506,
      0.006811201717039114,
      0,
      0,
      0,
      0.08243026835132378,
      0.03512715122218694,
      0.07807077433826946,
      0.0498855070849086,
      0.049160135097508155,
      0.11948891094725976,
      0.02340685591390881,
      0.0899805240536681,
      0.14187095637802483,
      0,
      0.16446884072039727,
      0.015432014274833063,
      0,
      0,
      0,
      0.23613541403440988,
      0.1464315790839084,
      0,
      0.14042159018444808,
      0.1833850390584952,
      0.011826506540698776,
      0,
      0,
      0,
      0,
      0.09927093860329812,
      0.0189571916266788,
      0,
      0,
      0,
      0,
      0,
      0.06833460574106029,
      0,
      0,
      0.013054208116389892,
      0,
      0,
      0.07881374781651727,
      0,
      0.037879494310189575,
      0,
      0.07346683531473468,
      0,
      0,
      0,
      0.11919270386516351,
      0.10477058275397858,
      0.019781143855068253,
      0,
      0,
      0,
      0.17117066756928637,
      0,
      0,
      0.15857648877659566,
      0.20181121010864006,
      0,
      0,
      0,
      0,
      0,
      0.02808443310105042,
      0.06499436679843107,
      0.1137208375492214,
      0.23714744358033005,
      0,
      0,
      0.14466879797443327,
      0,
      0.16830045479446393,
      0,
      0.04604105725600877,
      0,
      0,
      0,
      0.18044477995782116,
      0.02527573663989984,
      0.1370419437303412,
      0,
      0,
      0.13964483279521314,
      0.19455934721143306,
      0,
      0,
      0.180464042724938,
      0,
      0.0029795177777475644,
      0,
      0,
      0.09337162265250835,
      0.06817718798167959,
      0.21918097178673274,
      0,
      0,
      0.15098449329050478,
      0,
      0.17310735109487332,
      0,
      0.17828964566864988,
      0,
      0.03389104825964589,
      0,
      0,
      0,
      0.073930292217222,
      0.16993138213738979,
      0.06866736778557556,
      0.09284110273794355,
      0.06120794127393937,
      0
    ],
    "metadata": {
      "heading": "Day 3: Channels Basics",
      "text": "**Objectives:** - Use channels to communicate between goroutines. **Code Example:** ```go package main import \"fmt\" func worker(done chan bool) {     fmt.Println(\"Working...\")     done <- true } func main() {     done := make(chan bool)     go worker(done)     <-done // Wait for the worker to finish     fmt.Println(\"Worker finished\") } ``` **Exercises:** - Write a program that uses a channel to transfer data between two goroutines. ---"
    }
  },
  {
    "embedding": [
      0.15449820565550063,
      0,
      0,
      0.004406868037675814,
      0,
      0.09237364873357476,
      0.22771118417606662,
      0,
      0.22506854640522458,
      0,
      0.05772092223067644,
      0,
      0.018458793649151355,
      0.0009377613522971533,
      0,
      0,
      0,
      0.06506377410717103,
      0.04779788570830049,
      0.09370542252215072,
      0.09156571755820363,
      0.0654138606846797,
      0.1405869231777913,
      0,
      0.049025338093777654,
      0.14268119687451877,
      0,
      0.17039149894184083,
      0,
      0,
      0,
      0.050850514828671825,
      0.23455869305092453,
      0.11374160923316536,
      0.013060095756233998,
      0.09664931304256516,
      0.10069413418409658,
      0.0837482126031206,
      0,
      0,
      0,
      0,
      0.12102421591720508,
      0.02499557568308102,
      0.032915798127444516,
      0,
      0,
      0,
      0,
      0.048822296628458856,
      0,
      0,
      0,
      0,
      0,
      0.10691960496807525,
      0,
      0.08651511979634947,
      0,
      0.09843148030370157,
      0,
      0.04055005291423433,
      0,
      0.1653617662142004,
      0.06961994400079596,
      0.03683749481782247,
      0,
      0,
      0,
      0.08651031718476207,
      0,
      0,
      0.23094542513262087,
      0.18658903380101782,
      0,
      0,
      0,
      0,
      0,
      0.02058220819602732,
      0.037959333171981004,
      0.10706109909498075,
      0.29735840012090825,
      0,
      0,
      0.1778278324091944,
      0,
      0.15343258228694895,
      0,
      0.010077971126341373,
      0,
      0.01433012117070146,
      0,
      0.1619272292068424,
      0.0106034706655291,
      0.13482703321036327,
      0,
      0,
      0.1437380505051447,
      0.15497475986034903,
      0,
      0,
      0.17437609936419862,
      0,
      0.007663359225294734,
      0,
      0,
      0.13129481949426564,
      0.08168660104931279,
      0.2237269441939523,
      0,
      0,
      0.15315669209466093,
      0,
      0.20640417875201778,
      0,
      0.12939108668750196,
      0,
      0,
      0,
      0,
      0,
      0.030185156599514096,
      0.119333942122687,
      0.15360074518254607,
      0.11332372228730328,
      0.0356274697645921,
      0
    ],
    "metadata": {
      "heading": "Day 4: Select Statement",
      "text": "**Objectives:** - Learn how to use the `select` statement to handle multiple channels. **Code Example:** ```go package main import (     \"fmt\"     \"time\" ) func main() {     ch1 := make(chan string)     ch2 := make(chan string)     go func() {         time.Sleep(1 * time.Second)         ch1 <- \"Message from channel 1\"     }()     go func() {         time.Sleep(2 * time.Second)         ch2 <- \"Message from channel 2\"     }()     select {     case msg1 := <-ch1:         fmt.Println(msg1)     case msg2 := <-ch2:         fmt.Println(msg2)     } } ``` **Exercises:** - Create a program that uses `select` to receive messages from two channels. ---"
    }
  },
  {
    "embedding": [
      0.13263788065846815,
      0,
      0,
      0.02240990409307412,
      0,
      0.08064189546388612,
      0.3395054589791726,
      0.00891773746995528,
      0.26257641989435704,
      0,
      0.012935377837543524,
      0,
      0.04210309920493389,
      0,
      0,
      0,
      0,
      0.035388254127205136,
      0.00825421306269209,
      0.09369355332188148,
      0.0428254556880104,
      0.08737140191015495,
      0.18424738837814492,
      0,
      0.020866357433134867,
      0.1197848895969483,
      0,
      0.11537479165001033,
      0,
      0,
      0,
      0.07029581867675551,
      0.2571481532653984,
      0.08481862891088605,
      0.004848105222617656,
      0.07960435815401427,
      0.10178392009621516,
      0,
      0,
      0,
      0,
      0,
      0.08458454358113218,
      0.11109041711085003,
      0,
      0,
      0.0005557728099653592,
      0,
      0.04974783955097243,
      0.07335738818679062,
      0,
      0,
      0.09011260060977243,
      0,
      0,
      0.1268031140374548,
      0,
      0.08058112167145774,
      0,
      0.13198168522813686,
      0,
      0,
      0,
      0.06619592391427159,
      0.037619695316710264,
      0.01990489496751166,
      0,
      0,
      0,
      0.04944831380620364,
      0,
      0,
      0.2177580991799858,
      0.1609881803105184,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09757246538043213,
      0.1747261917601599,
      0,
      0,
      0.10488877355192233,
      0,
      0.1821681538143992,
      0,
      0.10651085901372927,
      0,
      0.03691964086377317,
      0,
      0.18562890296514933,
      0.09051669342188995,
      0.10847918930921924,
      0,
      0,
      0.1478604849122152,
      0.16263432575710582,
      0.00704818870360056,
      0,
      0.1608079444553225,
      0.019205008778554786,
      0.027343991154334484,
      0.00743191802000019,
      0,
      0.04703277312295198,
      0.0786758581754752,
      0.20293977160703913,
      0,
      0,
      0.21749018590468902,
      0.022671507335276748,
      0.17831582115646016,
      0,
      0.17554951517470052,
      0,
      0.08946116323173699,
      0,
      0,
      0,
      0.05493595763769956,
      0.1223573089738311,
      0.17701879578724852,
      0.028801516553818674,
      0.07100615609126337,
      0.07190878264475585
    ],
    "metadata": {
      "heading": "Day 5: Concurrency Patterns and Review",
      "text": "**Objectives:** - Explore common concurrency patterns such as worker pools. - Review the week’s concepts. **Code Example:** ```go package main import (     \"fmt\"     \"time\" ) func worker(id int, jobs <-chan int, results chan<- int) {     for j := range jobs {         fmt.Printf(\"Worker %d processing job %d\\n\", id, j)         time.Sleep(time.Millisecond * 500)         results <- j * 2     } } func main() {     jobs := make(chan int, 5)     results := make(chan int, 5)     for w := 1; w <= 3; w++ {         go worker(w, jobs, results)     }     for j := 1; j <= 5; j++ {         jobs <- j     }     close(jobs)     for a := 1; a <= 5; a++ {         fmt.Println(\"Result:\", <-results)     } } ``` **Exercises:** - Modify the worker pool example to handle more jobs and different processing logic. ---"
    }
  },
  {
    "embedding": [
      0.15224412932930953,
      0,
      0,
      0.042483384213163715,
      0,
      0.1396538409420914,
      0.2966094413904479,
      0.06404041544075863,
      0.20611565219370664,
      0,
      0.06457927588014797,
      0.0007304049834100169,
      0.03882558323807147,
      0.007587082417440418,
      0,
      0,
      0,
      0.07549443633774518,
      0.09407854622597064,
      0.047274766355681,
      0.07808285147146811,
      0.06382921266811842,
      0.17087155719218922,
      0.022805703891722023,
      0.019860348161416585,
      0.15684179640493412,
      0,
      0.21609163476983884,
      0.0012355447032407875,
      0,
      0,
      0.029566463589464274,
      0.22993530387654662,
      0.14578450495971082,
      0,
      0.16407193978299506,
      0.10542131140102569,
      0.02536632319472871,
      0,
      0,
      0,
      0,
      0.08504690943214467,
      0.023050617748423333,
      0.022110821572490995,
      0,
      0,
      0,
      0,
      0.09917629594766886,
      0,
      0,
      0.01590331495848021,
      0,
      0,
      0.14779795557713832,
      0,
      0.0672453703133683,
      0,
      0.08389525115604096,
      0,
      0,
      0,
      0.13051017190903297,
      0.055601856029153074,
      0.057291085290623794,
      0,
      0,
      0.05048648222347974,
      0.09051095319963678,
      0,
      0,
      0.1506210363012816,
      0.19195577746745554,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02922493928403881,
      0.11631905423026748,
      0.24608449499712584,
      0,
      0,
      0.1137533144050316,
      0,
      0.12857924826326939,
      0,
      0.06534972118622921,
      0,
      0,
      0,
      0.16342948709983462,
      0.009145422998359347,
      0.088506570386999,
      0,
      0,
      0.19732987799252183,
      0.1938775457092732,
      0,
      0,
      0.1499039694306701,
      0.00964784389978944,
      0,
      0,
      0,
      0.06933552134258164,
      0.028751960455622436,
      0.23920769627023805,
      0,
      0,
      0.09823847850655211,
      0,
      0.1721704786665474,
      0,
      0.18699792505153792,
      0,
      0.03710863609291987,
      0,
      0,
      0,
      0.054171115003334394,
      0.14208363256493342,
      0.12023428801849669,
      0.09332694352082378,
      0.023756750632757107,
      0
    ],
    "metadata": {
      "heading": "Day 1: File I/O Basics",
      "text": "**Objectives:** - Learn to read from and write to files using Go. **Code Example:** ```go package main import (     \"fmt\"     \"io/ioutil\"     \"log\" ) func main() {     data, err := ioutil.ReadFile(\"sample.txt\")     if err != nil {         log.Fatal(err)     }     fmt.Println(\"File contents:\", string(data)) } ``` **Exercises:** - Create a text file and write a program to read and print its contents. ---"
    }
  },
  {
    "embedding": [
      0.15537606786172886,
      0,
      0,
      0.012312376949297597,
      0.0007174340410184736,
      0.08219587402720185,
      0.26365112728746404,
      0.0689383027357736,
      0.246326668092744,
      0,
      0.0631016458614744,
      0.019303136465957153,
      0.06904309835354215,
      0,
      0.0010855698645275238,
      0,
      0,
      0.12146473928377546,
      0.002522594379261098,
      0.08941206450123458,
      0.12141173323670319,
      0.023778835569042773,
      0.1340087793476652,
      0.015700670889372378,
      0.03964695187531181,
      0.19299072936110226,
      0,
      0.14859594882095042,
      0.008752092625630762,
      0,
      0,
      0.08627640475848693,
      0.19663720468263246,
      0.07467662637850273,
      0,
      0.1266489030142149,
      0.137692512569825,
      0.04529954594569687,
      0,
      0,
      0,
      0,
      0.05370109633310266,
      0.06636767510459837,
      0.07513616068431227,
      0,
      0.03582103766103267,
      0,
      0.006694138370602456,
      0.061354631397689124,
      0,
      0,
      0.04399790111770587,
      0,
      0,
      0.14750269657355752,
      0,
      0.12010090216157682,
      0,
      0.08946619374500357,
      0,
      0.025605821389725662,
      0,
      0.12068362875821914,
      0.06886386251790767,
      0.10770445375440932,
      0,
      0,
      0.0471395687399538,
      0.09737083308591,
      0,
      0,
      0.2505508021865995,
      0.13103319073548628,
      0,
      0,
      0,
      0,
      0,
      0.009745457536633003,
      0.005480572515228207,
      0.11388762956834769,
      0.19991578506271254,
      0,
      0,
      0.07748624887689709,
      0,
      0.1856267943213906,
      0,
      0.00483894141381114,
      0,
      0,
      0.058263862778693526,
      0.15793481657960246,
      0.0550141023967414,
      0.07437099528011477,
      0,
      0,
      0.15354639370466683,
      0.12274682915997615,
      0,
      0,
      0.13266736687789746,
      0,
      0.05316805599104477,
      0.002386443525827343,
      0,
      0.10964586926458815,
      0.0465650384060304,
      0.20044263593729938,
      0,
      0,
      0.2268434663919735,
      0,
      0.2244391569271529,
      0,
      0.1954636496319087,
      0,
      0,
      0,
      0,
      0,
      0.05562904397913786,
      0.07620164670070906,
      0.13639944457905892,
      0.13297457100419494,
      0.03568355682852509,
      0.03412290190544728
    ],
    "metadata": {
      "heading": "Day 2: More on File I/O",
      "text": "**Objectives:** - Explore advanced file operations and error handling. **Code Example:** ```go package main import (     \"fmt\"     \"io/ioutil\"     \"log\"     \"os\" ) func main() {     content := []byte(\"Hello, file!\")     err := ioutil.WriteFile(\"output.txt\", content, 0644)     if err != nil {         log.Fatal(err)     }     fmt.Println(\"Data written to file successfully\") } ``` **Exercises:** - Write a program that appends user input to a file. ---"
    }
  },
  {
    "embedding": [
      0.10026226448360792,
      0,
      0,
      0.03368356059506727,
      0,
      0.09296988036665361,
      0.35681876452452943,
      0.032901398763682276,
      0.24087789044071473,
      0,
      0.016144473615337065,
      0,
      0.003872127145312314,
      0.00022057058469805203,
      0,
      0,
      0,
      0.062003932252442495,
      0.035644757750434186,
      0.036523953425451255,
      0.07981787282661758,
      0,
      0.15718550041474902,
      0,
      0.07263220461009681,
      0.07655894368554746,
      0,
      0.19860498025149625,
      0.05407346131580023,
      0,
      0,
      0.015034008369429173,
      0.27483431570988914,
      0.15373894771977756,
      0,
      0.10398516204290709,
      0.15751282987693366,
      0,
      0,
      0,
      0,
      0,
      0.08514595593210789,
      0.03197830102281647,
      0.027508874409868562,
      0,
      0,
      0,
      0,
      0.09213015719675646,
      0,
      0,
      0.05701754450895483,
      0,
      0,
      0.11966039197542652,
      0,
      0.062062104102321054,
      0,
      0.07733857703550161,
      0,
      0.04099691696173299,
      0,
      0.1796197043403905,
      0.1346659137988428,
      0.008919132126331721,
      0,
      0,
      0,
      0.07326788119465469,
      0,
      0,
      0.1653053373248783,
      0.15708740007264452,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03345835376501105,
      0.06380440668172845,
      0.2521397450541425,
      0,
      0,
      0.1274541918424499,
      0,
      0.15702321507419192,
      0,
      0.02743192823659139,
      0,
      0,
      0,
      0.1940309624877424,
      0.0828804620728459,
      0.09901500658824847,
      0,
      0,
      0.19955807436752898,
      0.21228459108882813,
      0,
      0,
      0.16081833950529778,
      0.0020981765609955237,
      0,
      0.006715091919319882,
      0,
      0.08281882350524122,
      0.04544125158200322,
      0.15805102786130007,
      0,
      0,
      0.07581547023874063,
      0,
      0.13392667921634976,
      0.04169939450576627,
      0.11136286897931288,
      0,
      0.10212729411671578,
      0,
      0,
      0,
      0.06158652927008542,
      0.18281570830956265,
      0.09521271547227378,
      0.08836924221119284,
      0.02315446519353572,
      0.025428087829226308
    ],
    "metadata": {
      "heading": "Day 3: Introduction to HTTP Servers",
      "text": "**Objectives:** - Build a simple HTTP server using Go’s `net/http` package. **Code Example:** ```go package main import (     \"fmt\"     \"net/http\" ) func helloHandler(w http.ResponseWriter, r *http.Request) {     fmt.Fprintln(w, \"Hello, Go Web!\") } func main() {     http.HandleFunc(\"/\", helloHandler)     fmt.Println(\"Server starting on :8080\")     http.ListenAndServe(\":8080\", nil) } ``` **Exercises:** - Create a server that responds with different messages based on the URL path. ---"
    }
  },
  {
    "embedding": [
      0.1399906612279959,
      0,
      0,
      0,
      0,
      0.09203206418504842,
      0.28651066035302597,
      0.013186127724001033,
      0.2911254715512943,
      0,
      0,
      0,
      0.02085858614083885,
      0,
      0.07259059557611472,
      0,
      0,
      0.1456120312903442,
      0.0364596834521297,
      0.07197374196381624,
      0.04654126433988026,
      0.09312041432771856,
      0.1491481494728304,
      0.004991576834195927,
      0.12324292669084005,
      0.08800263074385956,
      0,
      0.12952719631551834,
      0,
      0,
      0,
      0.003577028071292479,
      0.25655319652918684,
      0.11460957240275639,
      0,
      0.07525436251894704,
      0.13097787749901924,
      0.00712850121759911,
      0,
      0,
      0,
      0,
      0.1035694593741924,
      0.08999329135792339,
      0,
      0.02059046619532516,
      0,
      0,
      0,
      0.04205872032327107,
      0.009506121760570932,
      0,
      0.08275419199314292,
      0,
      0,
      0.0736531927199559,
      0,
      0.06252023263241727,
      0,
      0,
      0,
      0.05809799084353154,
      0,
      0.1425803564681493,
      0.01664270058750035,
      0.05318028045411547,
      0,
      0.004848431489832848,
      0,
      0.030619447792404657,
      0,
      0,
      0.20951625771666554,
      0.23002115386511768,
      0,
      0,
      0,
      0,
      0,
      0.004286313659240576,
      0.04124678933258088,
      0.1285758139990785,
      0.20131806356397705,
      0,
      0,
      0.14599755893141222,
      0,
      0.18737184754914735,
      0,
      0.05873066376983646,
      0,
      0.025781258561281873,
      0,
      0.14212295208189335,
      0.04769079230868449,
      0.1284853021509323,
      0,
      0,
      0.06963558708900877,
      0.14210791920595156,
      0,
      0,
      0.2295426187798055,
      0.06264232665319042,
      0.021615691431894728,
      0.0020718711272838092,
      0,
      0.07710406010851202,
      0.09149549952796195,
      0.2048004717470952,
      0,
      0,
      0.13082359033355642,
      0,
      0.19193076067406042,
      0,
      0.12104686112749316,
      0,
      0.011734122098358979,
      0,
      0,
      0,
      0.05502947937619743,
      0.09114034941341939,
      0.19401667508608256,
      0.106926594908865,
      0.07779506367693811,
      0.055524889228066476
    ],
    "metadata": {
      "heading": "Day 4: HTTP Clients",
      "text": "**Objectives:** - Learn how to make HTTP requests using Go. **Code Example:** ```go package main import (     \"fmt\"     \"io/ioutil\"     \"net/http\" ) func main() {     resp, err := http.Get(\"https://api.github.com\")     if err != nil {         fmt.Println(\"Error:\", err)         return     }     defer resp.Body.Close()     body, _ := ioutil.ReadAll(resp.Body)     fmt.Println(\"Response:\", string(body)) } ``` **Exercises:** - Write a program that fetches data from a public API and displays a specific field from the JSON response. ---"
    }
  },
  {
    "embedding": [
      0.09247461542456596,
      0,
      0,
      0,
      0,
      0.06764705614929886,
      0.3590896178909369,
      0,
      0.2761402216802097,
      0,
      0,
      0.036748518912283056,
      0,
      0,
      0.018187557004121915,
      0,
      0,
      0.12284418386115847,
      0.021902500921266128,
      0.12806387862208451,
      0.011447780828835413,
      0.0001341755792092643,
      0.17764184849904435,
      0,
      0.0848783272412248,
      0.16287133201267298,
      0,
      0.16770661190470107,
      0,
      0,
      0,
      0.046436625137443684,
      0.21562525454523668,
      0.0755364357519415,
      0.01834803185166006,
      0.04084125201574933,
      0.10827011756385839,
      0.003974625119954517,
      0,
      0,
      0,
      0,
      0.11906571094584267,
      0.03861192729156911,
      0.035096024761944275,
      0,
      0.07963117250192732,
      0,
      0,
      0.06962521484954882,
      0.0617225339124248,
      0,
      0.048706860384059546,
      0,
      0,
      0.15591803554852768,
      0,
      0.034256655261669135,
      0,
      0.048365618818986385,
      0,
      0.11164224226114285,
      0,
      0.10554899142356378,
      0.015937551881852113,
      0.055506394082970784,
      0,
      0,
      0,
      0.02138659593555145,
      0.026943956952969014,
      0,
      0.2267813219693051,
      0.1916588742056013,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05238169417569112,
      0.12011808188769107,
      0.16062300114279598,
      0,
      0,
      0.1267271558020593,
      0,
      0.19451076527501643,
      0,
      0,
      0.037916889114951155,
      0.024198835204112777,
      0,
      0.17560135144014158,
      0.07783965429675209,
      0.10655973500877682,
      0,
      0,
      0.1290110726932898,
      0.1638339438735596,
      0.005790615565875015,
      0,
      0.17327976952230065,
      0.02773700773403525,
      0,
      0.014462086857537842,
      0,
      0,
      0.10515468170549377,
      0.16586243011977556,
      0,
      0,
      0.09823865274191779,
      0,
      0.12779799368370867,
      0,
      0.17596276037430691,
      0,
      0.14053965266580595,
      0,
      0,
      0,
      0.038324406748278306,
      0.155119790899571,
      0.1662444092996313,
      0.056016356193225994,
      0.07976325576015299,
      0.09166587084680392
    ],
    "metadata": {
      "heading": "Day 5: JSON Handling",
      "text": "**Objectives:** - Learn to marshal and unmarshal JSON data. **Code Example:** ```go package main import (     \"encoding/json\"     \"fmt\" ) type User struct {     Name string `json:\"name\"`     Age  int    `json:\"age\"` } func main() {     jsonData := `{\"name\": \"Alice\", \"age\": 30}`     var user User     err := json.Unmarshal([]byte(jsonData), &user)     if err != nil {         fmt.Println(\"Error:\", err)     }     fmt.Printf(\"User: %+v\\n\", user) } ``` **Exercises:** - Create a program that reads JSON data from a file, unmarshals it into a struct, and prints the result. ---"
    }
  },
  {
    "embedding": [
      0.1107061146768155,
      0,
      0,
      0.06214099458926196,
      0.006038954977213783,
      0.1413557778949081,
      0.3153730885245946,
      0,
      0.27116805581080655,
      0,
      0.016926360753802466,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07056787009829307,
      0.07418333288192908,
      0.07039426079535424,
      0.06643420534310848,
      0.04105951799083836,
      0.19891343551350424,
      0,
      0.07552366722536652,
      0.07055828385886735,
      0,
      0.2317223801092822,
      0,
      0,
      0,
      0,
      0.23482882059683088,
      0.1137454280311959,
      0,
      0.13686568077350006,
      0.11537229281487514,
      0,
      0,
      0,
      0,
      0,
      0.09785501538487956,
      0.04583722359154682,
      0.00979418154347152,
      0,
      0,
      0,
      0,
      0.07262474894520422,
      0,
      0,
      0.08908657965247713,
      0,
      0,
      0.12023129097845468,
      0,
      0.059554673026801216,
      0,
      0.056545781631146805,
      0,
      0.05289263388422559,
      0,
      0.1317549802865989,
      0.08981195093565773,
      0.004691137765130605,
      0,
      0,
      0,
      0.10710679080438415,
      0,
      0,
      0.16840859518508836,
      0.19003763779621782,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0003407060862389566,
      0.07003613075305909,
      0.22116718745738356,
      0,
      0,
      0.1624336352114618,
      0,
      0.17601121298466255,
      0.015329235864880948,
      0.025142754878495592,
      0,
      0,
      0,
      0.1562912058762665,
      0.07057652359376006,
      0.09937619594959621,
      0,
      0,
      0.15308490382203216,
      0.21302371683166568,
      0,
      0,
      0.17880136544431277,
      0.005770422907486252,
      0.027442121675411785,
      0,
      0,
      0.06515668510006595,
      0.02790758060373079,
      0.18960135323616498,
      0,
      0,
      0.07153273626826916,
      0,
      0.14920621723831812,
      0,
      0.13128444623717234,
      0,
      0.03739152923850709,
      0,
      0,
      0,
      0.03903231583905115,
      0.2081618861736667,
      0.15686233914613706,
      0.0462776676237198,
      0.0534807436052245,
      0.015752593476958083
    ],
    "metadata": {
      "heading": "Day 1: Introduction to Testing",
      "text": "**Objectives:** - Understand the basics of testing in Go using the `testing` package. **Code Example:** ```go package main import \"testing\" func Add(a, b int) int {     return a + b } func TestAdd(t *testing.T) {     result := Add(2, 3)     if result != 5 {         t.Errorf(\"Expected 5, got %d\", result)     } } ``` **Exercises:** - Write tests for a simple function you’ve created in previous lessons. ---"
    }
  },
  {
    "embedding": [
      0.14454197682931927,
      0,
      0,
      0.0006819333220348008,
      0,
      0.1781195898732322,
      0.32890507957557186,
      0.026776361932978086,
      0.25970524330774186,
      0,
      0.04412995858447688,
      0,
      0.01565082829011118,
      0,
      0.005429139916436947,
      0,
      0,
      0.10459878743242736,
      0.07632953968090657,
      0.1362712502573765,
      0.06267663337030682,
      0.05262854488538579,
      0.14311534733792994,
      0.06859916593767482,
      0.03887819899422629,
      0.07498071910020836,
      0,
      0.1439962522785523,
      0,
      0,
      0,
      0.06060656103793645,
      0.189787486115658,
      0.0804083501870341,
      0,
      0.07825787532556,
      0.1368236788468169,
      0.017891962368654295,
      0,
      0,
      0,
      0,
      0.09029752470289801,
      0.05704608574402146,
      0.05209665100766089,
      0,
      0.03726987680393706,
      0,
      0,
      0.09392740403933404,
      0,
      0,
      0.07149157460599709,
      0,
      0,
      0.127392330422253,
      0,
      0.030771962312729276,
      0,
      0.06330248504160542,
      0,
      0.08937199518169239,
      0,
      0.11806459125465178,
      0.05575783482331407,
      0.013623651054285136,
      0,
      0,
      0.02416789972502028,
      0.03140767563019666,
      0,
      0,
      0.20277083973899562,
      0.22329963371854716,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02658295953827642,
      0.10259611732454772,
      0.24272925060508121,
      0,
      0,
      0.20894061166901529,
      0,
      0.13640520981656426,
      0,
      0.02463640985288143,
      0,
      0.0011831772686901375,
      0,
      0.1505000130473781,
      0.029018585626305084,
      0.10339417867523011,
      0,
      0,
      0.10869961329571806,
      0.21164839557358914,
      0,
      0,
      0.1786641212775963,
      0.011727037967161007,
      0.035296427283816725,
      0,
      0,
      0.06430502169707616,
      0.042348083995139105,
      0.20682135860152592,
      0,
      0,
      0.10536858328184359,
      0,
      0.19307525356830918,
      0,
      0.14217809570150577,
      0,
      0.03198804734046315,
      0,
      0,
      0,
      0.015602987377463053,
      0.1425638759030685,
      0.18482932351025472,
      0.04184544181598406,
      0.030863369682745365,
      0.033616582943062585
    ],
    "metadata": {
      "heading": "Day 2: Writing More Tests",
      "text": "**Objectives:** - Learn table-driven tests and subtests. **Code Example:** ```go package main import \"testing\" func Multiply(a, b int) int {     return a * b } func TestMultiply(t *testing.T) {     tests := []struct {         a, b, expected int     }{         {2, 3, 6},         {4, 5, 20},         {0, 10, 0},     }     for _, test := range tests {         result := Multiply(test.a, test.b)         if result != test.expected {             t.Errorf(\"Multiply(%d, %d) = %d; want %d\", test.a, test.b, result, test.expected)         }     } } ``` **Exercises:** - Add additional test cases to your functions from previous weeks. ---"
    }
  },
  {
    "embedding": [
      0.060281616009119396,
      0,
      0,
      0.03687075012636371,
      0,
      0.0689543059391231,
      0.34250069453806564,
      0,
      0.25725447639196414,
      0,
      0,
      0,
      0.04757960063777187,
      0,
      0.004646388089422811,
      0,
      0,
      0.0848633028590665,
      0.007618420593975825,
      0.12124575296400014,
      0.07729291297079427,
      0,
      0.16301746732351402,
      0.01825603334604596,
      0.04571371132793829,
      0.13753206294402515,
      0,
      0.18612949861174927,
      0.009801599035070645,
      0,
      0,
      0.09221039019543963,
      0.20945095902157954,
      0.12233304892012727,
      0.004553436096894511,
      0.03800862876572906,
      0.12401275655889012,
      0.02398986956523099,
      0,
      0,
      0,
      0,
      0.0921871214339361,
      0.04725149477337257,
      0.0625925152286172,
      0,
      0.08978942551812995,
      0,
      0.033731500278972266,
      0.08160795109712186,
      0,
      0,
      0,
      0,
      0,
      0.17050163087706727,
      0,
      0.07493443561072077,
      0,
      0.08905975643746021,
      0,
      0.09188018859836698,
      0,
      0.13630020289393474,
      0.0794492641347194,
      0.017027053522489382,
      0,
      0,
      0,
      0.10766299350359304,
      0.018890182914916114,
      0,
      0.20952538174952895,
      0.1490313005423559,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05701155793828516,
      0.15761462063346507,
      0,
      0,
      0.12291283382419418,
      0,
      0.19638867403250126,
      0,
      0.06514371457910373,
      0,
      0,
      0,
      0.2825998048488846,
      0.04722415448000665,
      0.12016620549910238,
      0,
      0,
      0.10260108399350784,
      0.12385183407541779,
      0,
      0,
      0.12967654757136649,
      0,
      0,
      0.01990923922806257,
      0,
      0.07085847675598522,
      0.05415648092259569,
      0.2518989616974948,
      0,
      0,
      0.13535366667557042,
      0,
      0.1857444347459066,
      0.021645058959141678,
      0.10449970535108326,
      0,
      0.1278604715509068,
      0,
      0,
      0,
      0.006734352252983418,
      0.07181010978943834,
      0.13918768205634463,
      0.07200789273685475,
      0.1059880782516168,
      0.07578694457261506
    ],
    "metadata": {
      "heading": "Day 3: Benchmarking",
      "text": "**Objectives:** - Write benchmark tests to measure performance. **Code Example:** ```go package main import \"testing\" func SumSlice(s []int) int {     total := 0     for _, v := range s {         total += v     }     return total } func BenchmarkSumSlice(b *testing.B) {     s := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}     for i := 0; i < b.N; i++ {         SumSlice(s)     } } ``` **Exercises:** - Write a benchmark for one of your functions. ---"
    }
  },
  {
    "embedding": [
      0.16571333956576817,
      0,
      0,
      0,
      0,
      0.13135597776985503,
      0.298302249319398,
      0.005132081756825138,
      0.2508671537143676,
      0,
      0.058331950901122386,
      0.012115646220734267,
      0.04097282224755898,
      0,
      0.006626410567442637,
      0,
      0,
      0.09033266151232536,
      0.06523761389577176,
      0.13838175672407582,
      0.10160250702422643,
      0.02397518153485733,
      0.165248210967463,
      0.03398920131256513,
      0.091384259156772,
      0.16142086904476746,
      0,
      0.13290379529304536,
      0.029571382311183718,
      0,
      0,
      0.013872048589734917,
      0.2551148702248255,
      0.08099884109644671,
      0,
      0.11865403985110413,
      0.08979607508993405,
      0,
      0,
      0,
      0,
      0,
      0.048015516452453284,
      0.04842996210028811,
      0.004564734417351192,
      0,
      0,
      0,
      0,
      0.049274198993855184,
      0,
      0,
      0.08862931210417685,
      0,
      0,
      0.1335613956214298,
      0,
      0.07740658588149495,
      0,
      0.123235168016872,
      0,
      0.04474487250467701,
      0,
      0.1387580647339655,
      0.12090598713035407,
      0.04466334483564633,
      0,
      0,
      0.0013546030982074027,
      0.05361743720018418,
      0,
      0,
      0.1511687464409994,
      0.16059321468545965,
      0,
      0,
      0,
      0,
      0,
      0.021376250778708354,
      0.04813759052578454,
      0.07336652975173551,
      0.2654103730706604,
      0,
      0,
      0.11008499540773165,
      0,
      0.08073326960848946,
      0,
      0.07869665600921824,
      0,
      0,
      0,
      0.14610373066291563,
      0.058746337149567784,
      0.10118889573225094,
      0,
      0,
      0.19580959740422202,
      0.13922857645434464,
      0,
      0,
      0.15464611684082677,
      0,
      0.02221022399227109,
      0.023274682532266357,
      0,
      0.08639108401877434,
      0,
      0.20645688301620052,
      0,
      0,
      0.08727991307315844,
      0,
      0.2239628236990033,
      0,
      0.15501538375757803,
      0,
      0.0921540771481982,
      0,
      0,
      0,
      0.08012258867305234,
      0.13067887332600261,
      0.17205142511554633,
      0.1273478069437789,
      0.01586262091638738,
      0.07589936926624152
    ],
    "metadata": {
      "heading": "Day 4: Debugging Techniques",
      "text": "**Objectives:** - Learn simple debugging techniques using print statements and the `log` package. **Code Example:** ```go package main import (     \"fmt\"     \"log\" ) func faultyFunction(n int) int {     if n < 0 {         log.Println(\"Received negative value\")         return 0     }     return n * 2 } func main() {     fmt.Println(\"Result:\", faultyFunction(-5)) } ``` **Exercises:** - Insert debugging prints in an existing function to trace its execution. ---"
    }
  },
  {
    "embedding": [
      0.07476653127261346,
      0,
      0,
      0.035949744709662626,
      0,
      0.1512744499718514,
      0.3126843847067866,
      0,
      0.2590199911767125,
      0.003131361354737697,
      0.010652492688217203,
      0,
      0.032400544965996286,
      0,
      0.015534986779059708,
      0,
      0,
      0.0885248223334044,
      0.07578175978889662,
      0.03879308051620525,
      0.12210415297523673,
      0,
      0.05745211793046741,
      0.06896716813620049,
      0,
      0.14540534653093015,
      0,
      0.20355070413268025,
      0,
      0,
      0,
      0.09190669575180035,
      0.2994450122353797,
      0.11954217059574283,
      0,
      0.08848242959379604,
      0.1732304215189012,
      0,
      0,
      0,
      0,
      0,
      0.09512305136502953,
      0.014867710331807794,
      0.0730369729348542,
      0,
      0,
      0,
      0.024632863459073787,
      0.07178412147847377,
      0,
      0,
      0.04870860717862081,
      0,
      0,
      0.09567766689840283,
      0,
      0.07330770462788459,
      0,
      0.12549648371212194,
      0,
      0.07936686188574123,
      0,
      0.1844733109371439,
      0.09848442660505824,
      0,
      0,
      0,
      0.02855526950261173,
      0.08686307804941677,
      0,
      0,
      0.19753701796030027,
      0.11563328655929245,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014473777013729597,
      0.1101698986519699,
      0.1468083671803339,
      0,
      0,
      0.13112964036133262,
      0,
      0.14261957180484378,
      0,
      0.055858480772151616,
      0,
      0,
      0,
      0.1792000566666075,
      0.0016449474298716002,
      0.03866695745170729,
      0,
      0,
      0.17230488369104088,
      0.1808248369765774,
      0,
      0,
      0.23189013732713823,
      0.024487502282669098,
      0,
      0,
      0,
      0.04012507074320861,
      0.06329771704078843,
      0.19509897115698074,
      0,
      0,
      0.19558747933690315,
      0,
      0.11894426368015477,
      0.008564413279632251,
      0.16447299216078307,
      0,
      0.05401536208947652,
      0,
      0,
      0,
      0.0652604197180686,
      0.1369340958710518,
      0.0972428301030306,
      0.06966726310901354,
      0.030373052711263497,
      0.0007654070007429127
    ],
    "metadata": {
      "heading": "Day 5: Best Practices and Code Reviews",
      "text": "**Objectives:** - Review best practices in Go coding: formatting, error handling, and documentation. - Learn how to refactor code. **Exercises:** - Review an old project, refactor it, and add comments/documentation. - Format your code with `gofmt` and review it with `go vet`. ---"
    }
  },
  {
    "embedding": [
      0.10495274931771237,
      0,
      0,
      0.014019704568329981,
      0,
      0.1029602405120346,
      0.2882221780403968,
      0.041006050760171595,
      0.24229136387136496,
      0,
      0,
      0.052677628431513045,
      0,
      0,
      0.020128509853712905,
      0,
      0,
      0.08862380257418254,
      0.059809616692243675,
      0.06383174068920175,
      0.03433548656239349,
      0.021546712583658995,
      0.10212338819674492,
      0,
      0.05798030099793121,
      0.20048263124114685,
      0,
      0.17995485843765738,
      0,
      0,
      0,
      0.03565885306872254,
      0.251562352044052,
      0.0818639559940929,
      0,
      0.07590589032646784,
      0.15066881013196476,
      0,
      0,
      0,
      0,
      0,
      0.11492917893822051,
      0.03571438589176633,
      0.06795349048565594,
      0.019259568751148242,
      0,
      0,
      0,
      0.06367846929634187,
      0.0012665068055402909,
      0,
      0.0221628927163302,
      0,
      0,
      0.13636382895687152,
      0,
      0.06656397781944279,
      0,
      0.1816436149666691,
      0,
      0.0331856620232479,
      0,
      0.18696500999485433,
      0.04613130585416847,
      0,
      0,
      0,
      0.02230556202206397,
      0.10331764525613824,
      0,
      0,
      0.14039519322415037,
      0.14755017214236868,
      0,
      0,
      0,
      0,
      0,
      0,
      0.056668486706881536,
      0.0910118923182819,
      0.2055989381568815,
      0,
      0,
      0.1851481045802736,
      0,
      0.13260186866958582,
      0,
      0.04385434640054145,
      0,
      0,
      0,
      0.1511808227208016,
      0.06071367888723433,
      0.134897654606931,
      0,
      0,
      0.13160009504252365,
      0.1889882502353975,
      0,
      0,
      0.2120439578406398,
      0.015137735761112303,
      0,
      0.01606302007237132,
      0,
      0.08769471541048289,
      0.1312215276309223,
      0.1822689916093831,
      0,
      0,
      0.15277977529293865,
      0,
      0.13641516142165236,
      0,
      0.18541063241155892,
      0,
      0.10482774955395106,
      0,
      0,
      0,
      0.10763785011060836,
      0.13565885365378827,
      0.14839657750037413,
      0.06924308198360178,
      0.046609417080260805,
      0.04722626428785138
    ],
    "metadata": {
      "heading": "Day 1: Introduction to CLI Applications",
      "text": "**Objectives:** - Learn how to build simple command-line applications using the `flag` package. **Code Example:** ```go package main import (     \"flag\"     \"fmt\" ) func main() {     name := flag.String(\"name\", \"World\", \"a name to greet\")     flag.Parse()     fmt.Printf(\"Hello, %s!\\n\", *name) } ``` **Exercises:** - Create a CLI tool that accepts a few flags and prints a customized message. ---"
    }
  },
  {
    "embedding": [
      0.13937599512421128,
      0,
      0,
      0.036249423422020956,
      0,
      0.11126707034426633,
      0.2564159666915831,
      0,
      0.22389281256631174,
      0,
      0.059940250681539936,
      0,
      0.006367635051981197,
      0.007582774868538206,
      0,
      0,
      0,
      0.0968481395254829,
      0.010304576904618376,
      0.04870397487838217,
      0.04436990569269639,
      0.05776008026133387,
      0.04869425783926893,
      0,
      0.03297325959420252,
      0.11582126479800937,
      0,
      0.1663198879525752,
      0,
      0,
      0,
      0.08572966015794253,
      0.2897896423167932,
      0.15504461383987897,
      0,
      0.13358599082317096,
      0.18365741947889855,
      0,
      0,
      0,
      0,
      0,
      0.1486458241520664,
      0,
      0.0723025527797859,
      0,
      0,
      0,
      0.004916244503674213,
      0.07934995798939583,
      0,
      0,
      0.004929242154135387,
      0,
      0,
      0.12144767344076089,
      0,
      0.08281398861908487,
      0,
      0.037201154661351606,
      0,
      0.07733605800201077,
      0,
      0.17788821823639317,
      0.05393185302060981,
      0.05868274794462953,
      0,
      0,
      0.0535094150826679,
      0.11444114352404998,
      0,
      0,
      0.18767579836823628,
      0.16814548594624132,
      0,
      0,
      0,
      0,
      0,
      0.005332724741162295,
      0.07128287104930252,
      0.14998238590879953,
      0.22053678403378463,
      0,
      0,
      0.10560149937452476,
      0,
      0.20310794673715796,
      0,
      0.00035269227888215884,
      0,
      0,
      0,
      0.1842532373122334,
      0.0025585224266836703,
      0.09937068876478294,
      0,
      0,
      0.14711607064658577,
      0.13353947813247458,
      0,
      0,
      0.11285281714596856,
      0.015189357811164888,
      0.025153271442666995,
      0,
      0,
      0.11858272690718287,
      0.07157609201713362,
      0.19205667433459753,
      0,
      0,
      0.13393488435709702,
      0,
      0.18492020512479487,
      0,
      0.11095129137157833,
      0,
      0.057082342377987,
      0,
      0.006743998680403849,
      0,
      0.048754169340258856,
      0.19878080789174868,
      0.15716607057343515,
      0.1301068774860179,
      0.07374875719331818,
      0.015859676534218794
    ],
    "metadata": {
      "heading": "Day 2: Advanced CLI Applications",
      "text": "**Objectives:** - Explore advanced CLI features such as subcommands (using external libraries if desired). **Exercises:** - Extend your CLI tool to handle subcommands (e.g., `add`, `list`). ---"
    }
  },
  {
    "embedding": [
      0.15371233817177116,
      0,
      0,
      0.026793899159702858,
      0,
      0.1032018544499584,
      0.3226358492648707,
      0.015094233258253272,
      0.2736957125415726,
      0,
      0.009358474033471217,
      0.007156643068599603,
      0,
      0,
      0.02394601514948332,
      0,
      0,
      0.13118455221542297,
      0.10485864170900877,
      0.09913353220633245,
      0.06777982398825191,
      0.02878364925520453,
      0.12589540816854042,
      0.05049668044325015,
      0.016159260357390407,
      0.13032565944000704,
      0,
      0.18647188560322192,
      0.010497417299884846,
      0,
      0,
      0.030441634182332027,
      0.2513456528429087,
      0.13451268698553817,
      0,
      0.09291165706963321,
      0.14368642477664342,
      0,
      0,
      0,
      0,
      0,
      0.08979304208290982,
      0.03384198415561615,
      0.019878191597917642,
      0.0028295117140078167,
      0,
      0,
      0.021266821806078792,
      0.061295536593958665,
      0,
      0,
      0.040537615495234436,
      0,
      0,
      0.13101370508048532,
      0,
      0.08828788411024674,
      0,
      0.13858603877538947,
      0,
      0.06401875949293748,
      0,
      0.15572116301300146,
      0.0627332451013114,
      0.027217403733544487,
      0,
      0.0003252564624886189,
      0,
      0.030795761336598247,
      0.027120461955195223,
      0,
      0.15078807049197876,
      0.1900192459810232,
      0,
      0,
      0,
      0,
      0,
      0,
      0.039299085473419725,
      0.09567358096857181,
      0.18787420675611619,
      0,
      0,
      0.17259021480813203,
      0,
      0.1546876228168275,
      0,
      0.10998300541535047,
      0,
      0,
      0,
      0.1517730860200317,
      0.053033974436722545,
      0.09175305924312499,
      0,
      0,
      0.1037854511588605,
      0.14366121219510528,
      0,
      0,
      0.2439750291582121,
      0.029858207631658976,
      0.0010678808958641901,
      0.002210024918976671,
      0,
      0.10075507069185116,
      0.09575784631191973,
      0.1973943155690454,
      0,
      0,
      0.08130901577758773,
      0,
      0.13112701774980812,
      0,
      0.10880733053788369,
      0,
      0.08573440249083393,
      0,
      0,
      0,
      0.07460567209658599,
      0.17197268082006464,
      0.1656793164184198,
      0.0499530064856741,
      0.04256087059571418,
      0.018495250746373725
    ],
    "metadata": {
      "heading": "Day 3: Introduction to Web Applications",
      "text": "**Objectives:** - Learn the basics of building web applications and REST APIs in Go. **Code Example:** ```go package main import (     \"encoding/json\"     \"fmt\"     \"net/http\" ) type Message struct {     Text string `json:\"text\"` } func messageHandler(w http.ResponseWriter, r *http.Request) {     msg := Message{Text: \"Hello, API!\"}     json.NewEncoder(w).Encode(msg) } func main() {     http.HandleFunc(\"/message\", messageHandler)     fmt.Println(\"Server running on :8080\")     http.ListenAndServe(\":8080\", nil) } ``` **Exercises:** - Create a minimal REST API with at least two endpoints. ---"
    }
  },
  {
    "embedding": [
      0.17158553553734768,
      0,
      0,
      0,
      0,
      0.09166188195062032,
      0.319668287352979,
      0.04517651713444614,
      0.22483042758577387,
      0,
      0.00618508240962739,
      0,
      0.024333326446730676,
      0,
      0.01988538300839363,
      0,
      0,
      0.10815408240820357,
      0.02722316794641809,
      0.1298627723268251,
      0.02694320211464663,
      0,
      0.1543885330008288,
      0.0250808739845417,
      0.03244992320646,
      0.09070027442798305,
      0,
      0.20430343841246323,
      0,
      0,
      0,
      0.030118055400555538,
      0.18259528228630273,
      0.09300761963173335,
      0,
      0.04998981511113579,
      0.183227841964801,
      0.04972126997134564,
      0,
      0,
      0,
      0,
      0.08741961900737401,
      0.07318426465061356,
      0.07596992731934897,
      0,
      0.04211915407666181,
      0,
      0,
      0.05696083231776865,
      0,
      0,
      0.06521508346898415,
      0,
      0,
      0.1327049320851709,
      0,
      0.07085186282058067,
      0,
      0.06116700284440187,
      0,
      0.056872027088840885,
      0,
      0.1420967840440193,
      0.02650144074503685,
      0.05801807738613838,
      0,
      0,
      0.013186837534489577,
      0.0341329610249227,
      0,
      0,
      0.2110364859688777,
      0.16867374031115362,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08838085432468874,
      0.2707821620699849,
      0,
      0,
      0.1972872981167079,
      0,
      0.2094099058813104,
      0,
      0.08926983881695018,
      0,
      0.0009291069854735606,
      0,
      0.04288970039146975,
      0.049213501484481184,
      0.09051848742055953,
      0,
      0,
      0.16689993806690992,
      0.15127616427055884,
      0,
      0,
      0.17150508965132583,
      0,
      0.05991317858289758,
      0,
      0,
      0.08071064070589122,
      0.030615627137509767,
      0.24514743377496098,
      0,
      0,
      0.11600351611524722,
      0.03132607094105975,
      0.17305344794275274,
      0,
      0.10402587198911058,
      0,
      0.05232354235013744,
      0,
      0,
      0,
      0.012471819235934111,
      0.130600466873046,
      0.18777814242183344,
      0.1272405275227902,
      0.030502992931457848,
      0
    ],
    "metadata": {
      "heading": "Day 4: Web Frameworks Overview",
      "text": "**Objectives:** - Get an overview of popular Go web frameworks (e.g., Gin, Echo, Fiber). **Code Example (using Gin):** ```go package main import (     \"net/http\"     \"github.com/gin-gonic/gin\" ) func main() {     r := gin.Default()     r.GET(\"/ping\", func(c *gin.Context) {         c.JSON(http.StatusOK, gin.H{\"message\": \"pong\"})     })     r.Run(\":8080\") } ``` **Exercises:** - Install a web framework of your choice and create a simple routing example. ---"
    }
  },
  {
    "embedding": [
      0.19619630064786509,
      0,
      0,
      0.024489784930856844,
      0,
      0.1392442159267358,
      0.3142741105485081,
      0.02489407672067781,
      0.23598642501812508,
      0,
      0.02782468045282943,
      0,
      0.010804658153909644,
      0,
      0.04739921530092645,
      0,
      0,
      0.1201553240199013,
      0.09155553640333527,
      0.11697647037732394,
      0.04673086622569521,
      0.03902713710169573,
      0.10840946161600659,
      0,
      0.003828354826772291,
      0.15889292188168894,
      0,
      0.1380167952179142,
      0,
      0,
      0,
      0.06324978904953384,
      0.2041817367018802,
      0.07667431670085366,
      0,
      0.18116398539563303,
      0.1483455907293279,
      0.04671312185182759,
      0,
      0,
      0,
      0,
      0.09446427011380644,
      0.034396403293843476,
      0,
      0,
      0,
      0,
      0.01580050648174213,
      0.07469084406092141,
      0,
      0,
      0.007224368191245881,
      0,
      0,
      0.16267361563009355,
      0,
      0.05101568130251892,
      0,
      0.10141422088823167,
      0,
      0,
      0,
      0.12660611354945647,
      0.03738281151520941,
      0.06420049753655843,
      0,
      0,
      0.035196566785822114,
      0.08615800357565391,
      0,
      0,
      0.19549041391398186,
      0.15409820005774635,
      0,
      0,
      0,
      0,
      0,
      0,
      0.061894031769106,
      0.15528844868681524,
      0.21147362753723256,
      0,
      0,
      0.15751099413497346,
      0,
      0.19354047532527013,
      0,
      0.020914826780066096,
      0,
      0,
      0,
      0.16479704572300233,
      0.030593075622171954,
      0.08962506020124375,
      0,
      0,
      0.14167450963503797,
      0.1133925464507126,
      0,
      0,
      0.1656857547756828,
      0.008662854927788032,
      0,
      0,
      0,
      0.09670936504551897,
      0.09894738020841999,
      0.20121685026803282,
      0,
      0,
      0.14413044993147328,
      0,
      0.18245008698743895,
      0,
      0.13955078517731861,
      0,
      0,
      0,
      0.003914262073861426,
      0,
      0.04421003617906665,
      0.1633465593081296,
      0.1672747825938868,
      0.060315887880514875,
      0.07199837514303638,
      0.01909356995489072
    ],
    "metadata": {
      "heading": "Day 5: Deployment and Project Structure",
      "text": "**Objectives:** - Learn how to structure a Go project and prepare it for deployment. - Understand version control basics with Git. **Exercises:** - Organize your CLI or web project using modules (`go mod init`) and document build instructions. ---"
    }
  },
  {
    "embedding": [
      0.12360915249955627,
      0,
      0,
      0,
      0,
      0.07025348661835425,
      0.2740804675985165,
      0,
      0.2688720496109702,
      0,
      0.09182362543344814,
      0,
      0.0947678237330808,
      0.016305074372054723,
      0,
      0,
      0,
      0.08301816437654098,
      0.03627325264139271,
      0.06962839646239494,
      0.1636436578025006,
      0.07373202049203492,
      0.090347750127269,
      0.07398390896902976,
      0.025921040993866128,
      0.12504132522451675,
      0,
      0.19276741331621605,
      0.011910355921430306,
      0,
      0,
      0,
      0.24600579326673627,
      0.18110984678697767,
      0.013486883527465446,
      0.09979558083726109,
      0.16231777376155224,
      0,
      0,
      0,
      0,
      0,
      0.07932278437706446,
      0.02575139489726639,
      0.06069460475727728,
      0.02475878761648535,
      0,
      0,
      0,
      0.04720995968551417,
      0,
      0,
      0.0770299074185234,
      0,
      0,
      0.057951980047113334,
      0,
      0.18341636290979155,
      0,
      0.10532652380857109,
      0,
      0.022470575228862567,
      0,
      0.13309674277548755,
      0.058609881071785754,
      0.11324081653428161,
      0,
      0,
      0.03664095575496321,
      0.07882257807674749,
      0,
      0,
      0.12993512994212314,
      0.12279194188278546,
      0,
      0,
      0,
      0,
      0,
      0.02117463568227881,
      0.0341537019441664,
      0.0821805983117399,
      0.21551389627320947,
      0,
      0,
      0.13307340412347732,
      0,
      0.17180636994243376,
      0,
      0.12468637618235738,
      0,
      0.009159244872902289,
      0,
      0.1208372576594877,
      0.08012190310005546,
      0.08421463176686661,
      0,
      0,
      0.18359782342367756,
      0.20304576064668434,
      0,
      0,
      0.16969048642298223,
      0.021734642251947725,
      0.019195640022454028,
      0,
      0,
      0.021204719296337604,
      0.03550483811837995,
      0.2612635267312458,
      0,
      0,
      0.17596930957178683,
      0,
      0.12575979758928887,
      0.017721785473759192,
      0.13300221069095103,
      0,
      0.08000785738181324,
      0,
      0,
      0,
      0.014178670715054355,
      0.12100697414364299,
      0.10920098923892717,
      0.06024827553112449,
      0.061061686764012066,
      0.072319889634614
    ],
    "metadata": {
      "heading": "Day 1: Final Project Kick-off",
      "text": "**Objectives:** - Outline your final project (e.g., a task manager or blog engine). - Define requirements and plan features. **Exercises:** - Create a project plan outlining the main features and modules. ---"
    }
  },
  {
    "embedding": [
      0.1573122996284234,
      0,
      0,
      0.006255007055963322,
      0,
      0.09504237590632282,
      0.30744532622169557,
      0.015247701034718007,
      0.2582251987567384,
      0,
      0.053706059040988206,
      0,
      0.048032802108783475,
      0,
      0,
      0,
      0,
      0.0690088662537757,
      0.07866597188557171,
      0.10875801334677587,
      0.09339029437367145,
      0.05634551384248502,
      0.16922068128119044,
      0,
      0.1167698527879343,
      0.09862363576550803,
      0,
      0.16177533023466467,
      0.07197932131924155,
      0,
      0,
      0.027050914579322006,
      0.22558841855557213,
      0.06639060028232184,
      0,
      0.1212401468976532,
      0.11320785592875139,
      0,
      0,
      0,
      0,
      0,
      0.0944251028175472,
      0.046680664105366886,
      0,
      0,
      0.005763024639228801,
      0,
      0,
      0.021319798051887193,
      0.011613293800412186,
      0,
      0.04443828562281548,
      0,
      0,
      0.14517347526192304,
      0,
      0.06213444473870541,
      0,
      0.08440521483690884,
      0,
      0.03226616163406797,
      0,
      0.08045956038898568,
      0.07421672157700526,
      0.038256806875787065,
      0,
      0,
      0,
      0.09399040213653062,
      0,
      0,
      0.17700258649003853,
      0.21120042402105602,
      0,
      0,
      0,
      0,
      0,
      0.019936705123780218,
      0,
      0.04789600578930766,
      0.23881005171796715,
      0,
      0,
      0.07968567609942115,
      0,
      0.17097294226397836,
      0,
      0.12162458096280428,
      0,
      0,
      0,
      0.2013229200457747,
      0.09425077199232748,
      0.13473763065164532,
      0,
      0,
      0.17229491591223878,
      0.17710761049499643,
      0,
      0,
      0.1486185127361304,
      0,
      0,
      0.013643466127847727,
      0,
      0.0740938240174494,
      0.01796306321770913,
      0.1354309770056028,
      0,
      0,
      0.13533446756177386,
      0,
      0.21898764954497452,
      0.021643877895705824,
      0.16766401938041442,
      0,
      0.09364877660298178,
      0,
      0,
      0,
      0.07879712509772116,
      0.1350137142923831,
      0.16426898902290418,
      0.07769048560876637,
      0.07613970476977387,
      0.03089232011533388
    ],
    "metadata": {
      "heading": "Day 2: Building the Core Functionality",
      "text": "**Objectives:** - Implement the core components of your project. - Define data models and core functions. **Exercises:** - Start coding the main functionality (e.g., data handling for a task manager). ---"
    }
  },
  {
    "embedding": [
      0.1625127828220399,
      0,
      0,
      0.014104835912204346,
      0,
      0.11461178862082264,
      0.28860928770128075,
      0,
      0.2737369007756742,
      0,
      0,
      0,
      0.018494371603614796,
      0,
      0.0322916950903617,
      0,
      0,
      0.12513195006095584,
      0.05060347576164218,
      0.08574322472735345,
      0.0959687693662913,
      0.011586898961812947,
      0.10332482918698484,
      0,
      0.1298971039911463,
      0.12064282921547322,
      0,
      0.16145413585798937,
      0.0017288785840063217,
      0,
      0,
      0.04019850476894059,
      0.2965008833968312,
      0.12635277268533077,
      0,
      0.0912428604146615,
      0.12915672704400363,
      0,
      0,
      0,
      0,
      0,
      0.1164970440875736,
      0.01406583887514639,
      0.023810178757373755,
      0,
      0,
      0,
      0,
      0.0499337370665766,
      0.0003647623761258035,
      0,
      0,
      0,
      0,
      0.18759880222561917,
      0,
      0.07352222743902885,
      0,
      0.06126016362457529,
      0,
      0.08422252585101435,
      0,
      0.1474477424743884,
      0.09036165093951051,
      0.08008545248877875,
      0,
      0,
      0.003918740592895095,
      0.03011704755623565,
      0,
      0,
      0.18103609815488314,
      0.1417600199566423,
      0,
      0,
      0,
      0,
      0,
      0,
      0.041117196297112635,
      0.09892001139843026,
      0.2591106419558284,
      0,
      0,
      0.11500989837415994,
      0,
      0.21403864026572644,
      0,
      0.032428897479820404,
      0,
      0.012263291926758754,
      0,
      0.16608967710676265,
      0.057455928111595576,
      0.08112986815337171,
      0,
      0,
      0.14830396055255785,
      0.13914627257591297,
      0.006348997826779159,
      0,
      0.16840535236919218,
      0.03085906545013946,
      0.029510251733043925,
      0,
      0,
      0.026911364119503522,
      0.017448358485321724,
      0.17323348073382056,
      0,
      0,
      0.15337681633720265,
      0,
      0.17758814857153776,
      0.015173157055318146,
      0.12076735561744201,
      0,
      0.05782075598890438,
      0,
      0,
      0,
      0.05263636550343311,
      0.09521835605027339,
      0.1288337263027717,
      0.15403115258556593,
      0.018292334315750686,
      0.06330347142160817
    ],
    "metadata": {
      "heading": "Day 3: Expanding the Project",
      "text": "**Objectives:** - Add additional features, error handling, and concurrency if applicable. - Integrate modules built in previous weeks. **Exercises:** - Enhance your project with extra features (e.g., user authentication or background processing). ---"
    }
  },
  {
    "embedding": [
      0.14837116831773003,
      0,
      0,
      0,
      0,
      0.06545021906915817,
      0.2936369765181867,
      0.039240348588720775,
      0.2628570176823142,
      0,
      0.06003466660450224,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0876645278841265,
      0.07490993123403958,
      0.09580318494208319,
      0.05473602083956681,
      0.001103217935576464,
      0.1098223581995597,
      0.019909727974084062,
      0.01502192170398934,
      0.1670459466303184,
      0,
      0.23704519715760083,
      0.019605527232425576,
      0,
      0,
      0.061872453426025036,
      0.2673876587100118,
      0.07305727134137498,
      0,
      0.11292082291442868,
      0.13940938616064028,
      0,
      0,
      0,
      0,
      0,
      0.04784664527834848,
      0.07349425224574703,
      0.11664248326464022,
      0,
      0.028838929991854678,
      0,
      0,
      0.05013735382001556,
      0.03302161892991106,
      0,
      0.09200086936387952,
      0,
      0,
      0.1258391137270288,
      0,
      0.0626644531801067,
      0,
      0.10012476750424236,
      0,
      0.05692379105171938,
      0,
      0.1565984282826219,
      0.08600857558084385,
      0.0294256613376712,
      0,
      0,
      0,
      0.08499857893439387,
      0.018811125461564087,
      0,
      0.15542263648695054,
      0.18483550358064732,
      0,
      0,
      0,
      0,
      0,
      0.04569959135529575,
      0,
      0.09010818106026174,
      0.21860142955233025,
      0,
      0,
      0.11454695333819186,
      0,
      0.13641927521225353,
      0,
      0.06247016702788661,
      0,
      0,
      0,
      0.1625057658890971,
      0.03981526200327818,
      0.13597955101671913,
      0,
      0,
      0.17574063707629314,
      0.16137261601009886,
      0,
      0,
      0.1929079769931251,
      0.036745917661355314,
      0,
      0,
      0,
      0.09146866136489698,
      0.03493972172507306,
      0.2067367803677746,
      0,
      0,
      0.11118758004688148,
      0,
      0.17316460159361732,
      0,
      0.16043226712735373,
      0,
      0.06613766329381392,
      0,
      0,
      0,
      0.06245503686772981,
      0.14790869691731412,
      0.125948141240967,
      0.08226220596476636,
      0.05524925889990714,
      0
    ],
    "metadata": {
      "heading": "Day 4: Testing and Debugging the Final Project",
      "text": "**Objectives:** - Write tests for your final project. - Debug and refactor your code. **Exercises:** - Create a test suite covering core functions. - Refactor your code for readability and maintainability. ---"
    }
  },
  {
    "embedding": [
      0.1546189800463646,
      0,
      0,
      0.040227931124053255,
      0,
      0.09452053010991605,
      0.34851803544225335,
      0.021385844211530763,
      0.2546433021448524,
      0,
      0.05188285132084104,
      0,
      0.037256224442885,
      0,
      0.022516534609056837,
      0,
      0,
      0.12146414681178276,
      0.026273911459109168,
      0.06688379963922075,
      0.07733040445040068,
      0,
      0.1844292582776985,
      0,
      0.04297508574834343,
      0.0897312797551874,
      0,
      0.15427533296365936,
      0,
      0,
      0,
      0.0106665862382499,
      0.2125712067586095,
      0.17226870251856657,
      0,
      0.13934531123159072,
      0.19384959645310054,
      0.002035248374167617,
      0,
      0,
      0,
      0,
      0.1031226077732897,
      0,
      0.04879016796964962,
      0.010133385359513532,
      0,
      0,
      0.0018911765267566282,
      0.0798744515054133,
      0,
      0,
      0.06418233410744552,
      0,
      0,
      0.14132912965446331,
      0,
      0.13478137524525372,
      0,
      0.02334130232065327,
      0,
      0,
      0.007916474915744718,
      0.08581636853700526,
      0.06682556537747748,
      0.139940466461377,
      0,
      0,
      0.026017351210332065,
      0.09938448620209642,
      0,
      0,
      0.20168197546740718,
      0.1311615021403404,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005474985292929348,
      0.08027740810334456,
      0.21443614765176133,
      0,
      0,
      0.12519556258778858,
      0,
      0.20680737375251435,
      0,
      0.02914664123587243,
      0,
      0,
      0,
      0.1637156611773954,
      0.05658010087950306,
      0.02356836224702105,
      0,
      0.02265997747219287,
      0.1857723837131773,
      0.18851909066079597,
      0,
      0,
      0.18650168706279896,
      0.012249501759760641,
      0.01197270834580511,
      0.014777478177789828,
      0,
      0.0679089182713918,
      0.030880081679548345,
      0.19546612635984006,
      0,
      0,
      0.15380278599142028,
      0.015063991017547611,
      0.1227723905133075,
      0,
      0.14834605421920383,
      0,
      0.02441824392955622,
      0,
      0,
      0,
      0.02413853323895588,
      0.09454277839495123,
      0.13207368956001658,
      0.07517602067274705,
      0.016510990521897553,
      0
    ],
    "metadata": {
      "heading": "Day 5: Final Review, Code Cleanup, and Career Prep",
      "text": "**Objectives:** - Finalize your project, add documentation, and prepare a README. - Learn about code reviews, Git usage, and interview preparation tips. **Exercises:** - Submit your project to GitHub. - Write a reflection on your learning journey and prepare for technical interviews. --- *End of Textbook*"
    }
  }
]